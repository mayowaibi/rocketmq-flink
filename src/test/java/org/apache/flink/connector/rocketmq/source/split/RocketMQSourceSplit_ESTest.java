/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 26 11:36:13 GMT 2025
 */

package org.apache.flink.connector.rocketmq.source.split;

import org.apache.rocketmq.common.message.MessageQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
        mockJVMNonDeterminism = true,
        useVFS = true,
        useVNET = true,
        resetStaticState = true,
        separateClassLoader = true,
        useJEE = true)
public class RocketMQSourceSplit_ESTest extends RocketMQSourceSplit_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        MessageQueue messageQueue0 = new MessageQueue("", "", 0);
        RocketMQSourceSplit rocketMQSourceSplit0 = new RocketMQSourceSplit(messageQueue0, 0, 0);
        RocketMQSourceSplit rocketMQSourceSplit1 =
                new RocketMQSourceSplit(messageQueue0, 0, 1481L, true);
        boolean boolean0 = rocketMQSourceSplit0.equals(rocketMQSourceSplit1);
        assertFalse(boolean0);
        assertEquals(1481L, rocketMQSourceSplit1.getStoppingOffset());
        assertEquals(0, rocketMQSourceSplit1.getQueueId());
        assertEquals(0L, rocketMQSourceSplit0.getStoppingOffset());
        assertEquals(0L, rocketMQSourceSplit1.getStartingOffset());
        assertTrue(rocketMQSourceSplit0.getIsIncrease());
        assertEquals(0L, rocketMQSourceSplit0.getStartingOffset());
        assertFalse(rocketMQSourceSplit1.equals((Object) rocketMQSourceSplit0));
        assertTrue(rocketMQSourceSplit1.getIsIncrease());
        assertEquals(0, rocketMQSourceSplit0.getQueueId());
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        MessageQueue messageQueue0 = new MessageQueue("", "]", 1);
        RocketMQSourceSplit rocketMQSourceSplit0 = new RocketMQSourceSplit(messageQueue0, 1, 484L);
        RocketMQSourceSplit rocketMQSourceSplit1 =
                new RocketMQSourceSplit(messageQueue0, (-1L), 1729L, false);
        boolean boolean0 = rocketMQSourceSplit0.equals(rocketMQSourceSplit1);
        assertEquals(1729L, rocketMQSourceSplit1.getStoppingOffset());
        assertEquals(1, rocketMQSourceSplit0.getQueueId());
        assertEquals(484L, rocketMQSourceSplit0.getStoppingOffset());
        assertEquals(1, rocketMQSourceSplit1.getQueueId());
        assertEquals(1L, rocketMQSourceSplit0.getStartingOffset());
        assertEquals("", rocketMQSourceSplit1.getTopic());
        assertFalse(boolean0);
        assertEquals((-1L), rocketMQSourceSplit1.getStartingOffset());
        assertTrue(rocketMQSourceSplit0.getIsIncrease());
        assertEquals("", rocketMQSourceSplit0.getTopic());
        assertEquals("]", rocketMQSourceSplit0.getBrokerName());
        assertFalse(rocketMQSourceSplit1.getIsIncrease());
        assertEquals("]", rocketMQSourceSplit1.getBrokerName());
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        MessageQueue messageQueue0 = new MessageQueue(":;#5P0i{\t", ":;#5P0i{\t", 4009);
        RocketMQSourceSplit rocketMQSourceSplit0 =
                new RocketMQSourceSplit(messageQueue0, 4009, 4009, true);
        RocketMQSourceSplit rocketMQSourceSplit1 =
                new RocketMQSourceSplit(":;#5P0i{\t", ":;#5P0i{\t", (-26), 4009, (-26));
        boolean boolean0 = rocketMQSourceSplit0.equals(rocketMQSourceSplit1);
        assertEquals((-26), rocketMQSourceSplit1.getQueueId());
        assertEquals(4009L, rocketMQSourceSplit0.getStoppingOffset());
        assertEquals(4009L, rocketMQSourceSplit1.getStartingOffset());
        assertFalse(boolean0);
        assertEquals(4009L, rocketMQSourceSplit0.getStartingOffset());
        assertTrue(rocketMQSourceSplit1.getIsIncrease());
        assertEquals((-26L), rocketMQSourceSplit1.getStoppingOffset());
        assertEquals(4009, rocketMQSourceSplit0.getQueueId());
        assertTrue(rocketMQSourceSplit0.getIsIncrease());
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        RocketMQSourceSplit rocketMQSourceSplit0 =
                new RocketMQSourceSplit("Pm+", "Pm+", 1, (-1381L), 1, true);
        rocketMQSourceSplit0.hashCode();
        assertEquals((-1381L), rocketMQSourceSplit0.getStartingOffset());
        assertEquals(1, rocketMQSourceSplit0.getQueueId());
        assertEquals(1L, rocketMQSourceSplit0.getStoppingOffset());
        assertTrue(rocketMQSourceSplit0.getIsIncrease());
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        RocketMQSourceSplit rocketMQSourceSplit0 =
                new RocketMQSourceSplit("Pm+", "Pm+", 1, (-1381L), 1, true);
        String string0 = rocketMQSourceSplit0.toString();
        assertEquals(
                "(Topic: Pm+, BrokerName: Pm+, QueueId: 1, MinOffset: -1381, MaxOffset: 1, status: true)",
                string0);
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        MessageQueue messageQueue0 = new MessageQueue(">^Rdf<n86lS*", ">^Rdf<n86lS*", (-2971));
        RocketMQSourceSplit rocketMQSourceSplit0 = new RocketMQSourceSplit(messageQueue0, 0L, 0L);
        rocketMQSourceSplit0.getTopic();
        assertEquals((-2971), rocketMQSourceSplit0.getQueueId());
        assertEquals(0L, rocketMQSourceSplit0.getStoppingOffset());
        assertEquals(0L, rocketMQSourceSplit0.getStartingOffset());
        assertTrue(rocketMQSourceSplit0.getIsIncrease());
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        RocketMQSourceSplit rocketMQSourceSplit0 =
                new RocketMQSourceSplit("", "GMUvQvPCb5", 28, 28, 28);
        String string0 = rocketMQSourceSplit0.getTopic();
        assertEquals("", string0);
        assertTrue(rocketMQSourceSplit0.getIsIncrease());
        assertEquals("GMUvQvPCb5", rocketMQSourceSplit0.getBrokerName());
        assertEquals(28L, rocketMQSourceSplit0.getStoppingOffset());
        assertEquals(28, rocketMQSourceSplit0.getQueueId());
        assertEquals(28L, rocketMQSourceSplit0.getStartingOffset());
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        MessageQueue messageQueue0 = new MessageQueue();
        RocketMQSourceSplit rocketMQSourceSplit0 = new RocketMQSourceSplit(messageQueue0, 0L, 0L);
        long long0 = rocketMQSourceSplit0.getStoppingOffset();
        assertEquals(0L, rocketMQSourceSplit0.getStartingOffset());
        assertEquals(0L, long0);
        assertTrue(rocketMQSourceSplit0.getIsIncrease());
        assertEquals(0, rocketMQSourceSplit0.getQueueId());
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        MessageQueue messageQueue0 = new MessageQueue();
        RocketMQSourceSplit rocketMQSourceSplit0 =
                new RocketMQSourceSplit(messageQueue0, (-6L), (-6L));
        long long0 = rocketMQSourceSplit0.getStoppingOffset();
        assertTrue(rocketMQSourceSplit0.getIsIncrease());
        assertEquals(0, rocketMQSourceSplit0.getQueueId());
        assertEquals((-6L), long0);
        assertEquals((-6L), rocketMQSourceSplit0.getStartingOffset());
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        RocketMQSourceSplit rocketMQSourceSplit0 =
                new RocketMQSourceSplit("", "", 483, 0L, 258L, true);
        long long0 = rocketMQSourceSplit0.getStartingOffset();
        assertTrue(rocketMQSourceSplit0.getIsIncrease());
        assertEquals(483, rocketMQSourceSplit0.getQueueId());
        assertEquals(0L, long0);
        assertEquals(258L, rocketMQSourceSplit0.getStoppingOffset());
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        MessageQueue messageQueue0 = new MessageQueue();
        RocketMQSourceSplit rocketMQSourceSplit0 =
                new RocketMQSourceSplit(messageQueue0, 3562L, 3562L);
        long long0 = rocketMQSourceSplit0.getStartingOffset();
        assertTrue(rocketMQSourceSplit0.getIsIncrease());
        assertEquals(0, rocketMQSourceSplit0.getQueueId());
        assertEquals(3562L, long0);
        assertEquals(3562L, rocketMQSourceSplit0.getStoppingOffset());
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        MessageQueue messageQueue0 = new MessageQueue();
        RocketMQSourceSplit rocketMQSourceSplit0 = new RocketMQSourceSplit(messageQueue0, 0L, 0L);
        int int0 = rocketMQSourceSplit0.getQueueId();
        assertEquals(0L, rocketMQSourceSplit0.getStartingOffset());
        assertTrue(rocketMQSourceSplit0.getIsIncrease());
        assertEquals(0L, rocketMQSourceSplit0.getStoppingOffset());
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        RocketMQSourceSplit rocketMQSourceSplit0 =
                new RocketMQSourceSplit("", (String) null, (-1), (-1), (-1), true);
        int int0 = rocketMQSourceSplit0.getQueueId();
        assertEquals((-1L), rocketMQSourceSplit0.getStartingOffset());
        assertTrue(rocketMQSourceSplit0.getIsIncrease());
        assertEquals((-1L), rocketMQSourceSplit0.getStoppingOffset());
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
        MessageQueue messageQueue0 = new MessageQueue();
        RocketMQSourceSplit rocketMQSourceSplit0 = new RocketMQSourceSplit(messageQueue0, 0L, 0L);
        MessageQueue messageQueue1 = rocketMQSourceSplit0.getMessageQueue();
        assertEquals(0, messageQueue1.getQueueId());
        assertTrue(rocketMQSourceSplit0.getIsIncrease());
        assertEquals(0L, rocketMQSourceSplit0.getStoppingOffset());
        assertEquals(0L, rocketMQSourceSplit0.getStartingOffset());
    }

    @Test(timeout = 4000)
    public void test14() throws Throwable {
        RocketMQSourceSplit rocketMQSourceSplit0 =
                new RocketMQSourceSplit("P?m+", "P?m+", (-7), (-7), (-7), false);
        MessageQueue messageQueue0 = rocketMQSourceSplit0.getMessageQueue();
        assertEquals((-7), messageQueue0.getQueueId());
        assertFalse(rocketMQSourceSplit0.getIsIncrease());
        assertEquals((-7L), rocketMQSourceSplit0.getStoppingOffset());
        assertEquals((-7L), rocketMQSourceSplit0.getStartingOffset());
    }

    @Test(timeout = 4000)
    public void test15() throws Throwable {
        RocketMQSourceSplit rocketMQSourceSplit0 =
                new RocketMQSourceSplit("P?m+", "P?m+", (-7), (-7), (-7), false);
        boolean boolean0 = rocketMQSourceSplit0.getIsIncrease();
        assertEquals((-7L), rocketMQSourceSplit0.getStartingOffset());
        assertFalse(boolean0);
        assertEquals((-7L), rocketMQSourceSplit0.getStoppingOffset());
        assertEquals((-7), rocketMQSourceSplit0.getQueueId());
    }

    @Test(timeout = 4000)
    public void test16() throws Throwable {
        MessageQueue messageQueue0 = new MessageQueue();
        RocketMQSourceSplit rocketMQSourceSplit0 =
                new RocketMQSourceSplit(messageQueue0, 539L, 172L, false);
        rocketMQSourceSplit0.getBrokerName();
        assertFalse(rocketMQSourceSplit0.getIsIncrease());
        assertEquals(539L, rocketMQSourceSplit0.getStartingOffset());
        assertEquals(0, rocketMQSourceSplit0.getQueueId());
        assertEquals(172L, rocketMQSourceSplit0.getStoppingOffset());
    }

    @Test(timeout = 4000)
    public void test17() throws Throwable {
        RocketMQSourceSplit rocketMQSourceSplit0 =
                new RocketMQSourceSplit("avhoDrjk6`,@TDMt]", "", 1934, 1934, 0L, false);
        String string0 = rocketMQSourceSplit0.getBrokerName();
        assertEquals("avhoDrjk6`,@TDMt]", rocketMQSourceSplit0.getTopic());
        assertEquals(1934, rocketMQSourceSplit0.getQueueId());
        assertEquals(0L, rocketMQSourceSplit0.getStoppingOffset());
        assertEquals(1934L, rocketMQSourceSplit0.getStartingOffset());
        assertEquals("", string0);
        assertFalse(rocketMQSourceSplit0.getIsIncrease());
    }

    @Test(timeout = 4000)
    public void test18() throws Throwable {
        RocketMQSourceSplit rocketMQSourceSplit0 =
                new RocketMQSourceSplit(", brokerName=", ", brokerName=", 0, 0, 0, false);
        RocketMQSourceSplit rocketMQSourceSplit1 = RocketMQSourceSplit.clone(rocketMQSourceSplit0);
        assertTrue(rocketMQSourceSplit1.equals((Object) rocketMQSourceSplit0));
        assertEquals(0L, rocketMQSourceSplit0.getStoppingOffset());
        assertEquals(0L, rocketMQSourceSplit0.getStartingOffset());
    }

    @Test(timeout = 4000)
    public void test19() throws Throwable {
        MessageQueue messageQueue0 = new MessageQueue();
        RocketMQSourceSplit rocketMQSourceSplit0 =
                new RocketMQSourceSplit(messageQueue0, (-3141L), 2786L, true);
        RocketMQSourceSplit rocketMQSourceSplit1 = RocketMQSourceSplit.clone(rocketMQSourceSplit0);
        assertEquals(2786L, rocketMQSourceSplit1.getStoppingOffset());
        assertEquals((-3141L), rocketMQSourceSplit1.getStartingOffset());
        assertTrue(rocketMQSourceSplit0.getIsIncrease());
        assertEquals(2786L, rocketMQSourceSplit0.getStoppingOffset());
        assertEquals(0, rocketMQSourceSplit1.getQueueId());
        assertEquals((-3141L), rocketMQSourceSplit0.getStartingOffset());
    }

    @Test(timeout = 4000)
    public void test20() throws Throwable {
        RocketMQSourceSplit rocketMQSourceSplit0 =
                new RocketMQSourceSplit(
                        "xK`hxzu%^m,7~Md@", "xK`hxzu%^m,7~Md@", (-1490), 1767L, (-1490), false);
        RocketMQSourceSplit rocketMQSourceSplit1 = RocketMQSourceSplit.clone(rocketMQSourceSplit0);
        assertTrue(rocketMQSourceSplit1.equals((Object) rocketMQSourceSplit0));
        assertEquals(1767L, rocketMQSourceSplit1.getStartingOffset());
        assertEquals((-1490L), rocketMQSourceSplit1.getStoppingOffset());
    }

    @Test(timeout = 4000)
    public void test21() throws Throwable {
        MessageQueue messageQueue0 = new MessageQueue("#", "#", 492);
        RocketMQSourceSplit rocketMQSourceSplit0 =
                new RocketMQSourceSplit(messageQueue0, (-1L), 492, false);
        RocketMQSourceSplit rocketMQSourceSplit1 = RocketMQSourceSplit.clone(rocketMQSourceSplit0);
        assertEquals(492L, rocketMQSourceSplit1.getStoppingOffset());
        assertEquals((-1L), rocketMQSourceSplit0.getStartingOffset());
        assertTrue(rocketMQSourceSplit1.equals((Object) rocketMQSourceSplit0));
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        // Undeclared exception!
        try {
            RocketMQSourceSplit.toSplitId((MessageQueue) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.source.split.RocketMQSourceSplit", e);
        }
    }

    @Test(timeout = 4000)
    public void test23() throws Throwable {
        MessageQueue messageQueue0 = new MessageQueue();
        RocketMQSourceSplit rocketMQSourceSplit0 = new RocketMQSourceSplit(messageQueue0, 0L, 0L);
        // Undeclared exception!
        try {
            rocketMQSourceSplit0.equals(rocketMQSourceSplit0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
        }
    }

    @Test(timeout = 4000)
    public void test24() throws Throwable {
        // Undeclared exception!
        try {
            RocketMQSourceSplit.clone((RocketMQSourceSplit) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.source.split.RocketMQSourceSplit", e);
        }
    }

    @Test(timeout = 4000)
    public void test25() throws Throwable {
        RocketMQSourceSplit rocketMQSourceSplit0 = null;
        try {
            rocketMQSourceSplit0 = new RocketMQSourceSplit((MessageQueue) null, 1L, (-1L), false);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.source.split.RocketMQSourceSplit", e);
        }
    }

    @Test(timeout = 4000)
    public void test26() throws Throwable {
        RocketMQSourceSplit rocketMQSourceSplit0 = null;
        try {
            rocketMQSourceSplit0 = new RocketMQSourceSplit((MessageQueue) null, (-368L), (-3843L));
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.source.split.RocketMQSourceSplit", e);
        }
    }

    @Test(timeout = 4000)
    public void test27() throws Throwable {
        RocketMQSourceSplit rocketMQSourceSplit0 =
                new RocketMQSourceSplit("Pm+", "Pm+", 1, (-1381L), 1, true);
        MessageQueue messageQueue0 = rocketMQSourceSplit0.getMessageQueue();
        RocketMQSourceSplit rocketMQSourceSplit1 =
                new RocketMQSourceSplit(messageQueue0, (-1381L), 1, false);
        boolean boolean0 = rocketMQSourceSplit0.equals(rocketMQSourceSplit1);
        assertEquals(1L, rocketMQSourceSplit1.getStoppingOffset());
        assertFalse(rocketMQSourceSplit1.getIsIncrease());
        assertEquals((-1381L), rocketMQSourceSplit1.getStartingOffset());
        assertFalse(boolean0);
        assertEquals(1, messageQueue0.getQueueId());
    }

    @Test(timeout = 4000)
    public void test28() throws Throwable {
        MessageQueue messageQueue0 = new MessageQueue("#", "#", 492);
        RocketMQSourceSplit rocketMQSourceSplit0 =
                new RocketMQSourceSplit(messageQueue0, (-1L), 492, false);
        RocketMQSourceSplit rocketMQSourceSplit1 =
                new RocketMQSourceSplit("#", "#", 492, (-1L), (-1L));
        boolean boolean0 = rocketMQSourceSplit0.equals(rocketMQSourceSplit1);
        assertEquals(492, rocketMQSourceSplit1.getQueueId());
        assertFalse(boolean0);
        assertEquals(492, rocketMQSourceSplit0.getQueueId());
        assertFalse(rocketMQSourceSplit0.getIsIncrease());
        assertEquals((-1L), rocketMQSourceSplit1.getStartingOffset());
        assertEquals((-1L), rocketMQSourceSplit0.getStartingOffset());
        assertEquals(492L, rocketMQSourceSplit0.getStoppingOffset());
        assertEquals((-1L), rocketMQSourceSplit1.getStoppingOffset());
        assertTrue(rocketMQSourceSplit1.getIsIncrease());
    }

    @Test(timeout = 4000)
    public void test29() throws Throwable {
        MessageQueue messageQueue0 = new MessageQueue("", "]", 1);
        RocketMQSourceSplit rocketMQSourceSplit0 = new RocketMQSourceSplit(messageQueue0, 1, 1400L);
        RocketMQSourceSplit rocketMQSourceSplit1 =
                new RocketMQSourceSplit(messageQueue0, 3L, 1729L, false);
        boolean boolean0 = rocketMQSourceSplit0.equals(rocketMQSourceSplit1);
        assertEquals(1, rocketMQSourceSplit0.getQueueId());
        assertEquals(1, rocketMQSourceSplit1.getQueueId());
        assertEquals("", rocketMQSourceSplit0.getTopic());
        assertEquals("", rocketMQSourceSplit1.getTopic());
        assertEquals("]", rocketMQSourceSplit0.getBrokerName());
        assertFalse(boolean0);
        assertFalse(rocketMQSourceSplit1.getIsIncrease());
        assertEquals(1400L, rocketMQSourceSplit0.getStoppingOffset());
        assertEquals("]", rocketMQSourceSplit1.getBrokerName());
        assertEquals(1729L, rocketMQSourceSplit1.getStoppingOffset());
        assertEquals(1L, rocketMQSourceSplit0.getStartingOffset());
        assertEquals(3L, rocketMQSourceSplit1.getStartingOffset());
        assertTrue(rocketMQSourceSplit0.getIsIncrease());
    }

    @Test(timeout = 4000)
    public void test30() throws Throwable {
        RocketMQSourceSplit rocketMQSourceSplit0 =
                new RocketMQSourceSplit("Pm+", "Pm+", 1, (-1381L), 1, true);
        MessageQueue messageQueue0 = rocketMQSourceSplit0.getMessageQueue();
        assertEquals(1, messageQueue0.getQueueId());

        messageQueue0.setQueueId((-1));
        RocketMQSourceSplit rocketMQSourceSplit1 =
                new RocketMQSourceSplit(messageQueue0, (-1L), (-1L));
        boolean boolean0 = rocketMQSourceSplit1.equals(rocketMQSourceSplit0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test31() throws Throwable {
        RocketMQSourceSplit rocketMQSourceSplit0 =
                new RocketMQSourceSplit("]", "]", (-1083), (-1083), (-1083));
        RocketMQSourceSplit rocketMQSourceSplit1 =
                new RocketMQSourceSplit("]", "[", (-1083), (-1L), (-1L), false);
        boolean boolean0 = rocketMQSourceSplit0.equals(rocketMQSourceSplit1);
        assertEquals((-1083), rocketMQSourceSplit1.getQueueId());
        assertEquals((-1083L), rocketMQSourceSplit0.getStartingOffset());
        assertEquals("]", rocketMQSourceSplit1.getTopic());
        assertFalse(rocketMQSourceSplit1.getIsIncrease());
        assertFalse(boolean0);
        assertEquals((-1L), rocketMQSourceSplit1.getStoppingOffset());
        assertEquals((-1083), rocketMQSourceSplit0.getQueueId());
        assertTrue(rocketMQSourceSplit0.getIsIncrease());
        assertEquals("[", rocketMQSourceSplit1.getBrokerName());
        assertEquals((-1L), rocketMQSourceSplit1.getStartingOffset());
        assertEquals((-1083L), rocketMQSourceSplit0.getStoppingOffset());
    }

    @Test(timeout = 4000)
    public void test32() throws Throwable {
        RocketMQSourceSplit rocketMQSourceSplit0 =
                new RocketMQSourceSplit("[", "[", (-1083), (-1083), (-1083));
        RocketMQSourceSplit rocketMQSourceSplit1 =
                new RocketMQSourceSplit("]", "]", (-1083), (-1083), (-1083));
        boolean boolean0 = rocketMQSourceSplit0.equals(rocketMQSourceSplit1);
        assertEquals((-1083L), rocketMQSourceSplit1.getStoppingOffset());
        assertFalse(boolean0);
        assertEquals((-1083L), rocketMQSourceSplit1.getStartingOffset());
        assertTrue(rocketMQSourceSplit1.getIsIncrease());
        assertEquals((-1083), rocketMQSourceSplit1.getQueueId());
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        MessageQueue messageQueue0 = new MessageQueue("#", "#", 492);
        RocketMQSourceSplit rocketMQSourceSplit0 =
                new RocketMQSourceSplit(messageQueue0, (-1L), 492, false);
        Object object0 = new Object();
        boolean boolean0 = rocketMQSourceSplit0.equals(object0);
        assertEquals(492, rocketMQSourceSplit0.getQueueId());
        assertFalse(rocketMQSourceSplit0.getIsIncrease());
        assertFalse(boolean0);
        assertEquals((-1L), rocketMQSourceSplit0.getStartingOffset());
        assertEquals(492L, rocketMQSourceSplit0.getStoppingOffset());
    }

    @Test(timeout = 4000)
    public void test34() throws Throwable {
        RocketMQSourceSplit rocketMQSourceSplit0 =
                new RocketMQSourceSplit("Pm+", "Pm+", 1, (-1381L), 1, true);
        boolean boolean0 = rocketMQSourceSplit0.equals(rocketMQSourceSplit0);
        assertEquals(1, rocketMQSourceSplit0.getQueueId());
        assertEquals((-1381L), rocketMQSourceSplit0.getStartingOffset());
        assertEquals(1L, rocketMQSourceSplit0.getStoppingOffset());
        assertTrue(rocketMQSourceSplit0.getIsIncrease());
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test35() throws Throwable {
        RocketMQSourceSplit rocketMQSourceSplit0 =
                new RocketMQSourceSplit("Pm+", "Pm+", 1, (-1381L), 1, true);
        boolean boolean0 = rocketMQSourceSplit0.getIsIncrease();
        assertEquals((-1381L), rocketMQSourceSplit0.getStartingOffset());
        assertEquals(1L, rocketMQSourceSplit0.getStoppingOffset());
        assertTrue(boolean0);
        assertEquals(1, rocketMQSourceSplit0.getQueueId());
    }

    @Test(timeout = 4000)
    public void test36() throws Throwable {
        MessageQueue messageQueue0 = new MessageQueue();
        RocketMQSourceSplit rocketMQSourceSplit0 =
                new RocketMQSourceSplit(messageQueue0, (-6L), (-6L));
        long long0 = rocketMQSourceSplit0.getStartingOffset();
        assertEquals((-6L), long0);
        assertEquals(0, rocketMQSourceSplit0.getQueueId());
        assertTrue(rocketMQSourceSplit0.getIsIncrease());
        assertEquals((-6L), rocketMQSourceSplit0.getStoppingOffset());
    }

    @Test(timeout = 4000)
    public void test37() throws Throwable {
        MessageQueue messageQueue0 = new MessageQueue("#", "#", 492);
        RocketMQSourceSplit rocketMQSourceSplit0 =
                new RocketMQSourceSplit(messageQueue0, (-1L), 492, false);
        int int0 = rocketMQSourceSplit0.getQueueId();
        assertFalse(rocketMQSourceSplit0.getIsIncrease());
        assertEquals(492, int0);
        assertEquals(492L, rocketMQSourceSplit0.getStoppingOffset());
        assertEquals((-1L), rocketMQSourceSplit0.getStartingOffset());
    }

    @Test(timeout = 4000)
    public void test38() throws Throwable {
        MessageQueue messageQueue0 = new MessageQueue();
        RocketMQSourceSplit rocketMQSourceSplit0 =
                new RocketMQSourceSplit(messageQueue0, (-6L), (-6L));
        rocketMQSourceSplit0.getTopic();
        assertTrue(rocketMQSourceSplit0.getIsIncrease());
        assertEquals((-6L), rocketMQSourceSplit0.getStartingOffset());
        assertEquals((-6L), rocketMQSourceSplit0.getStoppingOffset());
        assertEquals(0, rocketMQSourceSplit0.getQueueId());
    }

    @Test(timeout = 4000)
    public void test39() throws Throwable {
        RocketMQSourceSplit rocketMQSourceSplit0 =
                new RocketMQSourceSplit("Pm+", "Pm+", 1, (-1381L), 1, true);
        String string0 = rocketMQSourceSplit0.splitId();
        assertEquals("Pm+#Pm+#1", string0);
        assertTrue(rocketMQSourceSplit0.getIsIncrease());
        assertEquals(1L, rocketMQSourceSplit0.getStoppingOffset());
        assertEquals((-1381L), rocketMQSourceSplit0.getStartingOffset());
    }

    @Test(timeout = 4000)
    public void test40() throws Throwable {
        RocketMQSourceSplit rocketMQSourceSplit0 =
                new RocketMQSourceSplit("Pm+", "Pm+", 1, (-1381L), 1, true);
        MessageQueue messageQueue0 = rocketMQSourceSplit0.getMessageQueue();
        String string0 = RocketMQSourceSplit.toSplitId(messageQueue0);
        assertEquals("Pm+#Pm+#1", string0);
        assertEquals((-1381L), rocketMQSourceSplit0.getStartingOffset());
        assertEquals(1L, rocketMQSourceSplit0.getStoppingOffset());
        assertTrue(rocketMQSourceSplit0.getIsIncrease());
    }

    @Test(timeout = 4000)
    public void test41() throws Throwable {
        RocketMQSourceSplit rocketMQSourceSplit0 =
                new RocketMQSourceSplit("Pm+", "Pm+", 1, (-1381L), 1, true);
        long long0 = rocketMQSourceSplit0.getStoppingOffset();
        assertTrue(rocketMQSourceSplit0.getIsIncrease());
        assertEquals((-1381L), rocketMQSourceSplit0.getStartingOffset());
        assertEquals(1, rocketMQSourceSplit0.getQueueId());
        assertEquals(1L, long0);
    }

    @Test(timeout = 4000)
    public void test42() throws Throwable {
        MessageQueue messageQueue0 = new MessageQueue("#", "#", 492);
        RocketMQSourceSplit rocketMQSourceSplit0 =
                new RocketMQSourceSplit(messageQueue0, (-1L), 492, false);
        rocketMQSourceSplit0.getBrokerName();
        assertEquals(492, rocketMQSourceSplit0.getQueueId());
        assertEquals(492L, rocketMQSourceSplit0.getStoppingOffset());
        assertEquals((-1L), rocketMQSourceSplit0.getStartingOffset());
        assertFalse(rocketMQSourceSplit0.getIsIncrease());
    }
}
