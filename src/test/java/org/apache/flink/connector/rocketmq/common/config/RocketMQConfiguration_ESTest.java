/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 26 11:41:47 GMT 2025
 */

package org.apache.flink.connector.rocketmq.common.config;

import org.apache.flink.configuration.ConfigOption;
import org.apache.flink.configuration.Configuration;
import org.apache.flink.configuration.FallbackKey;

import com.google.common.base.Converter;
import com.google.common.collect.BoundType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.Consumer;
import java.util.function.Function;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
        mockJVMNonDeterminism = true,
        useVFS = true,
        useVNET = true,
        resetStaticState = true,
        separateClassLoader = true,
        useJEE = true)
public class RocketMQConfiguration_ESTest extends RocketMQConfiguration_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        Configuration configuration0 = new Configuration();
        RocketMQConfiguration rocketMQConfiguration0 = new RocketMQConfiguration(configuration0);
        ConfigOption<Map<String, String>> configOption0 =
                (ConfigOption<Map<String, String>>)
                        mock(ConfigOption.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(configOption0).hasFallbackKeys();
        doReturn((String) null, (String) null).when(configOption0).key();
        Map<String, String> map0 = rocketMQConfiguration0.getProperties(configOption0);
        assertEquals(0, map0.size());
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        Configuration configuration0 = new Configuration();
        Class<Object> class0 = Object.class;
        configuration0.setClass("missCount", class0);
        RocketMQConfiguration rocketMQConfiguration0 = new RocketMQConfiguration(configuration0);
        ConfigOption<Object> configOption0 =
                (ConfigOption<Object>) mock(ConfigOption.class, new ViolatedAssumptionAnswer());
        doReturn("missCount", (String) null).when(configOption0).key();
        Function<Object, Object> function0 = Function.identity();
        Consumer<Object> consumer0 =
                (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
        // Undeclared exception!
        try {
            rocketMQConfiguration0.useOption(configOption0, function0, consumer0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // Key must not be null.
            //
            verifyException("org.apache.flink.configuration.Configuration", e);
        }
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        Configuration configuration0 = new Configuration();
        RocketMQConfiguration rocketMQConfiguration0 = new RocketMQConfiguration(configuration0);
        Consumer<Object> consumer0 =
                (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
        // Undeclared exception!
        try {
            rocketMQConfiguration0.useOption((ConfigOption<Object>) null, consumer0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.configuration.ConfigurationUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        Configuration configuration0 = new Configuration();
        Class<Object> class0 = Object.class;
        configuration0.setClass("missCount", class0);
        RocketMQConfiguration rocketMQConfiguration0 = new RocketMQConfiguration(configuration0);
        ConfigOption<Map<String, String>> configOption0 =
                (ConfigOption<Map<String, String>>)
                        mock(ConfigOption.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(configOption0).defaultValue();
        doReturn(false).when(configOption0).hasFallbackKeys();
        doReturn("missCount", "{}").when(configOption0).key();
        // Undeclared exception!
        try {
            rocketMQConfiguration0.getProperties(configOption0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.util.HashMap", e);
        }
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        Configuration configuration0 = new Configuration();
        ConfigOption<String> configOption0 =
                (ConfigOption<String>) mock(ConfigOption.class, new ViolatedAssumptionAnswer());
        doReturn("g5iLn").when(configOption0).key();
        configuration0.setString(configOption0, "A");
        RocketMQConfiguration rocketMQConfiguration0 = new RocketMQConfiguration(configuration0);
        ConfigOption<Map<String, String>> configOption1 =
                (ConfigOption<Map<String, String>>)
                        mock(ConfigOption.class, new ViolatedAssumptionAnswer());
        doReturn("g5iLn", "g5iLn", (String) null).when(configOption1).key();
        // Undeclared exception!
        try {
            rocketMQConfiguration0.getProperties(configOption1);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Could not parse value 'A' for key 'null'.
            //
            verifyException("org.apache.flink.configuration.Configuration", e);
        }
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        Configuration configuration0 = Configuration.fromMap(hashMap0);
        RocketMQConfiguration rocketMQConfiguration0 = new RocketMQConfiguration(configuration0);
        com.google.common.base.Function<Object, String> function0 =
                (com.google.common.base.Function<Object, String>)
                        mock(com.google.common.base.Function.class, new ViolatedAssumptionAnswer());
        Converter<Object, String> converter0 =
                Converter.from(
                        (com.google.common.base.Function<? super Object, ? extends String>)
                                function0,
                        (com.google.common.base.Function<? super String, ?>) function0);
        // Undeclared exception!
        try {
            rocketMQConfiguration0.get(
                    (ConfigOption<Object>) null, (Function<Object, String>) converter0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.configuration.ConfigurationUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        Configuration configuration0 = new Configuration();
        RocketMQConfiguration rocketMQConfiguration0 = new RocketMQConfiguration(configuration0);
        String string0 = "null.";
        ConfigOption<Object> configOption0 =
                (ConfigOption<Object>) mock(ConfigOption.class, new ViolatedAssumptionAnswer());
        doReturn((Iterable) null).when(configOption0).fallbackKeys();
        doReturn(true).when(configOption0).hasFallbackKeys();
        doReturn("null.").when(configOption0).key();
        com.google.common.base.Function<Object, Integer> function0 =
                (com.google.common.base.Function<Object, Integer>)
                        mock(com.google.common.base.Function.class, new ViolatedAssumptionAnswer());
        com.google.common.base.Function<Object, Integer> function1 =
                (com.google.common.base.Function<Object, Integer>)
                        mock(com.google.common.base.Function.class, new ViolatedAssumptionAnswer());
        Converter<Object, Integer> converter0 =
                Converter.from(
                        (com.google.common.base.Function<? super Object, ? extends Integer>)
                                function0,
                        (com.google.common.base.Function<? super Integer, ?>) function1);
        // Undeclared exception!
        try {
            rocketMQConfiguration0.get(configOption0, (Function<Object, Integer>) converter0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.configuration.Configuration", e);
        }
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        RocketMQConfiguration rocketMQConfiguration0 = null;
        try {
            rocketMQConfiguration0 = new RocketMQConfiguration((Configuration) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.configuration.Configuration", e);
        }
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        Configuration configuration0 = new Configuration();
        RocketMQConfiguration rocketMQConfiguration0 = new RocketMQConfiguration(configuration0);
        LinkedList<FallbackKey> linkedList0 = new LinkedList<FallbackKey>();
        LinkedList<FallbackKey> linkedList1 = new LinkedList<FallbackKey>(linkedList0);
        ConfigOption<Object> configOption0 =
                (ConfigOption<Object>) mock(ConfigOption.class, new ViolatedAssumptionAnswer());
        doReturn("PNT").when(configOption0).defaultValue();
        doReturn(linkedList1).when(configOption0).fallbackKeys();
        doReturn(true).when(configOption0).hasFallbackKeys();
        doReturn("null.missCount").when(configOption0).key();
        Integer integer0 = new Integer(447);
        com.google.common.base.Function<Object, Integer> function0 =
                (com.google.common.base.Function<Object, Integer>)
                        mock(com.google.common.base.Function.class, new ViolatedAssumptionAnswer());
        doReturn(integer0).when(function0).apply(any());
        com.google.common.base.Function<Object, Integer> function1 =
                (com.google.common.base.Function<Object, Integer>)
                        mock(com.google.common.base.Function.class, new ViolatedAssumptionAnswer());
        Converter<Object, Integer> converter0 =
                Converter.from(
                        (com.google.common.base.Function<? super Object, ? extends Integer>)
                                function0,
                        (com.google.common.base.Function<? super Integer, ?>) function1);
        Converter<Integer, Integer> converter1 = Converter.identity();
        Converter<Integer, Integer> converter2 = converter1.reverse();
        com.google.common.base.Function<Object, BoundType> function2 =
                (com.google.common.base.Function<Object, BoundType>)
                        mock(com.google.common.base.Function.class, new ViolatedAssumptionAnswer());
        Converter<Object, BoundType> converter3 =
                Converter.from(
                        (com.google.common.base.Function<? super Object, ? extends BoundType>)
                                function2,
                        (com.google.common.base.Function<? super BoundType, ?>) converter0);
        Converter<BoundType, BoundType> converter4 = Converter.identity();
        Converter<Object, BoundType> converter5 = converter3.andThen(converter4);
        Converter.from(
                (com.google.common.base.Function<? super Integer, ? extends BoundType>) converter5,
                (com.google.common.base.Function<? super BoundType, ? extends Integer>) converter0);
        Converter<Object, Integer> converter6 = converter0.andThen(converter2);
        rocketMQConfiguration0.get(configOption0, (Function<Object, Integer>) converter6);
        ConfigOption<Integer> configOption1 =
                (ConfigOption<Integer>) mock(ConfigOption.class, new ViolatedAssumptionAnswer());
        doReturn((Iterable) null).when(configOption1).fallbackKeys();
        doReturn(true).when(configOption1).hasFallbackKeys();
        doReturn("null.missCount").when(configOption1).key();
        Consumer<Object> consumer0 =
                (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
        // Undeclared exception!
        try {
            rocketMQConfiguration0.useOption(
                    configOption1, (Function<Integer, Object>) null, consumer0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.configuration.Configuration", e);
        }
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        Configuration configuration0 = new Configuration();
        RocketMQConfiguration rocketMQConfiguration0 = new RocketMQConfiguration(configuration0);
        ConfigOption<Object> configOption0 =
                (ConfigOption<Object>) mock(ConfigOption.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(configOption0).defaultValue();
        doReturn(false).when(configOption0).hasFallbackKeys();
        doReturn("=;ahS<W;,GW_60").when(configOption0).key();
        Integer integer0 =
                rocketMQConfiguration0.get(configOption0, (Function<Object, Integer>) null);
        assertNull(integer0);
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        Configuration configuration0 = new Configuration();
        RocketMQConfiguration rocketMQConfiguration0 = new RocketMQConfiguration(configuration0);
        ConfigOption<HashMap<String, Integer>> configOption0 =
                (ConfigOption<HashMap<String, Integer>>)
                        mock(ConfigOption.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(configOption0).hasDefaultValue();
        doReturn(false).when(configOption0).hasFallbackKeys();
        doReturn((String) null).when(configOption0).key();
        com.google.common.base.Function<String, Integer> function0 =
                (com.google.common.base.Function<String, Integer>)
                        mock(com.google.common.base.Function.class, new ViolatedAssumptionAnswer());
        com.google.common.base.Function<Object, String> function1 =
                (com.google.common.base.Function<Object, String>)
                        mock(com.google.common.base.Function.class, new ViolatedAssumptionAnswer());
        Converter<String, Object> converter0 =
                Converter.from(
                        (com.google.common.base.Function<? super String, ?>) function0,
                        (com.google.common.base.Function<? super Object, ? extends String>)
                                function1);
        Function<Object, String> function2 =
                (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
        Function<HashMap<String, Integer>, Object> function3 =
                converter0.compose(
                        (Function<? super HashMap<String, Integer>, ? extends String>) function2);
        Consumer<Object> consumer0 =
                (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
        rocketMQConfiguration0.useOption(configOption0, function3, consumer0);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        Configuration configuration0 = new Configuration();
        configuration0.setDouble("null.PST", 3.4028234663852886E38);
        RocketMQConfiguration rocketMQConfiguration0 = new RocketMQConfiguration(configuration0);
        ConfigOption<Map<String, String>> configOption0 =
                (ConfigOption<Map<String, String>>)
                        mock(ConfigOption.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(configOption0).hasFallbackKeys();
        doReturn((String) null, (String) null).when(configOption0).key();
        Map<String, String> map0 = rocketMQConfiguration0.getProperties(configOption0);
        assertFalse(map0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        Configuration configuration0 = new Configuration();
        RocketMQConfiguration rocketMQConfiguration0 = new RocketMQConfiguration(configuration0);
        ConfigOption<Map<String, String>> configOption0 =
                (ConfigOption<Map<String, String>>)
                        mock(ConfigOption.class, new ViolatedAssumptionAnswer());
        doReturn((Iterable) null).when(configOption0).fallbackKeys();
        doReturn(true).when(configOption0).hasFallbackKeys();
        doReturn("null.JST").when(configOption0).key();
        // Undeclared exception!
        try {
            rocketMQConfiguration0.getProperties(configOption0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.configuration.Configuration", e);
        }
    }
}
