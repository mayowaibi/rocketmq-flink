/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 26 11:19:57 GMT 2025
 */

package org.apache.flink.connector.rocketmq.sink.committer;

import org.apache.rocketmq.client.producer.SendResult;
import org.apache.rocketmq.client.producer.SendStatus;
import org.apache.rocketmq.common.message.MessageQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.io.EOFException;
import java.io.UTFDataFormatException;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
        mockJVMNonDeterminism = true,
        useVFS = true,
        useVNET = true,
        resetStaticState = true,
        separateClassLoader = true,
        useJEE = true)
public class SendCommittableSerializer_ESTest extends SendCommittableSerializer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0() throws Throwable {
        SendCommittableSerializer sendCommittableSerializer0 = new SendCommittableSerializer();
        // Undeclared exception!
        try {
            sendCommittableSerializer0.deserialize(2263, (byte[]) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test1() throws Throwable {
        SendCommittableSerializer sendCommittableSerializer0 = new SendCommittableSerializer();
        byte[] byteArray0 = new byte[5];
        byteArray0[1] = (byte) 2;
        byteArray0[2] = (byte) (-104);
        try {
            sendCommittableSerializer0.deserialize(1, byteArray0);
            fail("Expecting exception: UTFDataFormatException");

        } catch (UTFDataFormatException e) {
            //
            // malformed input around byte 0
            //
            verifyException("java.io.DataInputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test2() throws Throwable {
        SendCommittableSerializer sendCommittableSerializer0 = new SendCommittableSerializer();
        byte[] byteArray0 = new byte[12];
        try {
            sendCommittableSerializer0.deserialize(1, byteArray0);
            fail("Expecting exception: EOFException");

        } catch (EOFException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.io.DataInputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test3() throws Throwable {
        SendCommittable sendCommittable0 = new SendCommittable();
        SendCommittableSerializer sendCommittableSerializer0 = new SendCommittableSerializer();
        // Undeclared exception!
        try {
            sendCommittableSerializer0.serialize(sendCommittable0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test4() throws Throwable {
        SendCommittableSerializer sendCommittableSerializer0 = new SendCommittableSerializer();
        SendStatus sendStatus0 = SendStatus.FLUSH_SLAVE_TIMEOUT;
        MessageQueue messageQueue0 = new MessageQueue("^u+kfKY.2kZ[_tL{nRQ", "hJ0@Fg}H)v<1(", 991);
        SendResult sendResult0 =
                new SendResult(
                        sendStatus0,
                        "3V",
                        messageQueue0,
                        0L,
                        "^u+kfKY.2kZ[_tL{nRQ",
                        "hJ0@Fg}H)v<1(",
                        "");
        SendCommittable sendCommittable0 = new SendCommittable(sendResult0);
        byte[] byteArray0 = sendCommittableSerializer0.serialize(sendCommittable0);
        SendCommittable sendCommittable1 = sendCommittableSerializer0.deserialize(0, byteArray0);
        assertEquals("3V", sendCommittable1.getMsgId());
    }

    @Test(timeout = 4000)
    public void test5() throws Throwable {
        SendCommittableSerializer sendCommittableSerializer0 = new SendCommittableSerializer();
        int int0 = sendCommittableSerializer0.getVersion();
        assertEquals(1, int0);
    }
}
