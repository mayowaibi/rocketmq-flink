/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 26 11:58:29 GMT 2025
 */

package org.apache.flink.connector.rocketmq.source.reader.deserializer;

import org.apache.flink.api.common.serialization.DeserializationSchema;
import org.apache.flink.connector.rocketmq.source.reader.MessageView;
import org.apache.flink.table.api.TableSchema;
import org.apache.flink.table.data.RowData;
import org.apache.flink.table.types.DataType;
import org.apache.flink.table.types.logical.LogicalType;
import org.apache.flink.util.Collector;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.List;
import java.util.Map;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
        mockJVMNonDeterminism = true,
        useVFS = true,
        useVNET = true,
        resetStaticState = true,
        separateClassLoader = true,
        useJEE = true)
public class RocketMQRowDeserializationSchema_ESTest
        extends RocketMQRowDeserializationSchema_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0() throws Throwable {
        String[] stringArray0 = new String[0];
        DataType dataType0 = mock(DataType.class, new ViolatedAssumptionAnswer());
        doReturn((LogicalType) null).when(dataType0).getLogicalType();
        TableSchema tableSchema0 = mock(TableSchema.class, new ViolatedAssumptionAnswer());
        doReturn(stringArray0).when(tableSchema0).getFieldNames();
        doReturn(dataType0).when(tableSchema0).toRowDataType();
        RowDeserializationSchema.MetadataConverter[]
                rowDeserializationSchema_MetadataConverterArray0 =
                        new RowDeserializationSchema.MetadataConverter[4];
        RocketMQRowDeserializationSchema rocketMQRowDeserializationSchema0 =
                new RocketMQRowDeserializationSchema(
                        tableSchema0,
                        (Map<String, String>) null,
                        false,
                        rowDeserializationSchema_MetadataConverterArray0);
        // Undeclared exception!
        try {
            rocketMQRowDeserializationSchema0.getProducedType();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.table.types.logical.utils.LogicalTypeUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test1() throws Throwable {
        TableSchema tableSchema0 = mock(TableSchema.class, new ViolatedAssumptionAnswer());
        doReturn((String[]) null).when(tableSchema0).getFieldNames();
        RowDeserializationSchema.MetadataConverter[]
                rowDeserializationSchema_MetadataConverterArray0 =
                        new RowDeserializationSchema.MetadataConverter[0];
        RocketMQRowDeserializationSchema rocketMQRowDeserializationSchema0 = null;
        try {
            rocketMQRowDeserializationSchema0 =
                    new RocketMQRowDeserializationSchema(
                            tableSchema0,
                            (Map<String, String>) null,
                            true,
                            rowDeserializationSchema_MetadataConverterArray0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.source.reader.deserializer.RowDeserializationSchema",
                    e);
        }
    }

    @Test(timeout = 4000)
    public void test2() throws Throwable {
        String[] stringArray0 = new String[0];
        TableSchema tableSchema0 = mock(TableSchema.class, new ViolatedAssumptionAnswer());
        doReturn(stringArray0).when(tableSchema0).getFieldNames();
        RowDeserializationSchema.MetadataConverter[]
                rowDeserializationSchema_MetadataConverterArray0 =
                        new RowDeserializationSchema.MetadataConverter[2];
        RocketMQRowDeserializationSchema rocketMQRowDeserializationSchema0 =
                new RocketMQRowDeserializationSchema(
                        tableSchema0,
                        (Map<String, String>) null,
                        false,
                        rowDeserializationSchema_MetadataConverterArray0);
        DeserializationSchema.InitializationContext deserializationSchema_InitializationContext0 =
                mock(
                        DeserializationSchema.InitializationContext.class,
                        new ViolatedAssumptionAnswer());
        // Undeclared exception!
        try {
            rocketMQRowDeserializationSchema0.open(deserializationSchema_InitializationContext0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.table.descriptors.DescriptorProperties", e);
        }
    }

    @Test(timeout = 4000)
    public void test3() throws Throwable {
        String[] stringArray0 = new String[0];
        LogicalType logicalType0 = mock(LogicalType.class, new ViolatedAssumptionAnswer());
        DataType dataType0 = mock(DataType.class, new ViolatedAssumptionAnswer());
        doReturn(logicalType0).when(dataType0).getLogicalType();
        TableSchema tableSchema0 = mock(TableSchema.class, new ViolatedAssumptionAnswer());
        doReturn(stringArray0).when(tableSchema0).getFieldNames();
        doReturn(dataType0).when(tableSchema0).toRowDataType();
        RowDeserializationSchema.MetadataConverter[]
                rowDeserializationSchema_MetadataConverterArray0 =
                        new RowDeserializationSchema.MetadataConverter[4];
        RocketMQRowDeserializationSchema rocketMQRowDeserializationSchema0 =
                new RocketMQRowDeserializationSchema(
                        tableSchema0,
                        (Map<String, String>) null,
                        false,
                        rowDeserializationSchema_MetadataConverterArray0);
        // Undeclared exception!
        try {
            rocketMQRowDeserializationSchema0.getProducedType();
            fail("Expecting exception: ClassCastException");

        } catch (ClassCastException e) {
            //
            // org.apache.flink.table.types.logical.LogicalType$MockitoMock$1523443753 cannot be
            // cast to org.apache.flink.table.types.logical.RowType
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.source.reader.deserializer.RowDeserializationSchema",
                    e);
        }
    }

    @Test(timeout = 4000)
    public void test4() throws Throwable {
        String[] stringArray0 = new String[0];
        TableSchema tableSchema0 = mock(TableSchema.class, new ViolatedAssumptionAnswer());
        doReturn(stringArray0).when(tableSchema0).getFieldNames();
        RowDeserializationSchema.MetadataConverter[]
                rowDeserializationSchema_MetadataConverterArray0 =
                        new RowDeserializationSchema.MetadataConverter[7];
        RocketMQRowDeserializationSchema rocketMQRowDeserializationSchema0 =
                new RocketMQRowDeserializationSchema(
                        tableSchema0,
                        (Map<String, String>) null,
                        false,
                        rowDeserializationSchema_MetadataConverterArray0);
        List<BytesMessage> list0 = rocketMQRowDeserializationSchema0.getBytesMessages();
        assertEquals(0, list0.size());
    }

    @Test(timeout = 4000)
    public void test5() throws Throwable {
        String[] stringArray0 = new String[0];
        TableSchema tableSchema0 = mock(TableSchema.class, new ViolatedAssumptionAnswer());
        doReturn(stringArray0).when(tableSchema0).getFieldNames();
        RowDeserializationSchema.MetadataConverter[]
                rowDeserializationSchema_MetadataConverterArray0 =
                        new RowDeserializationSchema.MetadataConverter[4];
        RocketMQRowDeserializationSchema rocketMQRowDeserializationSchema0 =
                new RocketMQRowDeserializationSchema(
                        tableSchema0,
                        (Map<String, String>) null,
                        false,
                        rowDeserializationSchema_MetadataConverterArray0);
        MessageView messageView0 = mock(MessageView.class, new ViolatedAssumptionAnswer());
        Collector<RowData> collector0 =
                (Collector<RowData>) mock(Collector.class, new ViolatedAssumptionAnswer());
        rocketMQRowDeserializationSchema0.deserialize(messageView0, collector0);
    }
}
