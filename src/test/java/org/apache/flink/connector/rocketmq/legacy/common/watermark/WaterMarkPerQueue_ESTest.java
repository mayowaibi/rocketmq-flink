/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 26 12:03:51 GMT 2025
 */

package org.apache.flink.connector.rocketmq.legacy.common.watermark;

import org.apache.flink.streaming.api.watermark.Watermark;

import org.apache.rocketmq.common.message.MessageQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.Test;
import org.junit.runner.RunWith;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
        mockJVMNonDeterminism = true,
        useVFS = true,
        useVNET = true,
        resetStaticState = true,
        separateClassLoader = true,
        useJEE = true)
public class WaterMarkPerQueue_ESTest extends WaterMarkPerQueue_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0() throws Throwable {
        WaterMarkPerQueue waterMarkPerQueue0 = new WaterMarkPerQueue(0L);
        Watermark watermark0 = waterMarkPerQueue0.getCurrentWatermark();
        assertEquals(0L, watermark0.getTimestamp());
    }

    @Test(timeout = 4000)
    public void test1() throws Throwable {
        WaterMarkPerQueue waterMarkPerQueue0 = new WaterMarkPerQueue((-329L));
        MessageQueue messageQueue0 = mock(MessageQueue.class, new ViolatedAssumptionAnswer());
        waterMarkPerQueue0.extractTimestamp(messageQueue0, 0L);
    }

    @Test(timeout = 4000)
    public void test2() throws Throwable {
        WaterMarkPerQueue waterMarkPerQueue0 = new WaterMarkPerQueue();
        // Undeclared exception!
        try {
            waterMarkPerQueue0.getCurrentWatermark();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.legacy.common.watermark.WaterMarkPerQueue",
                    e);
        }
    }

    @Test(timeout = 4000)
    public void test3() throws Throwable {
        WaterMarkPerQueue waterMarkPerQueue0 = new WaterMarkPerQueue(1529L);
        MessageQueue messageQueue0 = mock(MessageQueue.class, new ViolatedAssumptionAnswer());
        waterMarkPerQueue0.extractTimestamp(messageQueue0, 1529L);
        Watermark watermark0 = waterMarkPerQueue0.getCurrentWatermark();
        assertEquals(0L, watermark0.getTimestamp());
    }

    @Test(timeout = 4000)
    public void test4() throws Throwable {
        WaterMarkPerQueue waterMarkPerQueue0 = new WaterMarkPerQueue();
        MessageQueue messageQueue0 = mock(MessageQueue.class, new ViolatedAssumptionAnswer());
        // Undeclared exception!
        try {
            waterMarkPerQueue0.extractTimestamp(messageQueue0, 2873L);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.legacy.common.watermark.WaterMarkPerQueue",
                    e);
        }
    }

    @Test(timeout = 4000)
    public void test5() throws Throwable {
        WaterMarkPerQueue waterMarkPerQueue0 = new WaterMarkPerQueue();
        String string0 = waterMarkPerQueue0.toString();
        assertEquals("WaterMarkPerQueue{maxEventTimeTable=null, maxOutOfOrderness=5000}", string0);
    }
}
