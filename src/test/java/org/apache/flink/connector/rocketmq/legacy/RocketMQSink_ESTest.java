/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 26 11:22:51 GMT 2025
 */

package org.apache.flink.connector.rocketmq.legacy;

import org.apache.flink.api.common.functions.ReduceFunction;
import org.apache.flink.api.common.state.KeyedStateStore;
import org.apache.flink.api.common.state.OperatorStateStore;
import org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer;
import org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer;
import org.apache.flink.api.connector.source.SourceSplit;
import org.apache.flink.api.java.tuple.Tuple18;
import org.apache.flink.configuration.Configuration;
import org.apache.flink.connector.rocketmq.legacy.common.config.OffsetResetStrategy;
import org.apache.flink.connector.rocketmq.legacy.common.selector.MessageQueueSelector;
import org.apache.flink.connector.rocketmq.legacy.common.selector.RandomMessageQueueSelector;
import org.apache.flink.core.fs.CloseableRegistry;
import org.apache.flink.core.fs.FileSystem;
import org.apache.flink.core.fs.Path;
import org.apache.flink.runtime.persistence.IntegerResourceVersion;
import org.apache.flink.runtime.state.FunctionSnapshotContext;
import org.apache.flink.runtime.state.KeyGroupRange;
import org.apache.flink.runtime.state.KeyGroupStatePartitionStreamProvider;
import org.apache.flink.runtime.state.StateInitializationContextImpl;
import org.apache.flink.runtime.state.StatePartitionStreamProvider;
import org.apache.flink.runtime.state.StateSnapshotContextSynchronousImpl;
import org.apache.flink.runtime.state.filesystem.FsCheckpointStreamFactory;
import org.apache.flink.runtime.state.storage.JobManagerCheckpointStorage;
import org.apache.flink.streaming.api.functions.sink.SinkFunction;
import org.apache.flink.streaming.api.operators.BatchGroupedReduceOperator;
import org.apache.flink.streaming.api.operators.StreamingRuntimeContext;

import org.apache.rocketmq.common.message.Message;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.net.URL;
import java.net.URLClassLoader;
import java.util.LinkedHashSet;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.concurrent.SynchronousQueue;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
        mockJVMNonDeterminism = true,
        useVFS = true,
        useVNET = true,
        resetStaticState = true,
        separateClassLoader = true,
        useJEE = true)
public class RocketMQSink_ESTest extends RocketMQSink_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        Properties properties0 = new Properties();
        assertEquals(0, properties0.size());

        RocketMQSink rocketMQSink0 = new RocketMQSink(properties0);
        RocketMQSink rocketMQSink1 = rocketMQSink0.withBatchSize(1);
        RocketMQSink rocketMQSink2 = rocketMQSink1.withMessageQueueSelectorArg("2f'j['^CY}e");
        RocketMQSink rocketMQSink3 = rocketMQSink2.withBatchFlushOnCheckpoint(true);
        RocketMQSink rocketMQSink4 = rocketMQSink3.withAsync(true);
        RandomMessageQueueSelector randomMessageQueueSelector0 = new RandomMessageQueueSelector();
        RocketMQSink rocketMQSink5 =
                rocketMQSink4.withMessageQueueSelector(randomMessageQueueSelector0);
        try {
            rocketMQSink5.snapshotState((FunctionSnapshotContext) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.connector.rocketmq.legacy.RocketMQSink", e);
        }
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        Properties properties0 = new Properties();
        RocketMQSink rocketMQSink0 = new RocketMQSink(properties0);
        RocketMQSink rocketMQSink1 = rocketMQSink0.withBatchFlushOnCheckpoint(true);
        StateSnapshotContextSynchronousImpl stateSnapshotContextSynchronousImpl0 =
                new StateSnapshotContextSynchronousImpl((-1154L), 2147483519L);
        try {
            rocketMQSink1.snapshotState(stateSnapshotContextSynchronousImpl0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.connector.rocketmq.legacy.RocketMQSink", e);
        }
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        Properties properties0 = new Properties();
        RocketMQSink rocketMQSink0 = new RocketMQSink(properties0);
        RocketMQSink rocketMQSink1 = rocketMQSink0.withBatchFlushOnCheckpoint(true);
        RocketMQSink rocketMQSink2 = rocketMQSink1.withBatchSize((-2264));
        RocketMQSink rocketMQSink3 = rocketMQSink2.withAsync(true);
        RandomMessageQueueSelector randomMessageQueueSelector0 = new RandomMessageQueueSelector();
        RocketMQSink rocketMQSink4 =
                rocketMQSink3.withMessageQueueSelector(randomMessageQueueSelector0);
        RocketMQSink rocketMQSink5 =
                rocketMQSink4.withMessageQueueSelectorArg(
                        "org.apache.flink.connector.rocketmq.legacy.RocketMQSink$1");
        rocketMQSink5.withAsync(true);
        rocketMQSink5.withBatchFlushOnCheckpoint(true);
        Configuration configuration0 = new Configuration();
        try {
            rocketMQSink1.open(configuration0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Producer properties can not be empty
            //
            verifyException("org.apache.commons.lang.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        RocketMQSink rocketMQSink0 = new RocketMQSink((Properties) null);
        RocketMQSink rocketMQSink1 = rocketMQSink0.withBatchSize((-3952));
        RocketMQSink rocketMQSink2 = rocketMQSink1.withMessageQueueSelectorArg("rHs[_f^ScT");
        assertSame(rocketMQSink2, rocketMQSink1);
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        Properties properties0 = new Properties();
        RocketMQSink rocketMQSink0 = new RocketMQSink(properties0);
        RocketMQSink rocketMQSink1 = rocketMQSink0.withMessageQueueSelectorArg("");
        RandomMessageQueueSelector randomMessageQueueSelector0 = new RandomMessageQueueSelector();
        RocketMQSink rocketMQSink2 =
                rocketMQSink1.withMessageQueueSelector(randomMessageQueueSelector0);
        RocketMQSink rocketMQSink3 = rocketMQSink2.withAsync(false);
        RocketMQSink rocketMQSink4 = rocketMQSink3.withBatchFlushOnCheckpoint(false);
        RocketMQSink rocketMQSink5 = rocketMQSink4.withBatchFlushOnCheckpoint(false);
        assertSame(rocketMQSink5, rocketMQSink3);
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        Properties properties0 = new Properties();
        RocketMQSink rocketMQSink0 = new RocketMQSink(properties0);
        String string0 = "";
        byte[] byteArray0 = new byte[2];
        byteArray0[0] = (byte) (-68);
        byteArray0[1] = (byte) 0;
        Message message0 = new Message("", "", byteArray0);
        message0.isWaitStoreMsgOK();
        message0.setKeys("");
        FileSystem fileSystem0 = mock(FileSystem.class, new ViolatedAssumptionAnswer());
        Path path0 = mock(Path.class, new ViolatedAssumptionAnswer());
        FsCheckpointStreamFactory fsCheckpointStreamFactory0 =
                new FsCheckpointStreamFactory(fileSystem0, path0, path0, (byte) 0, (byte) 0);
        KeyGroupRange keyGroupRange0 = KeyGroupRange.of(0, 0);
        CloseableRegistry closeableRegistry0 = new CloseableRegistry();
        StateSnapshotContextSynchronousImpl stateSnapshotContextSynchronousImpl0 =
                new StateSnapshotContextSynchronousImpl(
                        (byte) 0,
                        (byte) (-68),
                        fsCheckpointStreamFactory0,
                        keyGroupRange0,
                        closeableRegistry0);
        rocketMQSink0.snapshotState(stateSnapshotContextSynchronousImpl0);
        message0.getProperty("jYlD");
        SinkFunction.Context sinkFunction_Context0 =
                mock(SinkFunction.Context.class, new ViolatedAssumptionAnswer());
        try {
            rocketMQSink0.invoke(message0, sinkFunction_Context0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.connector.rocketmq.legacy.RocketMQSink", e);
        }
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        Properties properties0 = new Properties();
        RocketMQSink rocketMQSink0 = new RocketMQSink(properties0);
        RocketMQSink rocketMQSink1 = rocketMQSink0.withAsync(false);
        RocketMQSink rocketMQSink2 = rocketMQSink0.withBatchSize(3028);
        rocketMQSink2.withAsync(true);
        RocketMQSink rocketMQSink3 = rocketMQSink0.withBatchSize(32);
        RocketMQSink rocketMQSink4 = rocketMQSink3.withBatchFlushOnCheckpoint(false);
        rocketMQSink1.withMessageQueueSelectorArg("");
        Long long0 = new Long(0L);
        ReduceFunction<IntegerResourceVersion> reduceFunction0 =
                (ReduceFunction<IntegerResourceVersion>)
                        mock(ReduceFunction.class, new ViolatedAssumptionAnswer());
        byte[] byteArray0 = new byte[0];
        UnloadableDummyTypeSerializer<IntegerResourceVersion> unloadableDummyTypeSerializer0 =
                new UnloadableDummyTypeSerializer<IntegerResourceVersion>(byteArray0);
        BatchGroupedReduceOperator<IntegerResourceVersion, StatePartitionStreamProvider>
                batchGroupedReduceOperator0 =
                        new BatchGroupedReduceOperator<
                                IntegerResourceVersion, StatePartitionStreamProvider>(
                                reduceFunction0, unloadableDummyTypeSerializer0);
        batchGroupedReduceOperator0.getKeyedStateStore();
        Class<KeyGroupStatePartitionStreamProvider> class0 =
                KeyGroupStatePartitionStreamProvider.class;
        URL[] uRLArray0 = new URL[0];
        URLClassLoader uRLClassLoader0 = URLClassLoader.newInstance(uRLArray0, (ClassLoader) null);
        ServiceLoader<KeyGroupStatePartitionStreamProvider> serviceLoader0 =
                ServiceLoader.load(class0, (ClassLoader) uRLClassLoader0);
        SynchronousQueue<KeyGroupStatePartitionStreamProvider> synchronousQueue0 =
                new SynchronousQueue<KeyGroupStatePartitionStreamProvider>();
        LinkedHashSet<StatePartitionStreamProvider> linkedHashSet0 =
                new LinkedHashSet<StatePartitionStreamProvider>(synchronousQueue0);
        StateInitializationContextImpl stateInitializationContextImpl0 =
                new StateInitializationContextImpl(
                        long0,
                        (OperatorStateStore) null,
                        (KeyedStateStore) null,
                        serviceLoader0,
                        linkedHashSet0);
        rocketMQSink3.initializeState(stateInitializationContextImpl0);
        assertSame(rocketMQSink3, rocketMQSink4);
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        Properties properties0 = new Properties();
        RocketMQSink rocketMQSink0 = new RocketMQSink(properties0);
        RocketMQSink rocketMQSink1 = rocketMQSink0.withBatchFlushOnCheckpoint(true);
        ReduceFunction<StatePartitionStreamProvider> reduceFunction0 =
                (ReduceFunction<StatePartitionStreamProvider>)
                        mock(ReduceFunction.class, new ViolatedAssumptionAnswer());
        byte[] byteArray0 = new byte[1];
        byteArray0[0] = (byte) (-110);
        UnloadableDummyTypeSerializer<StatePartitionStreamProvider> unloadableDummyTypeSerializer0 =
                new UnloadableDummyTypeSerializer<StatePartitionStreamProvider>(byteArray0);
        SingleThreadAccessCheckingTypeSerializer<StatePartitionStreamProvider>
                singleThreadAccessCheckingTypeSerializer0 =
                        new SingleThreadAccessCheckingTypeSerializer<StatePartitionStreamProvider>(
                                unloadableDummyTypeSerializer0);
        BatchGroupedReduceOperator<
                        StatePartitionStreamProvider,
                        Tuple18<
                                RocketMQSink,
                                SourceSplit,
                                Message,
                                Integer,
                                Message,
                                String,
                                RocketMQSink,
                                String,
                                StreamingRuntimeContext,
                                Message,
                                Integer,
                                SourceSplit,
                                Object,
                                StatePartitionStreamProvider,
                                OffsetResetStrategy,
                                RocketMQSink,
                                OffsetResetStrategy,
                                String>>
                batchGroupedReduceOperator0 =
                        new BatchGroupedReduceOperator<
                                StatePartitionStreamProvider,
                                Tuple18<
                                        RocketMQSink,
                                        SourceSplit,
                                        Message,
                                        Integer,
                                        Message,
                                        String,
                                        RocketMQSink,
                                        String,
                                        StreamingRuntimeContext,
                                        Message,
                                        Integer,
                                        SourceSplit,
                                        Object,
                                        StatePartitionStreamProvider,
                                        OffsetResetStrategy,
                                        RocketMQSink,
                                        OffsetResetStrategy,
                                        String>>(
                                reduceFunction0, singleThreadAccessCheckingTypeSerializer0);
        Configuration configuration0 = batchGroupedReduceOperator0.getUserFunctionParameters();
        try {
            rocketMQSink1.open(configuration0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Producer properties can not be empty
            //
            verifyException("org.apache.commons.lang.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        RocketMQSink rocketMQSink0 = new RocketMQSink((Properties) null);
        RocketMQSink rocketMQSink1 = rocketMQSink0.withBatchSize(49);
        RocketMQSink rocketMQSink2 = rocketMQSink1.withMessageQueueSelectorArg("");
        boolean boolean0 = true;
        rocketMQSink2.withBatchFlushOnCheckpoint(true);
        RandomMessageQueueSelector randomMessageQueueSelector0 = new RandomMessageQueueSelector();
        Message message0 = new Message();
        JobManagerCheckpointStorage jobManagerCheckpointStorage0 =
                new JobManagerCheckpointStorage(49);
        StateSnapshotContextSynchronousImpl stateSnapshotContextSynchronousImpl0 =
                new StateSnapshotContextSynchronousImpl(5242880, 5242880);
        try {
            rocketMQSink0.snapshotState(stateSnapshotContextSynchronousImpl0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.connector.rocketmq.legacy.RocketMQSink", e);
        }
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        Properties properties0 = new Properties();
        properties0.stringPropertyNames();
        RandomMessageQueueSelector randomMessageQueueSelector0 = new RandomMessageQueueSelector();
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        Properties properties0 = new Properties();
        RocketMQSink rocketMQSink0 = new RocketMQSink(properties0);
        rocketMQSink0.withMessageQueueSelector((MessageQueueSelector) null);
        Message message0 = new Message();
        SinkFunction.Context sinkFunction_Context0 =
                mock(SinkFunction.Context.class, new ViolatedAssumptionAnswer());
    }
}
