/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 26 12:37:48 GMT 2025
 */

package org.apache.flink.connector.rocketmq.common.event;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
        mockJVMNonDeterminism = true,
        useVFS = true,
        useVNET = true,
        resetStaticState = true,
        separateClassLoader = true,
        useJEE = true)
public class SourceReportOffsetEvent_ESTest extends SourceReportOffsetEvent_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        SourceReportOffsetEvent sourceReportOffsetEvent0 = new SourceReportOffsetEvent();
        sourceReportOffsetEvent0.setTopic("P+f#|z/33");
        sourceReportOffsetEvent0.getTopic();
        assertEquals((-1L), sourceReportOffsetEvent0.getCheckpoint());
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        SourceReportOffsetEvent sourceReportOffsetEvent0 = new SourceReportOffsetEvent();
        sourceReportOffsetEvent0.setQueueId(2045);
        int int0 = sourceReportOffsetEvent0.getQueueId();
        assertEquals(2045, int0);
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        SourceReportOffsetEvent sourceReportOffsetEvent0 = new SourceReportOffsetEvent();
        sourceReportOffsetEvent0.setCheckpoint(0);
        long long0 = sourceReportOffsetEvent0.getCheckpoint();
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        SourceReportOffsetEvent sourceReportOffsetEvent0 = new SourceReportOffsetEvent();
        sourceReportOffsetEvent0.setCheckpoint(2120L);
        long long0 = sourceReportOffsetEvent0.getCheckpoint();
        assertEquals(2120L, long0);
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        SourceReportOffsetEvent sourceReportOffsetEvent0 = new SourceReportOffsetEvent();
        sourceReportOffsetEvent0.setBroker("");
        sourceReportOffsetEvent0.getBroker();
        assertEquals((-1L), sourceReportOffsetEvent0.getCheckpoint());
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        SourceReportOffsetEvent sourceReportOffsetEvent0 = new SourceReportOffsetEvent();
        int int0 = sourceReportOffsetEvent0.getQueueId();
        assertEquals((-1L), sourceReportOffsetEvent0.getCheckpoint());
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        SourceReportOffsetEvent sourceReportOffsetEvent0 = new SourceReportOffsetEvent();
        sourceReportOffsetEvent0.setTopic("");
        sourceReportOffsetEvent0.getTopic();
        assertEquals((-1L), sourceReportOffsetEvent0.getCheckpoint());
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        SourceReportOffsetEvent sourceReportOffsetEvent0 = new SourceReportOffsetEvent();
        long long0 = sourceReportOffsetEvent0.getCheckpoint();
        assertEquals((-1L), long0);
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        SourceReportOffsetEvent sourceReportOffsetEvent0 = new SourceReportOffsetEvent();
        sourceReportOffsetEvent0.setBroker("-KE:hk");
        sourceReportOffsetEvent0.getBroker();
        assertEquals((-1L), sourceReportOffsetEvent0.getCheckpoint());
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        SourceReportOffsetEvent sourceReportOffsetEvent0 = new SourceReportOffsetEvent();
        sourceReportOffsetEvent0.getTopic();
        assertEquals((-1L), sourceReportOffsetEvent0.getCheckpoint());
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        SourceReportOffsetEvent sourceReportOffsetEvent0 = new SourceReportOffsetEvent();
        sourceReportOffsetEvent0.getBroker();
        assertEquals((-1L), sourceReportOffsetEvent0.getCheckpoint());
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        SourceReportOffsetEvent sourceReportOffsetEvent0 = new SourceReportOffsetEvent();
        sourceReportOffsetEvent0.setQueueId((-663));
        int int0 = sourceReportOffsetEvent0.getQueueId();
        assertEquals((-663), int0);
    }
}
