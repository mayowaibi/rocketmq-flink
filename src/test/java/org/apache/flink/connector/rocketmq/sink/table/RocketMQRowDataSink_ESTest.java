/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 26 12:02:55 GMT 2025
 */

package org.apache.flink.connector.rocketmq.sink.table;

import org.apache.flink.api.common.functions.RuntimeContext;
import org.apache.flink.configuration.Configuration;
import org.apache.flink.connector.rocketmq.legacy.RocketMQSink;
import org.apache.flink.streaming.api.functions.sink.SinkFunction;
import org.apache.flink.table.data.RowData;

import org.apache.rocketmq.common.message.Message;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.Test;
import org.junit.runner.RunWith;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
        mockJVMNonDeterminism = true,
        useVFS = true,
        useVNET = true,
        resetStaticState = true,
        separateClassLoader = true,
        useJEE = true)
public class RocketMQRowDataSink_ESTest extends RocketMQRowDataSink_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0() throws Throwable {
        RocketMQSink rocketMQSink0 = mock(RocketMQSink.class, new ViolatedAssumptionAnswer());
        RocketMQRowDataConverter rocketMQRowDataConverter0 =
                mock(RocketMQRowDataConverter.class, new ViolatedAssumptionAnswer());
        RocketMQRowDataSink rocketMQRowDataSink0 =
                new RocketMQRowDataSink(rocketMQSink0, rocketMQRowDataConverter0);
        rocketMQRowDataSink0.close();
    }

    @Test(timeout = 4000)
    public void test1() throws Throwable {
        RocketMQRowDataConverter rocketMQRowDataConverter0 =
                mock(RocketMQRowDataConverter.class, new ViolatedAssumptionAnswer());
        RocketMQRowDataSink rocketMQRowDataSink0 =
                new RocketMQRowDataSink((RocketMQSink) null, rocketMQRowDataConverter0);
        // Undeclared exception!
        try {
            rocketMQRowDataSink0.setRuntimeContext((RuntimeContext) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.sink.table.RocketMQRowDataSink", e);
        }
    }

    @Test(timeout = 4000)
    public void test2() throws Throwable {
        RocketMQSink rocketMQSink0 = mock(RocketMQSink.class, new ViolatedAssumptionAnswer());
        RocketMQRowDataSink rocketMQRowDataSink0 =
                new RocketMQRowDataSink(rocketMQSink0, (RocketMQRowDataConverter) null);
        try {
            rocketMQRowDataSink0.open((Configuration) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.sink.table.RocketMQRowDataSink", e);
        }
    }

    @Test(timeout = 4000)
    public void test3() throws Throwable {
        RocketMQSink rocketMQSink0 = mock(RocketMQSink.class, new ViolatedAssumptionAnswer());
        RocketMQRowDataSink rocketMQRowDataSink0 =
                new RocketMQRowDataSink(rocketMQSink0, (RocketMQRowDataConverter) null);
        RowData rowData0 = mock(RowData.class, new ViolatedAssumptionAnswer());
        SinkFunction.Context sinkFunction_Context0 =
                mock(SinkFunction.Context.class, new ViolatedAssumptionAnswer());
        try {
            rocketMQRowDataSink0.invoke(rowData0, sinkFunction_Context0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.sink.table.RocketMQRowDataSink", e);
        }
    }

    @Test(timeout = 4000)
    public void test4() throws Throwable {
        RocketMQSink rocketMQSink0 = mock(RocketMQSink.class, new ViolatedAssumptionAnswer());
        Message message0 = mock(Message.class, new ViolatedAssumptionAnswer());
        RocketMQRowDataConverter rocketMQRowDataConverter0 =
                mock(RocketMQRowDataConverter.class, new ViolatedAssumptionAnswer());
        doReturn(message0)
                .when(rocketMQRowDataConverter0)
                .convert(any(org.apache.flink.table.data.RowData.class));
        RocketMQRowDataSink rocketMQRowDataSink0 =
                new RocketMQRowDataSink(rocketMQSink0, rocketMQRowDataConverter0);
        RowData rowData0 = mock(RowData.class, new ViolatedAssumptionAnswer());
        rocketMQRowDataSink0.invoke(rowData0, (SinkFunction.Context) null);
    }

    @Test(timeout = 4000)
    public void test5() throws Throwable {
        RocketMQSink rocketMQSink0 = mock(RocketMQSink.class, new ViolatedAssumptionAnswer());
        RocketMQRowDataConverter rocketMQRowDataConverter0 =
                mock(RocketMQRowDataConverter.class, new ViolatedAssumptionAnswer());
        doReturn((Message) null)
                .when(rocketMQRowDataConverter0)
                .convert(any(org.apache.flink.table.data.RowData.class));
        RocketMQRowDataSink rocketMQRowDataSink0 =
                new RocketMQRowDataSink(rocketMQSink0, rocketMQRowDataConverter0);
        RowData rowData0 = mock(RowData.class, new ViolatedAssumptionAnswer());
        SinkFunction.Context sinkFunction_Context0 =
                mock(SinkFunction.Context.class, new ViolatedAssumptionAnswer());
        rocketMQRowDataSink0.invoke(rowData0, sinkFunction_Context0);
    }

    @Test(timeout = 4000)
    public void test6() throws Throwable {
        RocketMQSink rocketMQSink0 = mock(RocketMQSink.class, new ViolatedAssumptionAnswer());
        RocketMQRowDataConverter rocketMQRowDataConverter0 =
                mock(RocketMQRowDataConverter.class, new ViolatedAssumptionAnswer());
        RocketMQRowDataSink rocketMQRowDataSink0 =
                new RocketMQRowDataSink(rocketMQSink0, rocketMQRowDataConverter0);
        rocketMQRowDataSink0.setRuntimeContext((RuntimeContext) null);
    }

    @Test(timeout = 4000)
    public void test7() throws Throwable {
        RocketMQSink rocketMQSink0 = mock(RocketMQSink.class, new ViolatedAssumptionAnswer());
        RocketMQRowDataConverter rocketMQRowDataConverter0 =
                mock(RocketMQRowDataConverter.class, new ViolatedAssumptionAnswer());
        RocketMQRowDataSink rocketMQRowDataSink0 =
                new RocketMQRowDataSink(rocketMQSink0, rocketMQRowDataConverter0);
        Configuration configuration0 = mock(Configuration.class, new ViolatedAssumptionAnswer());
        rocketMQRowDataSink0.open(configuration0);
    }

    @Test(timeout = 4000)
    public void test8() throws Throwable {
        RocketMQRowDataConverter rocketMQRowDataConverter0 =
                mock(RocketMQRowDataConverter.class, new ViolatedAssumptionAnswer());
        RocketMQRowDataSink rocketMQRowDataSink0 =
                new RocketMQRowDataSink((RocketMQSink) null, rocketMQRowDataConverter0);
        // Undeclared exception!
        try {
            rocketMQRowDataSink0.close();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.sink.table.RocketMQRowDataSink", e);
        }
    }
}
