/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 26 12:23:15 GMT 2025
 */

package org.apache.flink.connector.rocketmq.source.split;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.Test;
import org.junit.runner.RunWith;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
        mockJVMNonDeterminism = true,
        useVFS = true,
        useVNET = true,
        resetStaticState = true,
        separateClassLoader = true,
        useJEE = true)
public class RocketMQSourceSplitState_ESTest extends RocketMQSourceSplitState_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0() throws Throwable {
        RocketMQSourceSplit rocketMQSourceSplit0 =
                mock(RocketMQSourceSplit.class, new ViolatedAssumptionAnswer());
        RocketMQSourceSplit rocketMQSourceSplit1 = RocketMQSourceSplit.clone(rocketMQSourceSplit0);
        RocketMQSourceSplitState rocketMQSourceSplitState0 =
                new RocketMQSourceSplitState(rocketMQSourceSplit1);
        rocketMQSourceSplitState0.setCurrentOffset(1870L);
        RocketMQSourceSplit rocketMQSourceSplit2 = rocketMQSourceSplitState0.getSourceSplit();
        assertEquals(1870L, rocketMQSourceSplit2.getStartingOffset());
    }

    @Test(timeout = 4000)
    public void test1() throws Throwable {
        RocketMQSourceSplit rocketMQSourceSplit0 =
                mock(RocketMQSourceSplit.class, new ViolatedAssumptionAnswer());
        doReturn("").when(rocketMQSourceSplit0).getBrokerName();
        doReturn(1428).when(rocketMQSourceSplit0).getQueueId();
        doReturn((-1L), (-57L)).when(rocketMQSourceSplit0).getStartingOffset();
        doReturn(516L).when(rocketMQSourceSplit0).getStoppingOffset();
        doReturn("").when(rocketMQSourceSplit0).getTopic();
        RocketMQSourceSplitState rocketMQSourceSplitState0 =
                new RocketMQSourceSplitState(rocketMQSourceSplit0);
        RocketMQSourceSplit rocketMQSourceSplit1 = rocketMQSourceSplitState0.getSourceSplit();
        assertEquals((-57L), rocketMQSourceSplit1.getStartingOffset());
    }

    @Test(timeout = 4000)
    public void test2() throws Throwable {
        RocketMQSourceSplit rocketMQSourceSplit0 =
                mock(RocketMQSourceSplit.class, new ViolatedAssumptionAnswer());
        doReturn("").when(rocketMQSourceSplit0).getBrokerName();
        doReturn((-2632)).when(rocketMQSourceSplit0).getQueueId();
        doReturn((-83L), (long) (-2632)).when(rocketMQSourceSplit0).getStartingOffset();
        doReturn((-1953L)).when(rocketMQSourceSplit0).getStoppingOffset();
        doReturn("").when(rocketMQSourceSplit0).getTopic();
        RocketMQSourceSplitState rocketMQSourceSplitState0 =
                new RocketMQSourceSplitState(rocketMQSourceSplit0);
        RocketMQSourceSplit rocketMQSourceSplit1 = rocketMQSourceSplitState0.getSourceSplit();
        assertEquals((-2632L), rocketMQSourceSplit1.getStartingOffset());
    }

    @Test(timeout = 4000)
    public void test3() throws Throwable {
        RocketMQSourceSplit rocketMQSourceSplit0 =
                mock(RocketMQSourceSplit.class, new ViolatedAssumptionAnswer());
        doReturn("").when(rocketMQSourceSplit0).getBrokerName();
        doReturn((-2632)).when(rocketMQSourceSplit0).getQueueId();
        doReturn((-83L), (long) (-2632)).when(rocketMQSourceSplit0).getStartingOffset();
        doReturn((-1953L)).when(rocketMQSourceSplit0).getStoppingOffset();
        doReturn("").when(rocketMQSourceSplit0).getTopic();
        RocketMQSourceSplitState rocketMQSourceSplitState0 =
                new RocketMQSourceSplitState(rocketMQSourceSplit0);
        rocketMQSourceSplitState0.setCurrentOffset(0L);
        long long0 = rocketMQSourceSplitState0.getCurrentOffset();
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test4() throws Throwable {
        RocketMQSourceSplit rocketMQSourceSplit0 =
                mock(RocketMQSourceSplit.class, new ViolatedAssumptionAnswer());
        RocketMQSourceSplit rocketMQSourceSplit1 = RocketMQSourceSplit.clone(rocketMQSourceSplit0);
        RocketMQSourceSplitState rocketMQSourceSplitState0 =
                new RocketMQSourceSplitState(rocketMQSourceSplit1);
        rocketMQSourceSplitState0.setCurrentOffset(1870L);
        long long0 = rocketMQSourceSplitState0.getCurrentOffset();
        assertEquals(1870L, long0);
    }

    @Test(timeout = 4000)
    public void test5() throws Throwable {
        RocketMQSourceSplitState rocketMQSourceSplitState0 = null;
        try {
            rocketMQSourceSplitState0 = new RocketMQSourceSplitState((RocketMQSourceSplit) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.source.split.RocketMQSourceSplitState", e);
        }
    }

    @Test(timeout = 4000)
    public void test6() throws Throwable {
        RocketMQSourceSplit rocketMQSourceSplit0 =
                mock(RocketMQSourceSplit.class, new ViolatedAssumptionAnswer());
        doReturn("").when(rocketMQSourceSplit0).getBrokerName();
        doReturn((-2632)).when(rocketMQSourceSplit0).getQueueId();
        doReturn((-83L), (long) (-2632)).when(rocketMQSourceSplit0).getStartingOffset();
        doReturn((-1953L)).when(rocketMQSourceSplit0).getStoppingOffset();
        doReturn("").when(rocketMQSourceSplit0).getTopic();
        RocketMQSourceSplitState rocketMQSourceSplitState0 =
                new RocketMQSourceSplitState(rocketMQSourceSplit0);
        long long0 = rocketMQSourceSplitState0.getCurrentOffset();
        assertEquals((-2632L), long0);
    }

    @Test(timeout = 4000)
    public void test7() throws Throwable {
        RocketMQSourceSplit rocketMQSourceSplit0 =
                mock(RocketMQSourceSplit.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(rocketMQSourceSplit0).getBrokerName();
        doReturn(0).when(rocketMQSourceSplit0).getQueueId();
        doReturn(0L, 0L).when(rocketMQSourceSplit0).getStartingOffset();
        doReturn(0L).when(rocketMQSourceSplit0).getStoppingOffset();
        doReturn((String) null).when(rocketMQSourceSplit0).getTopic();
        RocketMQSourceSplitState rocketMQSourceSplitState0 =
                new RocketMQSourceSplitState(rocketMQSourceSplit0);
        RocketMQSourceSplit rocketMQSourceSplit1 = rocketMQSourceSplitState0.getSourceSplit();
        assertEquals(0L, rocketMQSourceSplit1.getStartingOffset());
    }
}
