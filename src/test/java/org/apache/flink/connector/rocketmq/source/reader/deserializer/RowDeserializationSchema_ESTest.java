/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 26 10:27:50 GMT 2025
 */

package org.apache.flink.connector.rocketmq.source.reader.deserializer;

import org.apache.flink.api.common.serialization.DeserializationSchema;
import org.apache.flink.api.common.typeinfo.TypeInformation;
import org.apache.flink.configuration.DelegatingConfiguration;
import org.apache.flink.runtime.executiongraph.ExecutionAttemptID;
import org.apache.flink.runtime.jobgraph.JobVertexID;
import org.apache.flink.runtime.jobgraph.OperatorID;
import org.apache.flink.runtime.metrics.groups.InternalOperatorMetricGroup;
import org.apache.flink.runtime.metrics.groups.TaskMetricGroup;
import org.apache.flink.runtime.metrics.groups.UnregisteredMetricGroups;
import org.apache.flink.runtime.operators.NoOpChainedDriver;
import org.apache.flink.table.api.TableSchema;
import org.apache.flink.table.catalog.ObjectIdentifier;
import org.apache.flink.table.data.GenericRowData;
import org.apache.flink.table.data.RowData;
import org.apache.flink.table.types.DataType;
import org.apache.flink.table.types.logical.BinaryType;
import org.apache.flink.types.RowKind;
import org.apache.flink.util.Collector;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.lang.reflect.Array;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import java.util.Vector;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
        mockJVMNonDeterminism = true,
        useVFS = true,
        useVNET = true,
        resetStaticState = true,
        separateClassLoader = true,
        useJEE = true)
public class RowDeserializationSchema_ESTest extends RowDeserializationSchema_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        RowDeserializationSchema.MetadataConverter[]
                rowDeserializationSchema_MetadataConverterArray0 =
                        new RowDeserializationSchema.MetadataConverter[6];
        RowDeserializationSchema.MetadataConverter rowDeserializationSchema_MetadataConverter0 =
                mock(
                        RowDeserializationSchema.MetadataConverter.class,
                        new ViolatedAssumptionAnswer());
        doReturn((Object) null)
                .when(rowDeserializationSchema_MetadataConverter0)
                .read(
                        any(
                                org.apache.flink.connector.rocketmq.source.reader.deserializer
                                        .BytesMessage.class));
        RowDeserializationSchema.MetadataCollector rowDeserializationSchema_MetadataCollector0 =
                new RowDeserializationSchema.MetadataCollector(
                        true, rowDeserializationSchema_MetadataConverterArray0);
        Object object0 =
                rowDeserializationSchema_MetadataConverter0.read(
                        rowDeserializationSchema_MetadataCollector0.message);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        RowDeserializationSchema.Builder rowDeserializationSchema_Builder0 =
                new RowDeserializationSchema.Builder();
        RowDeserializationSchema.Builder rowDeserializationSchema_Builder1 =
                rowDeserializationSchema_Builder0.setLineDelimiter("MNq#?Jl=aT\" V_");
        assertSame(rowDeserializationSchema_Builder1, rowDeserializationSchema_Builder0);
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        RowDeserializationSchema.Builder rowDeserializationSchema_Builder0 =
                new RowDeserializationSchema.Builder();
        RowDeserializationSchema.Builder rowDeserializationSchema_Builder1 =
                rowDeserializationSchema_Builder0.setFieldDelimiter("1v`_g~1\"i(<= b");
        assertSame(rowDeserializationSchema_Builder0, rowDeserializationSchema_Builder1);
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        RowDeserializationSchema.Builder rowDeserializationSchema_Builder0 =
                new RowDeserializationSchema.Builder();
        RowDeserializationSchema.Builder rowDeserializationSchema_Builder1 =
                rowDeserializationSchema_Builder0.setEncoding("\u03B7");
        assertSame(rowDeserializationSchema_Builder0, rowDeserializationSchema_Builder1);
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        RowDeserializationSchema.Builder rowDeserializationSchema_Builder0 =
                new RowDeserializationSchema.Builder();
        RowDeserializationSchema.Builder rowDeserializationSchema_Builder1 =
                rowDeserializationSchema_Builder0.setColumnErrorDebug(true);
        assertSame(rowDeserializationSchema_Builder1, rowDeserializationSchema_Builder0);
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        UnregisteredMetricGroups.UnregisteredTaskManagerJobMetricGroup
                unregisteredMetricGroups_UnregisteredTaskManagerJobMetricGroup0 =
                        new UnregisteredMetricGroups.UnregisteredTaskManagerJobMetricGroup();
        ExecutionAttemptID executionAttemptID0 = new ExecutionAttemptID();
        TaskMetricGroup taskMetricGroup0 =
                unregisteredMetricGroups_UnregisteredTaskManagerJobMetricGroup0.addTask(
                        (JobVertexID) null, executionAttemptID0, "", (-2649), (-2649));
        InternalOperatorMetricGroup internalOperatorMetricGroup0 =
                taskMetricGroup0.getOrAddOperator((OperatorID) null, "");
        Map<String, String> map0 = internalOperatorMetricGroup0.getAllVariables();
        DirtyDataStrategy dirtyDataStrategy0 = DirtyDataStrategy.PAD;
        RowDeserializationSchema.MetadataConverter[]
                rowDeserializationSchema_MetadataConverterArray0 =
                        new RowDeserializationSchema.MetadataConverter[0];
        String[] stringArray0 = new String[0];
        TableSchema tableSchema0 = mock(TableSchema.class, new ViolatedAssumptionAnswer());
        doReturn(stringArray0).when(tableSchema0).getFieldNames();
        doReturn((DataType) null).when(tableSchema0).toRowDataType();
        Stack<String> stack0 = new Stack<String>();
        RowDeserializationSchema rowDeserializationSchema0 =
                new RowDeserializationSchema(
                        tableSchema0,
                        dirtyDataStrategy0,
                        dirtyDataStrategy0,
                        dirtyDataStrategy0,
                        "TaskManager address %s cannot be resolved. %s",
                        "L",
                        "",
                        false,
                        false,
                        rowDeserializationSchema_MetadataConverterArray0,
                        stack0,
                        map0);
        // Undeclared exception!
        try {
            rowDeserializationSchema0.getProducedType();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.source.reader.deserializer.RowDeserializationSchema",
                    e);
        }
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        UnregisteredMetricGroups.UnregisteredTaskManagerJobMetricGroup
                unregisteredMetricGroups_UnregisteredTaskManagerJobMetricGroup0 =
                        new UnregisteredMetricGroups.UnregisteredTaskManagerJobMetricGroup();
        ExecutionAttemptID executionAttemptID0 = new ExecutionAttemptID();
        TaskMetricGroup taskMetricGroup0 =
                unregisteredMetricGroups_UnregisteredTaskManagerJobMetricGroup0.addTask(
                        (JobVertexID) null, executionAttemptID0, "", (-2649), (-2649));
        InternalOperatorMetricGroup internalOperatorMetricGroup0 =
                taskMetricGroup0.getOrAddOperator((OperatorID) null, "");
        Map<String, String> map0 = internalOperatorMetricGroup0.getAllVariables();
        DirtyDataStrategy dirtyDataStrategy0 = DirtyDataStrategy.PAD;
        RowDeserializationSchema.MetadataConverter[]
                rowDeserializationSchema_MetadataConverterArray0 =
                        new RowDeserializationSchema.MetadataConverter[0];
        RowDeserializationSchema.MetadataCollector rowDeserializationSchema_MetadataCollector0 =
                new RowDeserializationSchema.MetadataCollector(
                        false, rowDeserializationSchema_MetadataConverterArray0);
        String[] stringArray0 = new String[0];
        TableSchema tableSchema0 = mock(TableSchema.class, new ViolatedAssumptionAnswer());
        doReturn((Object) stringArray0, (Object) stringArray0).when(tableSchema0).getFieldNames();
        Stack<String> stack0 = new Stack<String>();
        RowDeserializationSchema rowDeserializationSchema0 =
                new RowDeserializationSchema(
                        tableSchema0,
                        dirtyDataStrategy0,
                        dirtyDataStrategy0,
                        dirtyDataStrategy0,
                        "TaskManager address %s cannot be resolved. %s",
                        "L",
                        "",
                        false,
                        false,
                        rowDeserializationSchema_MetadataConverterArray0,
                        stack0,
                        map0);
        NoOpChainedDriver<RowData> noOpChainedDriver0 = new NoOpChainedDriver<RowData>();
        rowDeserializationSchema_MetadataCollector0.collector =
                (Collector<RowData>) noOpChainedDriver0;
        Stack<BytesMessage> stack1 = new Stack<BytesMessage>();
        stack1.add((BytesMessage) null);
        // Undeclared exception!
        try {
            rowDeserializationSchema0.deserialize(
                    (List<BytesMessage>) stack1,
                    (Collector<RowData>) rowDeserializationSchema_MetadataCollector0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // Exception in chained task 'null'
            //
            verifyException("org.apache.flink.runtime.operators.NoOpChainedDriver", e);
        }
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        RowDeserializationSchema.MetadataConverter[]
                rowDeserializationSchema_MetadataConverterArray0 =
                        new RowDeserializationSchema.MetadataConverter[5];
        RowKind rowKind0 = RowKind.UPDATE_AFTER;
        GenericRowData genericRowData0 = new GenericRowData(rowKind0, 5600);
        String string0 = genericRowData0.toString();
        TableSchema tableSchema0 = mock(TableSchema.class, new ViolatedAssumptionAnswer());
        DirtyDataStrategy dirtyDataStrategy0 = DirtyDataStrategy.NULL;
        ObjectIdentifier objectIdentifier0 =
                ObjectIdentifier.of(
                        string0,
                        "G7g]q'W|*a^R#Q`4X*9",
                        "Field missing error, table column number: ");
        List<String> list0 = objectIdentifier0.toList();
        DelegatingConfiguration delegatingConfiguration0 = new DelegatingConfiguration();
        Map<String, String> map0 = delegatingConfiguration0.toMap();
        RowDeserializationSchema rowDeserializationSchema0 =
                new RowDeserializationSchema(
                        tableSchema0,
                        dirtyDataStrategy0,
                        dirtyDataStrategy0,
                        dirtyDataStrategy0,
                        "Field missing error, table column number: ",
                        string0,
                        "G7g]q'W|*a^R#Q`4X*9",
                        false,
                        false,
                        rowDeserializationSchema_MetadataConverterArray0,
                        list0,
                        map0);
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        String[] stringArray0 = new String[8];
        TableSchema tableSchema0 = mock(TableSchema.class, new ViolatedAssumptionAnswer());
        doReturn((Object) stringArray0, (Object) null).when(tableSchema0).getFieldNames();
        DirtyDataStrategy dirtyDataStrategy0 = DirtyDataStrategy.EXCEPTION;
        RowDeserializationSchema.MetadataConverter[]
                rowDeserializationSchema_MetadataConverterArray0 =
                        new RowDeserializationSchema.MetadataConverter[0];
        UnregisteredMetricGroups.UnregisteredTaskManagerJobMetricGroup
                unregisteredMetricGroups_UnregisteredTaskManagerJobMetricGroup0 =
                        new UnregisteredMetricGroups.UnregisteredTaskManagerJobMetricGroup();
        ExecutionAttemptID executionAttemptID0 = new ExecutionAttemptID();
        TaskMetricGroup taskMetricGroup0 =
                unregisteredMetricGroups_UnregisteredTaskManagerJobMetricGroup0.addTask(
                        (JobVertexID) null, executionAttemptID0, "NONE", (-3092), (-378));
        Map<String, String> map0 = taskMetricGroup0.getAllVariables();
        RowDeserializationSchema rowDeserializationSchema0 = null;
        try {
            rowDeserializationSchema0 =
                    new RowDeserializationSchema(
                            tableSchema0,
                            dirtyDataStrategy0,
                            dirtyDataStrategy0,
                            dirtyDataStrategy0,
                            "",
                            "",
                            "qZX",
                            false,
                            false,
                            rowDeserializationSchema_MetadataConverterArray0,
                            (List<String>) null,
                            map0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.source.reader.deserializer.RowDeserializationSchema",
                    e);
        }
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        RowDeserializationSchema.MetadataCollector rowDeserializationSchema_MetadataCollector0 =
                new RowDeserializationSchema.MetadataCollector(
                        false, (RowDeserializationSchema.MetadataConverter[]) null);
        // Undeclared exception!
        try {
            rowDeserializationSchema_MetadataCollector0.collect((RowData) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.source.reader.deserializer.RowDeserializationSchema$MetadataCollector",
                    e);
        }
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        UnregisteredMetricGroups.UnregisteredTaskManagerJobMetricGroup
                unregisteredMetricGroups_UnregisteredTaskManagerJobMetricGroup0 =
                        new UnregisteredMetricGroups.UnregisteredTaskManagerJobMetricGroup();
        ExecutionAttemptID executionAttemptID0 = new ExecutionAttemptID();
        TaskMetricGroup taskMetricGroup0 =
                unregisteredMetricGroups_UnregisteredTaskManagerJobMetricGroup0.addTask(
                        (JobVertexID) null, executionAttemptID0, "", (-2649), (-2649));
        InternalOperatorMetricGroup internalOperatorMetricGroup0 =
                taskMetricGroup0.getOrAddOperator((OperatorID) null, "");
        Map<String, String> map0 = internalOperatorMetricGroup0.getAllVariables();
        DirtyDataStrategy dirtyDataStrategy0 = DirtyDataStrategy.PAD;
        RowDeserializationSchema.MetadataConverter[]
                rowDeserializationSchema_MetadataConverterArray0 =
                        new RowDeserializationSchema.MetadataConverter[0];
        String[] stringArray0 = new String[1];
        TypeInformation<String>[] typeInformationArray0 =
                (TypeInformation<String>[]) Array.newInstance(TypeInformation.class, 0);
        TableSchema tableSchema0 = mock(TableSchema.class, new ViolatedAssumptionAnswer());
        doReturn((Object) stringArray0, (Object) stringArray0).when(tableSchema0).getFieldNames();
        doReturn(typeInformationArray0).when(tableSchema0).getFieldTypes();
        RowDeserializationSchema rowDeserializationSchema0 = null;
        try {
            rowDeserializationSchema0 =
                    new RowDeserializationSchema(
                            tableSchema0,
                            dirtyDataStrategy0,
                            dirtyDataStrategy0,
                            dirtyDataStrategy0,
                            "OnReadAndWrite",
                            (String) null,
                            "$;._U9r(f3<B",
                            false,
                            false,
                            rowDeserializationSchema_MetadataConverterArray0,
                            (List<String>) null,
                            map0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // 0
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.source.reader.deserializer.RowDeserializationSchema",
                    e);
        }
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        RowDeserializationSchema.Builder rowDeserializationSchema_Builder0 =
                new RowDeserializationSchema.Builder();
        UnregisteredMetricGroups.UnregisteredTaskManagerJobMetricGroup
                unregisteredMetricGroups_UnregisteredTaskManagerJobMetricGroup0 =
                        new UnregisteredMetricGroups.UnregisteredTaskManagerJobMetricGroup();
        ExecutionAttemptID executionAttemptID0 = new ExecutionAttemptID();
        TaskMetricGroup taskMetricGroup0 =
                unregisteredMetricGroups_UnregisteredTaskManagerJobMetricGroup0.addTask(
                        (JobVertexID) null, executionAttemptID0, "4", (-2649), (-2649));
        InternalOperatorMetricGroup internalOperatorMetricGroup0 =
                taskMetricGroup0.getOrAddOperator((OperatorID) null, "4");
        Map<String, String> map0 = internalOperatorMetricGroup0.getAllVariables();
        RowDeserializationSchema.Builder rowDeserializationSchema_Builder1 =
                rowDeserializationSchema_Builder0.setProperties(map0);
        assertSame(rowDeserializationSchema_Builder0, rowDeserializationSchema_Builder1);
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        RowDeserializationSchema.Builder rowDeserializationSchema_Builder0 =
                new RowDeserializationSchema.Builder();
        RowDeserializationSchema.Builder rowDeserializationSchema_Builder1 =
                rowDeserializationSchema_Builder0.setProperties((Map<String, String>) null);
        assertSame(rowDeserializationSchema_Builder0, rowDeserializationSchema_Builder1);
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
        RowDeserializationSchema.MetadataConverter[]
                rowDeserializationSchema_MetadataConverterArray0 =
                        new RowDeserializationSchema.MetadataConverter[5];
        RowDeserializationSchema.MetadataConverter rowDeserializationSchema_MetadataConverter0 =
                mock(
                        RowDeserializationSchema.MetadataConverter.class,
                        new ViolatedAssumptionAnswer());
        doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null)
                .when(rowDeserializationSchema_MetadataConverter0)
                .read(
                        any(
                                org.apache.flink.connector.rocketmq.source.reader.deserializer
                                        .BytesMessage.class));
        rowDeserializationSchema_MetadataConverterArray0[0] =
                rowDeserializationSchema_MetadataConverter0;
        rowDeserializationSchema_MetadataConverterArray0[1] =
                rowDeserializationSchema_MetadataConverter0;
        rowDeserializationSchema_MetadataConverterArray0[2] =
                rowDeserializationSchema_MetadataConverter0;
        rowDeserializationSchema_MetadataConverterArray0[3] =
                rowDeserializationSchema_MetadataConverter0;
        rowDeserializationSchema_MetadataConverterArray0[4] =
                rowDeserializationSchema_MetadataConverter0;
        RowDeserializationSchema.MetadataCollector rowDeserializationSchema_MetadataCollector0 =
                new RowDeserializationSchema.MetadataCollector(
                        true, rowDeserializationSchema_MetadataConverterArray0);
        RowKind rowKind0 = RowKind.UPDATE_AFTER;
        GenericRowData genericRowData0 = new GenericRowData(rowKind0, 5600);
        // Undeclared exception!
        try {
            rowDeserializationSchema_MetadataCollector0.collect((RowData) genericRowData0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.source.reader.deserializer.RowDeserializationSchema$MetadataCollector",
                    e);
        }
    }

    @Test(timeout = 4000)
    public void test14() throws Throwable {
        UnregisteredMetricGroups.UnregisteredTaskManagerJobMetricGroup
                unregisteredMetricGroups_UnregisteredTaskManagerJobMetricGroup0 =
                        new UnregisteredMetricGroups.UnregisteredTaskManagerJobMetricGroup();
        ExecutionAttemptID executionAttemptID0 = new ExecutionAttemptID();
        TaskMetricGroup taskMetricGroup0 =
                unregisteredMetricGroups_UnregisteredTaskManagerJobMetricGroup0.addTask(
                        (JobVertexID) null, executionAttemptID0, "", (-2622), (-2622));
        InternalOperatorMetricGroup internalOperatorMetricGroup0 =
                taskMetricGroup0.getOrAddOperator((OperatorID) null, "");
        Map<String, String> map0 = internalOperatorMetricGroup0.getAllVariables();
        DirtyDataStrategy dirtyDataStrategy0 = DirtyDataStrategy.PAD;
        RowDeserializationSchema.MetadataConverter[]
                rowDeserializationSchema_MetadataConverterArray0 =
                        new RowDeserializationSchema.MetadataConverter[0];
        RowDeserializationSchema.MetadataCollector rowDeserializationSchema_MetadataCollector0 =
                new RowDeserializationSchema.MetadataCollector(
                        false, rowDeserializationSchema_MetadataConverterArray0);
        String[] stringArray0 = new String[0];
        TableSchema tableSchema0 = mock(TableSchema.class, new ViolatedAssumptionAnswer());
        doReturn((Object) stringArray0, (Object) null).when(tableSchema0).getFieldNames();
        BytesMessage bytesMessage0 = new BytesMessage();
        rowDeserializationSchema_MetadataCollector0.message = bytesMessage0;
        Stack<String> stack0 = new Stack<String>();
        stack0.add("TaskManager address %s cannot be resolved. %s");
        RowDeserializationSchema rowDeserializationSchema0 =
                new RowDeserializationSchema(
                        tableSchema0,
                        dirtyDataStrategy0,
                        dirtyDataStrategy0,
                        dirtyDataStrategy0,
                        "TaskManager address %s cannot be resolved. %s",
                        "",
                        "",
                        false,
                        false,
                        rowDeserializationSchema_MetadataConverterArray0,
                        stack0,
                        map0);
        Vector<BytesMessage> vector0 = new Vector<BytesMessage>();
        vector0.add(rowDeserializationSchema_MetadataCollector0.message);
        // Undeclared exception!
        try {
            rowDeserializationSchema0.deserialize(
                    (List<BytesMessage>) vector0,
                    (Collector<RowData>) rowDeserializationSchema_MetadataCollector0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.source.reader.deserializer.RowDeserializationSchema",
                    e);
        }
    }

    @Test(timeout = 4000)
    public void test15() throws Throwable {
        UnregisteredMetricGroups.UnregisteredTaskManagerJobMetricGroup
                unregisteredMetricGroups_UnregisteredTaskManagerJobMetricGroup0 =
                        new UnregisteredMetricGroups.UnregisteredTaskManagerJobMetricGroup();
        ExecutionAttemptID executionAttemptID0 = new ExecutionAttemptID();
        TaskMetricGroup taskMetricGroup0 =
                unregisteredMetricGroups_UnregisteredTaskManagerJobMetricGroup0.addTask(
                        (JobVertexID) null, executionAttemptID0, "", (-2622), (-2622));
        InternalOperatorMetricGroup internalOperatorMetricGroup0 =
                taskMetricGroup0.getOrAddOperator((OperatorID) null, "");
        Map<String, String> map0 = internalOperatorMetricGroup0.getAllVariables();
        DirtyDataStrategy dirtyDataStrategy0 = DirtyDataStrategy.PAD;
        RowDeserializationSchema.MetadataConverter[]
                rowDeserializationSchema_MetadataConverterArray0 =
                        new RowDeserializationSchema.MetadataConverter[0];
        RowDeserializationSchema.MetadataCollector rowDeserializationSchema_MetadataCollector0 =
                new RowDeserializationSchema.MetadataCollector(
                        false, rowDeserializationSchema_MetadataConverterArray0);
        String[] stringArray0 = new String[0];
        TableSchema tableSchema0 = mock(TableSchema.class, new ViolatedAssumptionAnswer());
        doReturn((Object) stringArray0, (Object) stringArray0).when(tableSchema0).getFieldNames();
        Stack<String> stack0 = new Stack<String>();
        stack0.add("TaskManager address %s cannot be resolved. %s");
        RowDeserializationSchema rowDeserializationSchema0 =
                new RowDeserializationSchema(
                        tableSchema0,
                        dirtyDataStrategy0,
                        dirtyDataStrategy0,
                        dirtyDataStrategy0,
                        "TaskManager address %s cannot be resolved. %s",
                        "",
                        "",
                        false,
                        false,
                        rowDeserializationSchema_MetadataConverterArray0,
                        stack0,
                        map0);
        Vector<BytesMessage> vector0 = new Vector<BytesMessage>();
        vector0.add(rowDeserializationSchema_MetadataCollector0.message);
        // Undeclared exception!
        try {
            rowDeserializationSchema0.deserialize(
                    (List<BytesMessage>) vector0,
                    (Collector<RowData>) rowDeserializationSchema_MetadataCollector0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.source.reader.deserializer.RowDeserializationSchema",
                    e);
        }
    }

    @Test(timeout = 4000)
    public void test16() throws Throwable {
        UnregisteredMetricGroups.UnregisteredTaskManagerJobMetricGroup
                unregisteredMetricGroups_UnregisteredTaskManagerJobMetricGroup0 =
                        new UnregisteredMetricGroups.UnregisteredTaskManagerJobMetricGroup();
        ExecutionAttemptID executionAttemptID0 = new ExecutionAttemptID();
        TaskMetricGroup taskMetricGroup0 =
                unregisteredMetricGroups_UnregisteredTaskManagerJobMetricGroup0.addTask(
                        (JobVertexID) null, executionAttemptID0, "", (-2649), (-2649));
        InternalOperatorMetricGroup internalOperatorMetricGroup0 =
                taskMetricGroup0.getOrAddOperator((OperatorID) null, "");
        Map<String, String> map0 = internalOperatorMetricGroup0.getAllVariables();
        DirtyDataStrategy dirtyDataStrategy0 = DirtyDataStrategy.PAD;
        RowDeserializationSchema.MetadataConverter[]
                rowDeserializationSchema_MetadataConverterArray0 =
                        new RowDeserializationSchema.MetadataConverter[0];
        RowDeserializationSchema.MetadataCollector rowDeserializationSchema_MetadataCollector0 =
                new RowDeserializationSchema.MetadataCollector(
                        false, rowDeserializationSchema_MetadataConverterArray0);
        String[] stringArray0 = new String[0];
        TableSchema tableSchema0 = mock(TableSchema.class, new ViolatedAssumptionAnswer());
        doReturn(stringArray0).when(tableSchema0).getFieldNames();
        Stack<String> stack0 = new Stack<String>();
        RowDeserializationSchema rowDeserializationSchema0 =
                new RowDeserializationSchema(
                        tableSchema0,
                        dirtyDataStrategy0,
                        dirtyDataStrategy0,
                        dirtyDataStrategy0,
                        "TaskManager address %s cannot be resolved. %s",
                        "L",
                        "",
                        false,
                        false,
                        rowDeserializationSchema_MetadataConverterArray0,
                        stack0,
                        map0);
        Vector<BytesMessage> vector0 = new Vector<BytesMessage>();
        rowDeserializationSchema0.deserialize(
                (List<BytesMessage>) vector0,
                (Collector<RowData>) rowDeserializationSchema_MetadataCollector0);
        assertEquals(0, vector0.size());
    }

    @Test(timeout = 4000)
    public void test17() throws Throwable {
        UnregisteredMetricGroups.UnregisteredTaskManagerJobMetricGroup
                unregisteredMetricGroups_UnregisteredTaskManagerJobMetricGroup0 =
                        new UnregisteredMetricGroups.UnregisteredTaskManagerJobMetricGroup();
        ExecutionAttemptID executionAttemptID0 = new ExecutionAttemptID();
        TaskMetricGroup taskMetricGroup0 =
                unregisteredMetricGroups_UnregisteredTaskManagerJobMetricGroup0.addTask(
                        (JobVertexID) null, executionAttemptID0, "4", (-2649), (-2649));
        InternalOperatorMetricGroup internalOperatorMetricGroup0 =
                taskMetricGroup0.getOrAddOperator((OperatorID) null, "4");
        Map<String, String> map0 = internalOperatorMetricGroup0.getAllVariables();
        DirtyDataStrategy dirtyDataStrategy0 = DirtyDataStrategy.PAD;
        RowDeserializationSchema.MetadataConverter[]
                rowDeserializationSchema_MetadataConverterArray0 =
                        new RowDeserializationSchema.MetadataConverter[0];
        RowDeserializationSchema.MetadataCollector rowDeserializationSchema_MetadataCollector0 =
                new RowDeserializationSchema.MetadataCollector(
                        false, rowDeserializationSchema_MetadataConverterArray0);
        String[] stringArray0 = new String[0];
        TableSchema tableSchema0 = mock(TableSchema.class, new ViolatedAssumptionAnswer());
        doReturn(stringArray0).when(tableSchema0).getFieldNames();
        Stack<String> stack0 = new Stack<String>();
        RowDeserializationSchema rowDeserializationSchema0 =
                new RowDeserializationSchema(
                        tableSchema0,
                        dirtyDataStrategy0,
                        dirtyDataStrategy0,
                        dirtyDataStrategy0,
                        "TaskManager address %s cannot be resolved. %s",
                        "L",
                        "4",
                        false,
                        false,
                        rowDeserializationSchema_MetadataConverterArray0,
                        stack0,
                        map0);
        rowDeserializationSchema0.deserialize(
                (List<BytesMessage>) null,
                (Collector<RowData>) rowDeserializationSchema_MetadataCollector0);
    }

    @Test(timeout = 4000)
    public void test18() throws Throwable {
        UnregisteredMetricGroups.UnregisteredTaskManagerJobMetricGroup
                unregisteredMetricGroups_UnregisteredTaskManagerJobMetricGroup0 =
                        new UnregisteredMetricGroups.UnregisteredTaskManagerJobMetricGroup();
        ExecutionAttemptID executionAttemptID0 = new ExecutionAttemptID();
        TaskMetricGroup taskMetricGroup0 =
                unregisteredMetricGroups_UnregisteredTaskManagerJobMetricGroup0.addTask(
                        (JobVertexID) null, executionAttemptID0, "", (-2649), (-2649));
        InternalOperatorMetricGroup internalOperatorMetricGroup0 =
                taskMetricGroup0.getOrAddOperator((OperatorID) null, "");
        Map<String, String> map0 = internalOperatorMetricGroup0.getAllVariables();
        DirtyDataStrategy dirtyDataStrategy0 = DirtyDataStrategy.PAD;
        RowDeserializationSchema.MetadataConverter[]
                rowDeserializationSchema_MetadataConverterArray0 =
                        new RowDeserializationSchema.MetadataConverter[0];
        String[] stringArray0 = new String[0];
        TableSchema tableSchema0 = mock(TableSchema.class, new ViolatedAssumptionAnswer());
        doReturn(stringArray0).when(tableSchema0).getFieldNames();
        Stack<String> stack0 = new Stack<String>();
        RowDeserializationSchema rowDeserializationSchema0 =
                new RowDeserializationSchema(
                        tableSchema0,
                        dirtyDataStrategy0,
                        dirtyDataStrategy0,
                        dirtyDataStrategy0,
                        "TaskManager address %s cannot be resolved. %s",
                        "L",
                        "",
                        false,
                        false,
                        rowDeserializationSchema_MetadataConverterArray0,
                        stack0,
                        map0);
        DeserializationSchema.InitializationContext deserializationSchema_InitializationContext0 =
                mock(
                        DeserializationSchema.InitializationContext.class,
                        new ViolatedAssumptionAnswer());
        // Undeclared exception!
        try {
            rowDeserializationSchema0.open(deserializationSchema_InitializationContext0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // Property with key 'schema' could not be found. This is a bug because the validation
            // logic should have checked that before.
            //
            verifyException("org.apache.flink.table.descriptors.DescriptorProperties", e);
        }
    }

    @Test(timeout = 4000)
    public void test19() throws Throwable {
        UnregisteredMetricGroups.UnregisteredTaskManagerJobMetricGroup
                unregisteredMetricGroups_UnregisteredTaskManagerJobMetricGroup0 =
                        new UnregisteredMetricGroups.UnregisteredTaskManagerJobMetricGroup();
        ExecutionAttemptID executionAttemptID0 = new ExecutionAttemptID();
        TaskMetricGroup taskMetricGroup0 =
                unregisteredMetricGroups_UnregisteredTaskManagerJobMetricGroup0.addTask(
                        (JobVertexID) null, executionAttemptID0, "", (-2649), (-2649));
        InternalOperatorMetricGroup internalOperatorMetricGroup0 =
                taskMetricGroup0.getOrAddOperator((OperatorID) null, "");
        Map<String, String> map0 = internalOperatorMetricGroup0.getAllVariables();
        DirtyDataStrategy dirtyDataStrategy0 = DirtyDataStrategy.PAD;
        RowDeserializationSchema.MetadataConverter[]
                rowDeserializationSchema_MetadataConverterArray0 =
                        new RowDeserializationSchema.MetadataConverter[0];
        String[] stringArray0 = new String[0];
        BinaryType binaryType0 = BinaryType.ofEmptyLiteral();
        DataType dataType0 = mock(DataType.class, new ViolatedAssumptionAnswer());
        doReturn(binaryType0).when(dataType0).getLogicalType();
        TableSchema tableSchema0 = mock(TableSchema.class, new ViolatedAssumptionAnswer());
        doReturn(stringArray0).when(tableSchema0).getFieldNames();
        doReturn(dataType0).when(tableSchema0).toRowDataType();
        Stack<String> stack0 = new Stack<String>();
        RowDeserializationSchema rowDeserializationSchema0 =
                new RowDeserializationSchema(
                        tableSchema0,
                        dirtyDataStrategy0,
                        dirtyDataStrategy0,
                        dirtyDataStrategy0,
                        "TaskManager address %s cannot be resolved. %s",
                        "L",
                        "",
                        false,
                        false,
                        rowDeserializationSchema_MetadataConverterArray0,
                        stack0,
                        map0);
        // Undeclared exception!
        try {
            rowDeserializationSchema0.getProducedType();
            fail("Expecting exception: ClassCastException");

        } catch (ClassCastException e) {
            //
            // org.apache.flink.table.types.logical.BinaryType cannot be cast to
            // org.apache.flink.table.types.logical.RowType
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.source.reader.deserializer.RowDeserializationSchema",
                    e);
        }
    }

    @Test(timeout = 4000)
    public void test20() throws Throwable {
        RowDeserializationSchema.CollectorOption rowDeserializationSchema_CollectorOption0 =
                new RowDeserializationSchema.CollectorOption();
    }

    @Test(timeout = 4000)
    public void test21() throws Throwable {
        RowDeserializationSchema.Builder rowDeserializationSchema_Builder0 =
                new RowDeserializationSchema.Builder();
        RowDeserializationSchema.Builder rowDeserializationSchema_Builder1 =
                rowDeserializationSchema_Builder0.setHasMetadata(false);
        assertSame(rowDeserializationSchema_Builder1, rowDeserializationSchema_Builder0);
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        RowDeserializationSchema.Builder rowDeserializationSchema_Builder0 =
                new RowDeserializationSchema.Builder();
        DirtyDataStrategy dirtyDataStrategy0 = DirtyDataStrategy.NULL;
        RowDeserializationSchema.Builder rowDeserializationSchema_Builder1 =
                rowDeserializationSchema_Builder0.setFormatErrorStrategy(dirtyDataStrategy0);
        assertSame(rowDeserializationSchema_Builder1, rowDeserializationSchema_Builder0);
    }

    @Test(timeout = 4000)
    public void test23() throws Throwable {
        RowDeserializationSchema.Builder rowDeserializationSchema_Builder0 =
                new RowDeserializationSchema.Builder();
        // Undeclared exception!
        try {
            rowDeserializationSchema_Builder0.build();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.source.reader.deserializer.RowDeserializationSchema",
                    e);
        }
    }

    @Test(timeout = 4000)
    public void test24() throws Throwable {
        RowDeserializationSchema.Builder rowDeserializationSchema_Builder0 =
                new RowDeserializationSchema.Builder();
        RowDeserializationSchema.MetadataConverter[]
                rowDeserializationSchema_MetadataConverterArray0 =
                        new RowDeserializationSchema.MetadataConverter[3];
        RowDeserializationSchema.Builder rowDeserializationSchema_Builder1 =
                rowDeserializationSchema_Builder0.setMetadataConverters(
                        rowDeserializationSchema_MetadataConverterArray0);
        assertSame(rowDeserializationSchema_Builder0, rowDeserializationSchema_Builder1);
    }

    @Test(timeout = 4000)
    public void test25() throws Throwable {
        RowDeserializationSchema.Builder rowDeserializationSchema_Builder0 =
                new RowDeserializationSchema.Builder();
        DirtyDataStrategy dirtyDataStrategy0 = DirtyDataStrategy.SKIP_SILENT;
        RowDeserializationSchema.Builder rowDeserializationSchema_Builder1 =
                rowDeserializationSchema_Builder0.setFieldMissingStrategy(dirtyDataStrategy0);
        assertSame(rowDeserializationSchema_Builder0, rowDeserializationSchema_Builder1);
    }

    @Test(timeout = 4000)
    public void test26() throws Throwable {
        RowDeserializationSchema.Builder rowDeserializationSchema_Builder0 =
                new RowDeserializationSchema.Builder();
        DirtyDataStrategy dirtyDataStrategy0 = DirtyDataStrategy.PAD;
        RowDeserializationSchema.Builder rowDeserializationSchema_Builder1 =
                rowDeserializationSchema_Builder0.setFieldIncrementStrategy(dirtyDataStrategy0);
        assertSame(rowDeserializationSchema_Builder1, rowDeserializationSchema_Builder0);
    }

    @Test(timeout = 4000)
    public void test27() throws Throwable {
        RowDeserializationSchema.Builder rowDeserializationSchema_Builder0 =
                new RowDeserializationSchema.Builder();
        Vector<String> vector0 = new Vector<String>();
        RowDeserializationSchema.Builder rowDeserializationSchema_Builder1 =
                rowDeserializationSchema_Builder0.setHeaderFields(vector0);
        assertSame(rowDeserializationSchema_Builder0, rowDeserializationSchema_Builder1);
    }

    @Test(timeout = 4000)
    public void test28() throws Throwable {
        RowDeserializationSchema.MetadataConverter[]
                rowDeserializationSchema_MetadataConverterArray0 =
                        new RowDeserializationSchema.MetadataConverter[2];
        RowDeserializationSchema.MetadataCollector rowDeserializationSchema_MetadataCollector0 =
                new RowDeserializationSchema.MetadataCollector(
                        false, rowDeserializationSchema_MetadataConverterArray0);
        rowDeserializationSchema_MetadataCollector0.close();
    }
}
