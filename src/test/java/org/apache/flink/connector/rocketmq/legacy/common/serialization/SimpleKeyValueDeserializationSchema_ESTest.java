/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 26 11:45:44 GMT 2025
 */

package org.apache.flink.connector.rocketmq.legacy.common.serialization;

import org.apache.flink.api.common.typeinfo.TypeInformation;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.Map;

import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
        mockJVMNonDeterminism = true,
        useVFS = true,
        useVNET = true,
        resetStaticState = true,
        separateClassLoader = true,
        useJEE = true)
public class SimpleKeyValueDeserializationSchema_ESTest
        extends SimpleKeyValueDeserializationSchema_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0() throws Throwable {
        SimpleKeyValueDeserializationSchema simpleKeyValueDeserializationSchema0 =
                new SimpleKeyValueDeserializationSchema(
                        "org.apache.flink.api.common.typeinfo.TypeHint",
                        "org.apache.flink.api.common.typeinfo.TypeHint");
        byte[] byteArray0 = new byte[3];
        Map<String, String> map0 =
                simpleKeyValueDeserializationSchema0.deserializeKeyAndValue(
                        byteArray0, (byte[]) null);
        assertEquals(1, map0.size());
    }

    @Test(timeout = 4000)
    public void test1() throws Throwable {
        SimpleKeyValueDeserializationSchema simpleKeyValueDeserializationSchema0 =
                new SimpleKeyValueDeserializationSchema();
        byte[] byteArray0 = new byte[0];
        Map<String, String> map0 =
                simpleKeyValueDeserializationSchema0.deserializeKeyAndValue(
                        (byte[]) null, byteArray0);
        assertEquals(2, map0.size());
    }

    @Test(timeout = 4000)
    public void test2() throws Throwable {
        SimpleKeyValueDeserializationSchema simpleKeyValueDeserializationSchema0 =
                new SimpleKeyValueDeserializationSchema((String) null, (String) null);
        Map<String, String> map0 =
                simpleKeyValueDeserializationSchema0.deserializeKeyAndValue(
                        (byte[]) null, (byte[]) null);
        assertEquals(0, map0.size());
    }

    @Test(timeout = 4000)
    public void test3() throws Throwable {
        SimpleKeyValueDeserializationSchema simpleKeyValueDeserializationSchema0 =
                new SimpleKeyValueDeserializationSchema("1A0^r![B4FIK", "1A0^r![B4FIK");
        TypeInformation<Map<String, String>> typeInformation0 =
                simpleKeyValueDeserializationSchema0.getProducedType();
        assertNotNull(typeInformation0);
    }
}
