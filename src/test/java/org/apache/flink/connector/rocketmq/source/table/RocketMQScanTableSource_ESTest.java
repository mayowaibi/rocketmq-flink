/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 26 11:46:58 GMT 2025
 */

package org.apache.flink.connector.rocketmq.source.table;

import org.apache.flink.api.common.typeinfo.TypeInformation;
import org.apache.flink.table.api.TableSchema;
import org.apache.flink.table.connector.ChangelogMode;
import org.apache.flink.table.connector.source.DynamicTableSource;
import org.apache.flink.table.connector.source.ScanTableSource;
import org.apache.flink.table.descriptors.DescriptorProperties;
import org.apache.flink.table.types.AtomicDataType;
import org.apache.flink.table.types.DataType;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.lang.reflect.Array;
import java.util.List;
import java.util.Map;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
        mockJVMNonDeterminism = true,
        useVFS = true,
        useVNET = true,
        resetStaticState = true,
        separateClassLoader = true,
        useJEE = true)
public class RocketMQScanTableSource_ESTest extends RocketMQScanTableSource_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0() throws Throwable {
        DescriptorProperties descriptorProperties0 =
                mock(DescriptorProperties.class, new ViolatedAssumptionAnswer());
        doReturn((Map) null).when(descriptorProperties0).asMap();
        String[] stringArray0 = new String[1];
        TypeInformation<Object>[] typeInformationArray0 =
                (TypeInformation<Object>[]) Array.newInstance(TypeInformation.class, 0);
        TableSchema tableSchema0 = mock(TableSchema.class, new ViolatedAssumptionAnswer());
        doReturn((Object) stringArray0, (Object) stringArray0).when(tableSchema0).getFieldNames();
        doReturn(typeInformationArray0).when(tableSchema0).getFieldTypes();
        RocketMQScanTableSource rocketMQScanTableSource0 =
                new RocketMQScanTableSource(
                        60000L,
                        descriptorProperties0,
                        tableSchema0,
                        "metadata",
                        "data-type",
                        "type",
                        "virtual",
                        "strategy.data-type",
                        "",
                        "partition.keys",
                        0L,
                        60000L,
                        60000L,
                        0L,
                        "partition.keys",
                        0L,
                        false);
        ScanTableSource.ScanContext scanTableSource_ScanContext0 =
                mock(ScanTableSource.ScanContext.class, new ViolatedAssumptionAnswer());
        // Undeclared exception!
        try {
            rocketMQScanTableSource0.getScanRuntimeProvider(scanTableSource_ScanContext0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // 0
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.legacy.common.serialization.RowKeyValueDeserializationSchema",
                    e);
        }
    }

    @Test(timeout = 4000)
    public void test1() throws Throwable {
        DescriptorProperties descriptorProperties0 =
                mock(DescriptorProperties.class, new ViolatedAssumptionAnswer());
        TableSchema tableSchema0 = mock(TableSchema.class, new ViolatedAssumptionAnswer());
        RocketMQScanTableSource rocketMQScanTableSource0 =
                new RocketMQScanTableSource(
                        0L,
                        descriptorProperties0,
                        tableSchema0,
                        "primary-key.name",
                        "watermark",
                        "name",
                        "]=>6gKA",
                        "]=>6gKA",
                        "virtual",
                        "data-type",
                        0L,
                        0L,
                        0L,
                        0L,
                        "virtual",
                        0L,
                        true);
        ScanTableSource.ScanContext scanTableSource_ScanContext0 =
                mock(ScanTableSource.ScanContext.class, new ViolatedAssumptionAnswer());
        ScanTableSource.ScanRuntimeProvider scanTableSource_ScanRuntimeProvider0 =
                rocketMQScanTableSource0.getScanRuntimeProvider(scanTableSource_ScanContext0);
        assertNotNull(scanTableSource_ScanRuntimeProvider0);
    }

    @Test(timeout = 4000)
    public void test2() throws Throwable {
        DescriptorProperties descriptorProperties0 =
                mock(DescriptorProperties.class, new ViolatedAssumptionAnswer());
        doReturn((Map) null).when(descriptorProperties0).asMap();
        String[] stringArray0 = new String[1];
        TableSchema tableSchema0 = mock(TableSchema.class, new ViolatedAssumptionAnswer());
        doReturn((Object) stringArray0, (Object) null).when(tableSchema0).getFieldNames();
        RocketMQScanTableSource rocketMQScanTableSource0 =
                new RocketMQScanTableSource(
                        (-1412L),
                        descriptorProperties0,
                        tableSchema0,
                        "metadata",
                        "data-type",
                        "type",
                        "virtual",
                        "strategy.data-type",
                        "",
                        "partition.keys",
                        (-1412L),
                        (-1412L),
                        (-1412L),
                        (-1412L),
                        "partition.keys",
                        (-1412L),
                        false);
        ScanTableSource.ScanContext scanTableSource_ScanContext0 =
                mock(ScanTableSource.ScanContext.class, new ViolatedAssumptionAnswer());
        // Undeclared exception!
        try {
            rocketMQScanTableSource0.getScanRuntimeProvider(scanTableSource_ScanContext0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.legacy.common.serialization.RowKeyValueDeserializationSchema",
                    e);
        }
    }

    @Test(timeout = 4000)
    public void test3() throws Throwable {
        DescriptorProperties descriptorProperties0 =
                mock(DescriptorProperties.class, new ViolatedAssumptionAnswer());
        TableSchema tableSchema0 = mock(TableSchema.class, new ViolatedAssumptionAnswer());
        RocketMQScanTableSource rocketMQScanTableSource0 =
                new RocketMQScanTableSource(
                        0L,
                        descriptorProperties0,
                        tableSchema0,
                        "primary-key.name",
                        "watermark",
                        "name",
                        "]=>6gKA",
                        "]=>6gKA",
                        "virtual",
                        "data-type",
                        0L,
                        0L,
                        0L,
                        0L,
                        "virtual",
                        0L,
                        true);
        Map<String, DataType> map0 = rocketMQScanTableSource0.listReadableMetadata();
        assertEquals(1, map0.size());
    }

    @Test(timeout = 4000)
    public void test4() throws Throwable {
        DescriptorProperties descriptorProperties0 =
                mock(DescriptorProperties.class, new ViolatedAssumptionAnswer());
        TableSchema tableSchema0 = mock(TableSchema.class, new ViolatedAssumptionAnswer());
        RocketMQScanTableSource rocketMQScanTableSource0 =
                new RocketMQScanTableSource(
                        (-1412L),
                        descriptorProperties0,
                        tableSchema0,
                        "metadata",
                        "data-type",
                        "type",
                        "virtual",
                        "strategy.data-type",
                        "",
                        "partition.keys",
                        (-1412L),
                        (-1412L),
                        (-1412L),
                        (-1412L),
                        "partition.keys",
                        (-1412L),
                        false);
        String string0 = rocketMQScanTableSource0.asSummaryString();
        assertEquals(
                "org.apache.flink.connector.rocketmq.source.table.RocketMQScanTableSource",
                string0);
    }

    @Test(timeout = 4000)
    public void test5() throws Throwable {
        DescriptorProperties descriptorProperties0 =
                mock(DescriptorProperties.class, new ViolatedAssumptionAnswer());
        TableSchema tableSchema0 = mock(TableSchema.class, new ViolatedAssumptionAnswer());
        RocketMQScanTableSource rocketMQScanTableSource0 =
                new RocketMQScanTableSource(
                        (-1412L),
                        descriptorProperties0,
                        tableSchema0,
                        "metadata",
                        "data-type",
                        "type",
                        "virtual",
                        "strategy.data-type",
                        "",
                        "partition.keys",
                        (-1412L),
                        (-1412L),
                        (-1412L),
                        (-1412L),
                        "partition.keys",
                        (-1412L),
                        false);
        DynamicTableSource dynamicTableSource0 = rocketMQScanTableSource0.copy();
        assertNotSame(dynamicTableSource0, rocketMQScanTableSource0);
    }

    @Test(timeout = 4000)
    public void test6() throws Throwable {
        DescriptorProperties descriptorProperties0 =
                mock(DescriptorProperties.class, new ViolatedAssumptionAnswer());
        TableSchema tableSchema0 = mock(TableSchema.class, new ViolatedAssumptionAnswer());
        RocketMQScanTableSource rocketMQScanTableSource0 =
                new RocketMQScanTableSource(
                        0L,
                        descriptorProperties0,
                        tableSchema0,
                        "primary-key.name",
                        "watermark",
                        "name",
                        "]=>6gKA",
                        "]=>6gKA",
                        "virtual",
                        "data-type",
                        0L,
                        0L,
                        0L,
                        0L,
                        "virtual",
                        0L,
                        true);
        RocketMQScanTableSource.ReadableMetadata rocketMQScanTableSource_ReadableMetadata0 =
                RocketMQScanTableSource.ReadableMetadata.TOPIC;
        AtomicDataType atomicDataType0 =
                (AtomicDataType) rocketMQScanTableSource_ReadableMetadata0.dataType;
        rocketMQScanTableSource0.applyReadableMetadata((List<String>) null, atomicDataType0);
        assertTrue(rocketMQScanTableSource0.supportsMetadataProjection());
    }

    @Test(timeout = 4000)
    public void test7() throws Throwable {
        DescriptorProperties descriptorProperties0 =
                mock(DescriptorProperties.class, new ViolatedAssumptionAnswer());
        TableSchema tableSchema0 = mock(TableSchema.class, new ViolatedAssumptionAnswer());
        RocketMQScanTableSource rocketMQScanTableSource0 =
                new RocketMQScanTableSource(
                        0L,
                        descriptorProperties0,
                        tableSchema0,
                        "primary-key.name",
                        "watermark",
                        "name",
                        "]=>6gKA",
                        "]=>6gKA",
                        "virtual",
                        "data-type",
                        0L,
                        0L,
                        0L,
                        0L,
                        "virtual",
                        0L,
                        true);
        ChangelogMode changelogMode0 = rocketMQScanTableSource0.getChangelogMode();
        assertNotNull(changelogMode0);
    }
}
