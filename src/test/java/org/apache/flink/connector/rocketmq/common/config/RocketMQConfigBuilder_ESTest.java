/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 26 11:40:26 GMT 2025
 */

package org.apache.flink.connector.rocketmq.common.config;

import org.apache.flink.configuration.ConfigOption;
import org.apache.flink.configuration.Configuration;

import com.google.common.base.Converter;
import com.google.common.base.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.time.ZoneId;
import java.time.chrono.IsoEra;
import java.util.AbstractMap;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
        mockJVMNonDeterminism = true,
        useVFS = true,
        useVNET = true,
        resetStaticState = true,
        separateClassLoader = true,
        useJEE = true)
public class RocketMQConfigBuilder_ESTest extends RocketMQConfigBuilder_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        RocketMQConfigBuilder rocketMQConfigBuilder0 = new RocketMQConfigBuilder();
        ConfigOption<IsoEra> configOption0 =
                (ConfigOption<IsoEra>) mock(ConfigOption.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(configOption0).hasFallbackKeys();
        doReturn("1oSHNwj5bTE\"M", "1oSHNwj5bTE\"M").when(configOption0).key();
        IsoEra isoEra0 = IsoEra.CE;
        rocketMQConfigBuilder0.set(configOption0, isoEra0);
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        RocketMQConfigBuilder rocketMQConfigBuilder0 = new RocketMQConfigBuilder();
        Integer integer0 = new Integer(1);
        ConfigOption<Integer> configOption0 =
                (ConfigOption<Integer>) mock(ConfigOption.class, new ViolatedAssumptionAnswer());
        doReturn(integer0).when(configOption0).defaultValue();
        doReturn(false).when(configOption0).hasFallbackKeys();
        doReturn("org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel")
                .when(configOption0)
                .key();
        Integer integer1 = rocketMQConfigBuilder0.get(configOption0);
        assertEquals(1, (int) integer1);
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        RocketMQConfigBuilder rocketMQConfigBuilder0 = new RocketMQConfigBuilder();
        Configuration configuration0 = new Configuration();
        ConfigOption<Object> configOption0 =
                (ConfigOption<Object>) mock(ConfigOption.class, new ViolatedAssumptionAnswer());
        doReturn("").when(configOption0).key();
        rocketMQConfigBuilder0.override(configOption0, (Object) configuration0);
        ConfigOption<String> configOption1 =
                (ConfigOption<String>) mock(ConfigOption.class, new ViolatedAssumptionAnswer());
        doReturn("").when(configOption1).key();
        boolean boolean0 = rocketMQConfigBuilder0.contains(configOption1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        RocketMQConfigBuilder rocketMQConfigBuilder0 = new RocketMQConfigBuilder();
        // Undeclared exception!
        try {
            rocketMQConfigBuilder0.set((Configuration) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.common.config.RocketMQConfigBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        RocketMQConfigBuilder rocketMQConfigBuilder0 = new RocketMQConfigBuilder();
        // Undeclared exception!
        try {
            rocketMQConfigBuilder0.set((Properties) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.common.config.RocketMQConfigBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        RocketMQConfigBuilder rocketMQConfigBuilder0 = new RocketMQConfigBuilder();
        // Undeclared exception!
        try {
            rocketMQConfigBuilder0.get((ConfigOption<Object>) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.configuration.ConfigurationUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        RocketMQConfigBuilder rocketMQConfigBuilder0 = new RocketMQConfigBuilder();
        ConfigOption<Object> configOption0 =
                (ConfigOption<Object>) mock(ConfigOption.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(configOption0).key();
        // Undeclared exception!
        try {
            rocketMQConfigBuilder0.get(configOption0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // Key must not be null.
            //
            verifyException("org.apache.flink.configuration.Configuration", e);
        }
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        RocketMQConfigBuilder rocketMQConfigBuilder0 = new RocketMQConfigBuilder();
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        Configuration configuration0 = Configuration.fromMap(hashMap0);
        configuration0.setDouble("", 0.0);
        RocketMQConfiguration rocketMQConfiguration0 = new RocketMQConfiguration(configuration0);
        rocketMQConfigBuilder0.set((Configuration) rocketMQConfiguration0);
        ConfigOption<AbstractMap.SimpleEntry<RocketMQConfiguration, Object>> configOption0 =
                (ConfigOption<AbstractMap.SimpleEntry<RocketMQConfiguration, Object>>)
                        mock(ConfigOption.class, new ViolatedAssumptionAnswer());
        doReturn("", (String) null).when(configOption0).key();
        // Undeclared exception!
        try {
            rocketMQConfigBuilder0.get(configOption0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Could not parse value '0.0' for key 'null'.
            //
            verifyException("org.apache.flink.configuration.Configuration", e);
        }
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        RocketMQConfigBuilder rocketMQConfigBuilder0 = new RocketMQConfigBuilder();
        // Undeclared exception!
        try {
            rocketMQConfigBuilder0.contains(
                    (ConfigOption<
                                    AbstractMap.SimpleEntry<
                                            AbstractMap.SimpleEntry<
                                                    AbstractMap.SimpleEntry, Integer>,
                                            Integer>>)
                            null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.configuration.ConfigurationUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        RocketMQConfigBuilder rocketMQConfigBuilder0 = new RocketMQConfigBuilder();
        RocketMQConfigValidator rocketMQConfigValidator0 =
                mock(RocketMQConfigValidator.class, new ViolatedAssumptionAnswer());
        // Undeclared exception!
        try {
            rocketMQConfigBuilder0.build(rocketMQConfigValidator0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.common.config.RocketMQConfigValidator", e);
        }
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        RocketMQConfigBuilder rocketMQConfigBuilder0 = new RocketMQConfigBuilder();
        Map<String, String> map0 = ZoneId.SHORT_IDS;
        Configuration configuration0 = Configuration.fromMap(map0);
        rocketMQConfigBuilder0.set(configuration0);
        rocketMQConfigBuilder0.set(configuration0);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        RocketMQConfigBuilder rocketMQConfigBuilder0 = new RocketMQConfigBuilder();
        Properties properties0 = new Properties();
        properties0.put("", rocketMQConfigBuilder0);
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        Configuration configuration0 = Configuration.fromMap(hashMap0);
        rocketMQConfigBuilder0.set(properties0);
        configuration0.setDouble("", 0.0);
        // Undeclared exception!
        try {
            rocketMQConfigBuilder0.set(configuration0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Invalid configuration, these keys [] are already exist with different config value.
            //
            verifyException("org.apache.flink.util.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        RocketMQConfigBuilder rocketMQConfigBuilder0 = new RocketMQConfigBuilder();
        ConfigOption<Object> configOption0 =
                (ConfigOption<Object>) mock(ConfigOption.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(configOption0).hasFallbackKeys();
        doReturn((String) null, (String) null).when(configOption0).key();
        // Undeclared exception!
        try {
            rocketMQConfigBuilder0.set(configOption0, (Object) configOption0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // Key must not be null.
            //
            verifyException("org.apache.flink.configuration.Configuration", e);
        }
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
        RocketMQConfigBuilder rocketMQConfigBuilder0 = new RocketMQConfigBuilder();
        Function<Object, RocketMQConfiguration> function0 =
                (Function<Object, RocketMQConfiguration>)
                        mock(Function.class, new ViolatedAssumptionAnswer());
        RocketMQConfigValidator rocketMQConfigValidator0 =
                mock(RocketMQConfigValidator.class, new ViolatedAssumptionAnswer());
        Converter<Configuration, RocketMQConfiguration> converter0 =
                Converter.from(
                        (Function<? super Configuration, ? extends RocketMQConfiguration>)
                                function0,
                        (Function<? super RocketMQConfiguration, ? extends Configuration>)
                                function0);
        // Undeclared exception!
        try {
            rocketMQConfigBuilder0.build(
                    rocketMQConfigValidator0,
                    (java.util.function.Function<Configuration, RocketMQConfiguration>) converter0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.common.config.RocketMQConfigValidator", e);
        }
    }

    @Test(timeout = 4000)
    public void test14() throws Throwable {
        RocketMQConfigBuilder rocketMQConfigBuilder0 = new RocketMQConfigBuilder();
        ConfigOption<Integer> configOption0 =
                (ConfigOption<Integer>) mock(ConfigOption.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(configOption0).defaultValue();
        doReturn(false).when(configOption0).hasFallbackKeys();
        doReturn("\")").when(configOption0).key();
        Integer integer0 = rocketMQConfigBuilder0.get(configOption0);
        assertNull(integer0);
    }

    @Test(timeout = 4000)
    public void test15() throws Throwable {
        RocketMQConfigBuilder rocketMQConfigBuilder0 = new RocketMQConfigBuilder();
        ConfigOption<Object> configOption0 =
                (ConfigOption<Object>) mock(ConfigOption.class, new ViolatedAssumptionAnswer());
        // Undeclared exception!
        try {
            rocketMQConfigBuilder0.override(configOption0, (Object) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.util.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test16() throws Throwable {
        RocketMQConfigBuilder rocketMQConfigBuilder0 = new RocketMQConfigBuilder();
        // Undeclared exception!
        try {
            rocketMQConfigBuilder0.build((RocketMQConfigValidator) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.util.Preconditions", e);
        }
    }
}
