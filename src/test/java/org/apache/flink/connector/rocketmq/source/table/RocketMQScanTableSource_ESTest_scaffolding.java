/**
 * Scaffolding file used to store all the setups needed to run tests automatically generated by
 * EvoSuite Wed Mar 26 11:46:58 GMT 2025
 */
package org.apache.flink.connector.rocketmq.source.table;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.evosuite.runtime.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

import static org.evosuite.shaded.org.mockito.Mockito.*;

@EvoSuiteClassExclude
public class RocketMQScanTableSource_ESTest_scaffolding {

    @org.junit.Rule
    public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr =
            new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

    private static final java.util.Properties defaultProperties =
            (java.util.Properties) java.lang.System.getProperties().clone();

    private org.evosuite.runtime.thread.ThreadStopper threadStopper =
            new org.evosuite.runtime.thread.ThreadStopper(
                    org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);

    @BeforeClass
    public static void initEvoSuiteFramework() {
        org.evosuite.runtime.RuntimeSettings.className =
                "org.apache.flink.connector.rocketmq.source.table.RocketMQScanTableSource";
        org.evosuite.runtime.GuiSupport.initialize();
        org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100;
        org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000;
        org.evosuite.runtime.RuntimeSettings.mockSystemIn = true;
        org.evosuite.runtime.RuntimeSettings.sandboxMode =
                org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED;
        org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT();
        org.evosuite.runtime.classhandling.JDKClassResetter.init();
        setSystemProperties();
        initializeClasses();
        org.evosuite.runtime.Runtime.getInstance().resetRuntime();
        try {
            initMocksToAvoidTimeoutsInTheTests();
        } catch (ClassNotFoundException e) {
        }
    }

    @AfterClass
    public static void clearEvoSuiteFramework() {
        Sandbox.resetDefaultSecurityManager();
        java.lang.System.setProperties((java.util.Properties) defaultProperties.clone());
    }

    @Before
    public void initTestCase() {
        threadStopper.storeCurrentThreads();
        threadStopper.startRecordingTime();
        org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler();
        org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode();
        setSystemProperties();
        org.evosuite.runtime.GuiSupport.setHeadless();
        org.evosuite.runtime.Runtime.getInstance().resetRuntime();
        org.evosuite.runtime.agent.InstrumentingAgent.activate();
    }

    @After
    public void doneWithTestCase() {
        threadStopper.killAndJoinClientThreads();
        org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks();
        org.evosuite.runtime.classhandling.JDKClassResetter.reset();
        resetClasses();
        org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode();
        org.evosuite.runtime.agent.InstrumentingAgent.deactivate();
        org.evosuite.runtime.GuiSupport.restoreHeadlessMode();
    }

    public static void setSystemProperties() {

        java.lang.System.setProperties((java.util.Properties) defaultProperties.clone());
        java.lang.System.setProperty("file.encoding", "UTF-8");
        java.lang.System.setProperty("java.awt.headless", "true");
        java.lang.System.setProperty(
                "java.io.tmpdir", "/var/folders/t3/x2jshcps4n99vnsnf_qb26qm0000gn/T/");
        java.lang.System.setProperty("user.country", "GB");
        java.lang.System.setProperty("user.dir", "/Users/isaac/IdeaProjects/rocketmq-flink");
        java.lang.System.setProperty("user.home", "/Users/isaac");
        java.lang.System.setProperty("user.language", "en");
        java.lang.System.setProperty("user.name", "isaac");
        java.lang.System.setProperty("user.timezone", "America/Toronto");
    }

    private static void initializeClasses() {
        org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(
                RocketMQScanTableSource_ESTest_scaffolding.class.getClassLoader(),
                "org.apache.flink.table.types.DataType",
                "org.apache.commons.lang3.StringEscapeUtils$CsvUnescaper",
                "org.apache.commons.lang3.text.translate.UnicodeUnpairedSurrogateRemover",
                "org.apache.flink.table.types.logical.UserDefinedType",
                "org.apache.rocketmq.remoting.RPCHook",
                "org.apache.flink.table.types.logical.StructuredType",
                "org.apache.flink.table.catalog.ResolvedSchema",
                "org.apache.commons.lang3.text.translate.UnicodeEscaper",
                "org.apache.flink.configuration.MemorySize",
                "org.apache.flink.api.common.typeinfo.TypeHint",
                "org.apache.flink.configuration.WritableConfig",
                "org.apache.flink.table.types.logical.CharType",
                "org.apache.flink.table.types.logical.DecimalType",
                "org.apache.flink.table.catalog.Constraint",
                "org.apache.flink.api.common.state.CheckpointListener",
                "org.apache.flink.configuration.description.TextElement",
                "org.apache.commons.lang3.text.translate.AggregateTranslator",
                "org.apache.flink.api.connector.source.SplitEnumerator",
                "org.apache.flink.core.io.Versioned",
                "org.apache.flink.connector.rocketmq.source.table.RocketMQScanTableSource",
                "org.apache.commons.lang3.StringEscapeUtils",
                "org.apache.commons.lang3.text.translate.OctalUnescaper",
                "org.apache.flink.configuration.FallbackKey",
                "org.apache.flink.api.common.serialization.DeserializationSchema$InitializationContext",
                "org.apache.flink.table.types.logical.LocalZonedTimestampType",
                "org.apache.flink.table.connector.source.DynamicTableSource",
                "org.apache.flink.table.connector.source.DynamicTableSource$Context",
                "org.apache.flink.table.api.TableSchema",
                "org.apache.flink.connector.base.source.reader.splitreader.SplitReader",
                "org.apache.commons.lang3.text.translate.UnicodeUnescaper",
                "org.apache.flink.table.types.logical.NullType",
                "org.apache.flink.core.io.IOReadableWritable",
                "org.apache.flink.metrics.Meter",
                "org.apache.flink.table.runtime.typeutils.InternalTypeInfo",
                "org.apache.flink.connector.rocketmq.source.table.RocketMQScanTableSource$ReadableMetadata$1",
                "org.apache.flink.table.connector.source.SourceProvider",
                "org.apache.flink.api.java.typeutils.ResultTypeQueryable",
                "org.apache.commons.lang3.text.translate.NumericEntityEscaper",
                "org.apache.flink.core.io.SimpleVersionedSerializer",
                "org.apache.flink.configuration.description.BlockElement",
                "org.apache.flink.api.connector.source.Source",
                "org.apache.flink.types.Row",
                "org.apache.flink.table.connector.source.DynamicTableSource$DataStructureConverter",
                "org.apache.flink.metrics.Counter",
                "org.apache.flink.api.common.functions.RichFunction",
                "org.apache.flink.table.types.KeyValueDataType",
                "org.apache.flink.configuration.description.DescriptionElement",
                "org.apache.flink.table.connector.ChangelogMode",
                "org.apache.flink.table.types.logical.TinyIntType",
                "org.apache.flink.table.catalog.Column",
                "org.apache.flink.table.api.TableSchema$1",
                "org.apache.commons.lang3.text.translate.CodePointTranslator",
                "org.apache.flink.connector.base.source.reader.RecordEmitter",
                "org.apache.flink.table.connector.source.ScanTableSource",
                "org.apache.flink.table.types.logical.TimestampType",
                "org.apache.flink.table.connector.source.SourceProvider$1",
                "org.apache.flink.streaming.api.functions.source.SourceFunction",
                "org.apache.flink.table.types.logical.DoubleType",
                "org.apache.flink.configuration.ReadableConfig",
                "org.apache.flink.table.api.TableColumn",
                "org.apache.flink.metrics.Gauge",
                "org.apache.flink.table.connector.ChangelogMode$Builder",
                "org.apache.flink.connector.rocketmq.legacy.RocketMQSourceFunction$1",
                "org.apache.flink.configuration.ConfigOptions$OptionBuilder",
                "org.apache.flink.configuration.ConfigOption",
                "org.apache.flink.connector.rocketmq.legacy.common.serialization.RowKeyValueDeserializationSchema",
                "org.apache.flink.runtime.state.CheckpointListener",
                "org.apache.flink.api.connector.source.SourceReader",
                "org.apache.commons.lang3.text.translate.CharSequenceTranslator",
                "org.apache.flink.table.api.TableException",
                "org.apache.flink.table.api.WatermarkSpec",
                "org.apache.flink.table.types.logical.VarCharType",
                "org.apache.flink.table.types.logical.DateType",
                "org.apache.flink.connector.rocketmq.legacy.common.serialization.RowKeyValueDeserializationSchema$CollectorOption",
                "org.apache.flink.table.types.logical.ArrayType",
                "org.apache.flink.table.types.logical.SmallIntType",
                "org.apache.commons.lang3.text.translate.NumericEntityUnescaper",
                "org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION",
                "org.apache.flink.configuration.ConfigurationUtils",
                "org.apache.flink.types.RowKind",
                "org.apache.flink.table.types.DataTypeVisitor",
                "org.apache.flink.connector.rocketmq.source.reader.deserializer.DirtyDataStrategy",
                "org.apache.flink.table.api.DataTypes$AbstractField",
                "org.apache.flink.table.types.logical.VarBinaryType",
                "org.apache.flink.table.types.logical.LogicalTypeRoot",
                "org.apache.flink.table.types.DataTypeQueryable",
                "org.apache.flink.table.api.TableColumn$MetadataColumn",
                "org.apache.flink.table.types.AtomicDataType",
                "org.apache.flink.configuration.ConfigOptions",
                "org.apache.flink.table.api.Schema",
                "org.apache.flink.table.types.logical.MapType",
                "org.apache.flink.connector.rocketmq.source.table.RocketMQScanTableSource$ReadableMetadata",
                "org.apache.flink.table.types.logical.RawType",
                "org.apache.flink.table.types.logical.BooleanType",
                "org.apache.flink.table.catalog.AbstractConstraint",
                "org.apache.flink.api.common.functions.Function",
                "org.apache.flink.configuration.description.Description",
                "org.apache.flink.table.types.logical.TimeType",
                "org.apache.flink.api.common.typeinfo.TypeInformation",
                "org.apache.flink.connector.rocketmq.legacy.RocketMQSourceFunction",
                "org.apache.flink.streaming.api.checkpoint.CheckpointedFunction",
                "org.apache.flink.connector.rocketmq.source.RocketMQSource",
                "org.apache.flink.configuration.description.TextElement$TextStyle",
                "org.apache.flink.table.connector.source.ScanTableSource$ScanContext",
                "org.apache.flink.util.Preconditions",
                "org.apache.flink.connector.rocketmq.source.reader.deserializer.RowDeserializationSchema$MetadataConverter",
                "org.apache.flink.table.types.logical.LogicalType",
                "org.apache.flink.table.types.CollectionDataType",
                "org.apache.flink.connector.rocketmq.source.util.ByteSerializer$ValueType",
                "org.apache.flink.table.api.ValidationException",
                "org.apache.flink.table.api.TableColumn$PhysicalColumn",
                "org.apache.flink.table.descriptors.DescriptorProperties",
                "org.apache.flink.streaming.api.functions.source.ParallelSourceFunction",
                "org.apache.flink.connector.rocketmq.legacy.common.serialization.RowKeyValueDeserializationSchema$Builder",
                "org.apache.flink.table.api.constraints.UniqueConstraint",
                "org.apache.flink.table.types.logical.BinaryType",
                "org.apache.commons.lang3.text.translate.JavaUnicodeEscaper",
                "org.apache.flink.table.types.logical.IntType",
                "org.apache.flink.connector.rocketmq.legacy.common.serialization.KeyValueDeserializationSchema",
                "org.apache.flink.table.api.constraints.Constraint",
                "org.apache.commons.lang3.ArrayUtils",
                "org.apache.flink.table.types.logical.RowType",
                "org.apache.flink.table.types.logical.FloatType",
                "org.apache.flink.metrics.Metric",
                "org.apache.flink.table.api.DataTypes$Field",
                "org.apache.flink.table.api.Schema$Builder",
                "org.apache.flink.table.types.logical.LogicalTypeFamily",
                "org.apache.flink.table.types.FieldsDataType",
                "org.apache.flink.configuration.description.InlineElement",
                "org.apache.flink.configuration.description.Description$DescriptionBuilder",
                "org.apache.flink.streaming.api.functions.source.RichParallelSourceFunction",
                "org.apache.flink.table.types.AbstractDataType",
                "org.apache.flink.table.types.logical.MultisetType",
                "org.apache.commons.lang3.text.translate.EntityArrays",
                "org.apache.flink.table.data.RowData",
                "org.apache.flink.table.catalog.WatermarkSpec",
                "org.apache.flink.table.types.logical.BigIntType",
                "org.apache.flink.table.connector.RuntimeConverter",
                "org.apache.flink.configuration.Configuration",
                "org.apache.flink.table.api.constraints.AbstractConstraint",
                "org.apache.flink.connector.rocketmq.source.reader.deserializer.RocketMQDeserializationSchema",
                "org.apache.flink.table.api.DataTypes",
                "org.apache.flink.table.api.TableColumn$ComputedColumn",
                "org.apache.flink.table.connector.source.ScanTableSource$ScanRuntimeProvider",
                "org.apache.flink.table.data.StringData",
                "org.apache.commons.lang3.StringEscapeUtils$CsvEscaper",
                "org.apache.flink.table.catalog.UniqueConstraint",
                "org.apache.flink.api.common.ExecutionConfig$GlobalJobParameters",
                "org.apache.commons.lang3.text.translate.LookupTranslator",
                "org.apache.flink.table.connector.source.abilities.SupportsReadingMetadata",
                "org.apache.flink.table.api.TableSchema$Builder",
                "org.apache.flink.table.types.logical.ZonedTimestampType",
                "org.apache.flink.api.common.functions.AbstractRichFunction");
    }

    private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException {
        mock(
                Class.forName(
                        "org.apache.flink.table.api.TableSchema",
                        false,
                        RocketMQScanTableSource_ESTest_scaffolding.class.getClassLoader()));
        mock(
                Class.forName(
                        "org.apache.flink.table.connector.source.ScanTableSource$ScanContext",
                        false,
                        RocketMQScanTableSource_ESTest_scaffolding.class.getClassLoader()));
        mock(
                Class.forName(
                        "org.apache.flink.table.descriptors.DescriptorProperties",
                        false,
                        RocketMQScanTableSource_ESTest_scaffolding.class.getClassLoader()));
    }

    private static void resetClasses() {
        org.evosuite.runtime.classhandling.ClassResetter.getInstance()
                .setClassLoader(RocketMQScanTableSource_ESTest_scaffolding.class.getClassLoader());

        org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
                "org.apache.flink.connector.rocketmq.source.table.RocketMQScanTableSource",
                "org.apache.flink.table.api.DataTypes",
                "org.apache.flink.table.types.DataType",
                "org.apache.flink.table.types.AtomicDataType",
                "org.apache.flink.table.types.logical.LogicalType",
                "org.apache.flink.table.types.logical.LogicalTypeFamily",
                "org.apache.flink.table.types.logical.LogicalTypeRoot",
                "org.apache.flink.util.Preconditions",
                "org.apache.flink.table.types.logical.VarCharType",
                "org.apache.flink.connector.rocketmq.source.table.RocketMQScanTableSource$ReadableMetadata$1",
                "org.apache.flink.connector.rocketmq.source.table.RocketMQScanTableSource$ReadableMetadata",
                "org.apache.flink.types.RowKind",
                "org.apache.flink.table.connector.ChangelogMode$Builder",
                "org.apache.flink.table.connector.ChangelogMode",
                "org.apache.flink.table.descriptors.DescriptorProperties",
                "org.apache.flink.table.api.TableSchema",
                "org.apache.flink.connector.rocketmq.source.RocketMQSource",
                "org.apache.flink.table.connector.source.SourceProvider$1",
                "org.apache.flink.api.common.functions.AbstractRichFunction",
                "org.apache.flink.streaming.api.functions.source.RichParallelSourceFunction",
                "org.apache.flink.connector.rocketmq.legacy.RocketMQSourceFunction",
                "org.apache.flink.connector.rocketmq.legacy.common.serialization.RowKeyValueDeserializationSchema$Builder",
                "org.apache.flink.connector.rocketmq.source.reader.deserializer.DirtyDataStrategy",
                "org.apache.flink.api.common.ExecutionConfig$GlobalJobParameters",
                "org.apache.flink.configuration.Configuration",
                "org.apache.flink.configuration.ConfigOptions",
                "org.apache.flink.configuration.ConfigOptions$OptionBuilder",
                "org.apache.flink.configuration.description.Description",
                "org.apache.flink.configuration.description.Description$DescriptionBuilder",
                "org.apache.flink.configuration.description.TextElement",
                "org.apache.flink.configuration.description.TextElement$TextStyle",
                "org.apache.flink.configuration.ConfigOption",
                "org.apache.flink.connector.rocketmq.legacy.common.serialization.RowKeyValueDeserializationSchema$CollectorOption",
                "org.apache.flink.configuration.ConfigurationUtils",
                "org.apache.flink.connector.rocketmq.legacy.common.serialization.RowKeyValueDeserializationSchema",
                "org.apache.commons.lang3.text.translate.CharSequenceTranslator",
                "org.apache.commons.lang3.text.translate.LookupTranslator",
                "org.apache.commons.lang3.text.translate.EntityArrays",
                "org.apache.commons.lang3.text.translate.AggregateTranslator",
                "org.apache.commons.lang3.ArrayUtils",
                "org.apache.commons.lang3.text.translate.CodePointTranslator",
                "org.apache.commons.lang3.text.translate.UnicodeEscaper",
                "org.apache.commons.lang3.text.translate.JavaUnicodeEscaper",
                "org.apache.commons.lang3.text.translate.NumericEntityEscaper",
                "org.apache.commons.lang3.text.translate.UnicodeUnpairedSurrogateRemover",
                "org.apache.commons.lang3.StringEscapeUtils$CsvEscaper",
                "org.apache.commons.lang3.text.translate.OctalUnescaper",
                "org.apache.commons.lang3.text.translate.UnicodeUnescaper",
                "org.apache.commons.lang3.text.translate.NumericEntityUnescaper",
                "org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION",
                "org.apache.commons.lang3.StringEscapeUtils$CsvUnescaper",
                "org.apache.commons.lang3.StringEscapeUtils");
    }
}
