/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 26 10:34:39 GMT 2025
 */

package org.apache.flink.connector.rocketmq.source.enumerator;

import org.apache.flink.api.connector.source.Boundedness;
import org.apache.flink.api.connector.source.SplitEnumeratorContext;
import org.apache.flink.configuration.Configuration;
import org.apache.flink.connector.rocketmq.common.event.SourceCheckEvent;
import org.apache.flink.connector.rocketmq.common.event.SourceInitAssignEvent;
import org.apache.flink.connector.rocketmq.common.event.SourceReportOffsetEvent;
import org.apache.flink.connector.rocketmq.legacy.common.config.OffsetResetStrategy;
import org.apache.flink.connector.rocketmq.source.enumerator.offset.OffsetsSelector;
import org.apache.flink.connector.rocketmq.source.enumerator.offset.OffsetsSelectorNoStopping;
import org.apache.flink.connector.rocketmq.source.split.RocketMQPartitionSplitSerializer;
import org.apache.flink.connector.rocketmq.source.split.RocketMQSourceSplit;
import org.apache.flink.core.io.SimpleVersionedSerializer;
import org.apache.flink.runtime.operators.coordination.OperatorCoordinator;
import org.apache.flink.runtime.source.coordinator.SourceCoordinatorContext;
import org.apache.flink.runtime.source.coordinator.SourceCoordinatorProvider;

import org.apache.rocketmq.common.message.MessageQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.time.ZoneId;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import java.util.Vector;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
        mockJVMNonDeterminism = true,
        useVFS = true,
        useVNET = true,
        resetStaticState = true,
        separateClassLoader = true,
        useJEE = true)
public class RocketMQSourceEnumerator_ESTest extends RocketMQSourceEnumerator_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        Boundedness boundedness0 = Boundedness.CONTINUOUS_UNBOUNDED;
        Map<String, String> map0 = ZoneId.SHORT_IDS;
        Configuration configuration0 = Configuration.fromMap(map0);
        SourceCoordinatorProvider.CoordinatorExecutorThreadFactory
                sourceCoordinatorProvider_CoordinatorExecutorThreadFactory0 =
                        mock(
                                SourceCoordinatorProvider.CoordinatorExecutorThreadFactory.class,
                                new ViolatedAssumptionAnswer());
        OperatorCoordinator.Context operatorCoordinator_Context0 =
                mock(OperatorCoordinator.Context.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(operatorCoordinator_Context0).currentParallelism();
        RocketMQPartitionSplitSerializer rocketMQPartitionSplitSerializer0 =
                new RocketMQPartitionSplitSerializer();
        SourceCoordinatorContext<RocketMQSourceSplit> sourceCoordinatorContext0 =
                new SourceCoordinatorContext<RocketMQSourceSplit>(
                        sourceCoordinatorProvider_CoordinatorExecutorThreadFactory0,
                        657,
                        operatorCoordinator_Context0,
                        rocketMQPartitionSplitSerializer0);
        RocketMQSourceEnumerator rocketMQSourceEnumerator0 =
                new RocketMQSourceEnumerator(
                        (OffsetsSelector) null,
                        (OffsetsSelector) null,
                        boundedness0,
                        configuration0,
                        sourceCoordinatorContext0);
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        OffsetsSelector offsetsSelector0 = OffsetsSelector.timestamp((-694L));
        Boundedness boundedness0 = Boundedness.BOUNDED;
        Map<String, String> map0 = ZoneId.SHORT_IDS;
        Configuration configuration0 = Configuration.fromMap(map0);
        SourceCoordinatorProvider.CoordinatorExecutorThreadFactory
                sourceCoordinatorProvider_CoordinatorExecutorThreadFactory0 =
                        mock(
                                SourceCoordinatorProvider.CoordinatorExecutorThreadFactory.class,
                                new ViolatedAssumptionAnswer());
        OperatorCoordinator.Context operatorCoordinator_Context0 =
                mock(OperatorCoordinator.Context.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(operatorCoordinator_Context0).currentParallelism();
        RocketMQPartitionSplitSerializer rocketMQPartitionSplitSerializer0 =
                new RocketMQPartitionSplitSerializer();
        SourceCoordinatorContext<RocketMQSourceSplit> sourceCoordinatorContext0 =
                new SourceCoordinatorContext<RocketMQSourceSplit>(
                        sourceCoordinatorProvider_CoordinatorExecutorThreadFactory0,
                        2701,
                        operatorCoordinator_Context0,
                        rocketMQPartitionSplitSerializer0);
        RocketMQSourceEnumerator rocketMQSourceEnumerator0 =
                new RocketMQSourceEnumerator(
                        offsetsSelector0,
                        offsetsSelector0,
                        boundedness0,
                        configuration0,
                        sourceCoordinatorContext0);
        // Undeclared exception!
        try {
            rocketMQSourceEnumerator0.start();
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // RocketMQ consumer started failed.
            //
            verifyException("org.apache.flink.connector.rocketmq.source.InnerConsumerImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        OffsetsSelectorNoStopping offsetsSelectorNoStopping0 = new OffsetsSelectorNoStopping();
        Boundedness boundedness0 = Boundedness.BOUNDED;
        Map<String, String> map0 = ZoneId.SHORT_IDS;
        Configuration configuration0 = Configuration.fromMap(map0);
        SourceCoordinatorProvider.CoordinatorExecutorThreadFactory
                sourceCoordinatorProvider_CoordinatorExecutorThreadFactory0 =
                        mock(
                                SourceCoordinatorProvider.CoordinatorExecutorThreadFactory.class,
                                new ViolatedAssumptionAnswer());
        OperatorCoordinator.Context operatorCoordinator_Context0 =
                mock(OperatorCoordinator.Context.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(operatorCoordinator_Context0).currentParallelism();
        RocketMQPartitionSplitSerializer rocketMQPartitionSplitSerializer0 =
                new RocketMQPartitionSplitSerializer();
        SourceCoordinatorContext<RocketMQSourceSplit> sourceCoordinatorContext0 =
                new SourceCoordinatorContext<RocketMQSourceSplit>(
                        sourceCoordinatorProvider_CoordinatorExecutorThreadFactory0,
                        0,
                        operatorCoordinator_Context0,
                        rocketMQPartitionSplitSerializer0);
        RocketMQSourceEnumerator rocketMQSourceEnumerator0 =
                new RocketMQSourceEnumerator(
                        offsetsSelectorNoStopping0,
                        offsetsSelectorNoStopping0,
                        boundedness0,
                        configuration0,
                        sourceCoordinatorContext0);
        // Undeclared exception!
        try {
            rocketMQSourceEnumerator0.addSplitsBack((List<RocketMQSourceSplit>) null, 5);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.util.HashSet", e);
        }
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        OffsetsSelector offsetsSelector0 = OffsetsSelector.committedOffsets();
        Boundedness boundedness0 = Boundedness.BOUNDED;
        Configuration configuration0 = new Configuration();
        SourceCoordinatorProvider.CoordinatorExecutorThreadFactory
                sourceCoordinatorProvider_CoordinatorExecutorThreadFactory0 =
                        mock(
                                SourceCoordinatorProvider.CoordinatorExecutorThreadFactory.class,
                                new ViolatedAssumptionAnswer());
        OperatorCoordinator.Context operatorCoordinator_Context0 =
                mock(OperatorCoordinator.Context.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0).when(operatorCoordinator_Context0).currentParallelism();
        RocketMQPartitionSplitSerializer rocketMQPartitionSplitSerializer0 =
                new RocketMQPartitionSplitSerializer();
        SourceCoordinatorContext<RocketMQSourceSplit> sourceCoordinatorContext0 =
                new SourceCoordinatorContext<RocketMQSourceSplit>(
                        sourceCoordinatorProvider_CoordinatorExecutorThreadFactory0,
                        0,
                        operatorCoordinator_Context0,
                        rocketMQPartitionSplitSerializer0);
        RocketMQSourceEnumerator rocketMQSourceEnumerator0 =
                new RocketMQSourceEnumerator(
                        offsetsSelector0,
                        offsetsSelector0,
                        boundedness0,
                        configuration0,
                        sourceCoordinatorContext0);
        Vector<RocketMQSourceSplit> vector0 = new Vector<RocketMQSourceSplit>();
        MessageQueue messageQueue0 = new MessageQueue("", "", 154);
        RocketMQSourceSplit rocketMQSourceSplit0 = new RocketMQSourceSplit(messageQueue0, 154, 0);
        vector0.add(rocketMQSourceSplit0);
        // Undeclared exception!
        try {
            rocketMQSourceEnumerator0.addSplitsBack(vector0, 154);
            fail("Expecting exception: ArithmeticException");

        } catch (ArithmeticException e) {
            //
            // / by zero
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.source.enumerator.allocate.ConsistentHashAllocateStrategy",
                    e);
        }
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        OffsetsSelectorNoStopping offsetsSelectorNoStopping0 = new OffsetsSelectorNoStopping();
        Boundedness boundedness0 = Boundedness.BOUNDED;
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        Configuration configuration0 = Configuration.fromMap(hashMap0);
        RocketMQSourceEnumerator rocketMQSourceEnumerator0 =
                new RocketMQSourceEnumerator(
                        offsetsSelectorNoStopping0,
                        offsetsSelectorNoStopping0,
                        boundedness0,
                        configuration0,
                        (SplitEnumeratorContext<RocketMQSourceSplit>) null);
        // Undeclared exception!
        try {
            rocketMQSourceEnumerator0.addReader(8233);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.source.enumerator.RocketMQSourceEnumerator",
                    e);
        }
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        OffsetsSelector offsetsSelector0 = OffsetsSelector.earliest();
        Boundedness boundedness0 = Boundedness.BOUNDED;
        Configuration configuration0 = new Configuration();
        SourceCoordinatorProvider.CoordinatorExecutorThreadFactory
                sourceCoordinatorProvider_CoordinatorExecutorThreadFactory0 =
                        mock(
                                SourceCoordinatorProvider.CoordinatorExecutorThreadFactory.class,
                                new ViolatedAssumptionAnswer());
        OperatorCoordinator.Context operatorCoordinator_Context0 =
                mock(OperatorCoordinator.Context.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(operatorCoordinator_Context0).currentParallelism();
        RocketMQPartitionSplitSerializer rocketMQPartitionSplitSerializer0 =
                new RocketMQPartitionSplitSerializer();
        SourceCoordinatorContext<RocketMQSourceSplit> sourceCoordinatorContext0 =
                new SourceCoordinatorContext<RocketMQSourceSplit>(
                        sourceCoordinatorProvider_CoordinatorExecutorThreadFactory0,
                        559,
                        operatorCoordinator_Context0,
                        rocketMQPartitionSplitSerializer0);
        RocketMQSourceEnumerator rocketMQSourceEnumerator0 = null;
        try {
            rocketMQSourceEnumerator0 =
                    new RocketMQSourceEnumerator(
                            offsetsSelector0,
                            offsetsSelector0,
                            boundedness0,
                            configuration0,
                            sourceCoordinatorContext0,
                            (Set<MessageQueue>) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
        }
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        OffsetsSelector offsetsSelector0 = OffsetsSelector.committedOffsets();
        Boundedness boundedness0 = Boundedness.CONTINUOUS_UNBOUNDED;
        SourceCoordinatorProvider.CoordinatorExecutorThreadFactory
                sourceCoordinatorProvider_CoordinatorExecutorThreadFactory0 =
                        mock(
                                SourceCoordinatorProvider.CoordinatorExecutorThreadFactory.class,
                                new ViolatedAssumptionAnswer());
        OperatorCoordinator.Context operatorCoordinator_Context0 =
                mock(OperatorCoordinator.Context.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(operatorCoordinator_Context0).currentParallelism();
        RocketMQPartitionSplitSerializer rocketMQPartitionSplitSerializer0 =
                new RocketMQPartitionSplitSerializer();
        SourceCoordinatorContext<RocketMQSourceSplit> sourceCoordinatorContext0 =
                new SourceCoordinatorContext<RocketMQSourceSplit>(
                        sourceCoordinatorProvider_CoordinatorExecutorThreadFactory0,
                        1672,
                        operatorCoordinator_Context0,
                        rocketMQPartitionSplitSerializer0);
        RocketMQSourceEnumerator rocketMQSourceEnumerator0 = null;
        try {
            rocketMQSourceEnumerator0 =
                    new RocketMQSourceEnumerator(
                            offsetsSelector0,
                            (OffsetsSelector) null,
                            boundedness0,
                            (Configuration) null,
                            sourceCoordinatorContext0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.source.enumerator.allocate.AllocateStrategyFactory",
                    e);
        }
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        OffsetResetStrategy offsetResetStrategy0 = OffsetResetStrategy.EARLIEST;
        OffsetsSelector offsetsSelector0 = OffsetsSelector.committedOffsets(offsetResetStrategy0);
        Boundedness boundedness0 = Boundedness.CONTINUOUS_UNBOUNDED;
        Map<String, String> map0 = ZoneId.SHORT_IDS;
        Configuration configuration0 = Configuration.fromMap(map0);
        SourceCoordinatorProvider.CoordinatorExecutorThreadFactory
                sourceCoordinatorProvider_CoordinatorExecutorThreadFactory0 =
                        mock(
                                SourceCoordinatorProvider.CoordinatorExecutorThreadFactory.class,
                                new ViolatedAssumptionAnswer());
        OperatorCoordinator.Context operatorCoordinator_Context0 =
                mock(OperatorCoordinator.Context.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(operatorCoordinator_Context0).currentParallelism();
        RocketMQPartitionSplitSerializer rocketMQPartitionSplitSerializer0 =
                new RocketMQPartitionSplitSerializer();
        SourceCoordinatorContext<RocketMQSourceSplit> sourceCoordinatorContext0 =
                new SourceCoordinatorContext<RocketMQSourceSplit>(
                        sourceCoordinatorProvider_CoordinatorExecutorThreadFactory0,
                        935,
                        operatorCoordinator_Context0,
                        rocketMQPartitionSplitSerializer0);
        RocketMQSourceEnumerator rocketMQSourceEnumerator0 =
                new RocketMQSourceEnumerator(
                        offsetsSelector0,
                        offsetsSelector0,
                        boundedness0,
                        configuration0,
                        sourceCoordinatorContext0);
        // Undeclared exception!
        try {
            rocketMQSourceEnumerator0.addReader(0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // Reader 0 is not registered to source coordinator
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.source.enumerator.RocketMQSourceEnumerator",
                    e);
        }
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        OffsetsSelector offsetsSelector0 = OffsetsSelector.committedOffsets();
        Boundedness boundedness0 = Boundedness.BOUNDED;
        Configuration configuration0 = new Configuration();
        SourceCoordinatorProvider.CoordinatorExecutorThreadFactory
                sourceCoordinatorProvider_CoordinatorExecutorThreadFactory0 =
                        mock(
                                SourceCoordinatorProvider.CoordinatorExecutorThreadFactory.class,
                                new ViolatedAssumptionAnswer());
        OperatorCoordinator.Context operatorCoordinator_Context0 =
                mock(OperatorCoordinator.Context.class, new ViolatedAssumptionAnswer());
        doReturn(1, 1868).when(operatorCoordinator_Context0).currentParallelism();
        RocketMQPartitionSplitSerializer rocketMQPartitionSplitSerializer0 =
                new RocketMQPartitionSplitSerializer();
        SourceCoordinatorContext<RocketMQSourceSplit> sourceCoordinatorContext0 =
                new SourceCoordinatorContext<RocketMQSourceSplit>(
                        sourceCoordinatorProvider_CoordinatorExecutorThreadFactory0,
                        0,
                        operatorCoordinator_Context0,
                        rocketMQPartitionSplitSerializer0);
        RocketMQSourceEnumerator rocketMQSourceEnumerator0 =
                new RocketMQSourceEnumerator(
                        offsetsSelector0,
                        offsetsSelector0,
                        boundedness0,
                        configuration0,
                        sourceCoordinatorContext0);
        Vector<RocketMQSourceSplit> vector0 = new Vector<RocketMQSourceSplit>();
        MessageQueue messageQueue0 = new MessageQueue("", "", 154);
        RocketMQSourceSplit rocketMQSourceSplit0 = new RocketMQSourceSplit(messageQueue0, 154, 0);
        vector0.add(rocketMQSourceSplit0);
        rocketMQSourceEnumerator0.addSplitsBack(vector0, 154);
        assertTrue(vector0.contains(rocketMQSourceSplit0));
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        OffsetsSelector offsetsSelector0 = OffsetsSelector.committedOffsets();
        Boundedness boundedness0 = Boundedness.BOUNDED;
        Configuration configuration0 = new Configuration();
        SourceCoordinatorProvider.CoordinatorExecutorThreadFactory
                sourceCoordinatorProvider_CoordinatorExecutorThreadFactory0 =
                        mock(
                                SourceCoordinatorProvider.CoordinatorExecutorThreadFactory.class,
                                new ViolatedAssumptionAnswer());
        OperatorCoordinator.Context operatorCoordinator_Context0 =
                mock(OperatorCoordinator.Context.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(operatorCoordinator_Context0).currentParallelism();
        RocketMQPartitionSplitSerializer rocketMQPartitionSplitSerializer0 =
                new RocketMQPartitionSplitSerializer();
        SourceCoordinatorContext<RocketMQSourceSplit> sourceCoordinatorContext0 =
                new SourceCoordinatorContext<RocketMQSourceSplit>(
                        sourceCoordinatorProvider_CoordinatorExecutorThreadFactory0,
                        0,
                        operatorCoordinator_Context0,
                        rocketMQPartitionSplitSerializer0);
        RocketMQSourceEnumerator rocketMQSourceEnumerator0 =
                new RocketMQSourceEnumerator(
                        offsetsSelector0,
                        offsetsSelector0,
                        boundedness0,
                        configuration0,
                        sourceCoordinatorContext0);
        SourceCheckEvent sourceCheckEvent0 = new SourceCheckEvent();
        rocketMQSourceEnumerator0.handleSourceEvent(154, sourceCheckEvent0);
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        OffsetsSelector offsetsSelector0 = OffsetsSelector.latest();
        Boundedness boundedness0 = Boundedness.CONTINUOUS_UNBOUNDED;
        Configuration configuration0 = new Configuration();
        SourceCoordinatorProvider.CoordinatorExecutorThreadFactory
                sourceCoordinatorProvider_CoordinatorExecutorThreadFactory0 =
                        mock(
                                SourceCoordinatorProvider.CoordinatorExecutorThreadFactory.class,
                                new ViolatedAssumptionAnswer());
        OperatorCoordinator.Context operatorCoordinator_Context0 =
                mock(OperatorCoordinator.Context.class, new ViolatedAssumptionAnswer());
        doReturn(479).when(operatorCoordinator_Context0).currentParallelism();
        SourceCoordinatorContext<RocketMQSourceSplit> sourceCoordinatorContext0 =
                new SourceCoordinatorContext<RocketMQSourceSplit>(
                        sourceCoordinatorProvider_CoordinatorExecutorThreadFactory0,
                        479,
                        operatorCoordinator_Context0,
                        (SimpleVersionedSerializer<RocketMQSourceSplit>) null);
        HashSet<MessageQueue> hashSet0 = new HashSet<MessageQueue>();
        RocketMQSourceEnumerator rocketMQSourceEnumerator0 =
                new RocketMQSourceEnumerator(
                        offsetsSelector0,
                        offsetsSelector0,
                        boundedness0,
                        configuration0,
                        sourceCoordinatorContext0,
                        hashSet0);
        SourceReportOffsetEvent sourceReportOffsetEvent0 = new SourceReportOffsetEvent();
        rocketMQSourceEnumerator0.handleSourceEvent(0, sourceReportOffsetEvent0);
        assertEquals(0, sourceReportOffsetEvent0.getQueueId());
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        OffsetsSelector offsetsSelector0 = OffsetsSelector.latest();
        Boundedness boundedness0 = Boundedness.CONTINUOUS_UNBOUNDED;
        Configuration configuration0 = new Configuration();
        SourceCoordinatorProvider.CoordinatorExecutorThreadFactory
                sourceCoordinatorProvider_CoordinatorExecutorThreadFactory0 =
                        mock(
                                SourceCoordinatorProvider.CoordinatorExecutorThreadFactory.class,
                                new ViolatedAssumptionAnswer());
        OperatorCoordinator.Context operatorCoordinator_Context0 =
                mock(OperatorCoordinator.Context.class, new ViolatedAssumptionAnswer());
        doReturn(479).when(operatorCoordinator_Context0).currentParallelism();
        SourceCoordinatorContext<RocketMQSourceSplit> sourceCoordinatorContext0 =
                new SourceCoordinatorContext<RocketMQSourceSplit>(
                        sourceCoordinatorProvider_CoordinatorExecutorThreadFactory0,
                        479,
                        operatorCoordinator_Context0,
                        (SimpleVersionedSerializer<RocketMQSourceSplit>) null);
        HashSet<MessageQueue> hashSet0 = new HashSet<MessageQueue>();
        RocketMQSourceEnumerator rocketMQSourceEnumerator0 =
                new RocketMQSourceEnumerator(
                        offsetsSelector0,
                        offsetsSelector0,
                        boundedness0,
                        configuration0,
                        sourceCoordinatorContext0,
                        hashSet0);
        SourceInitAssignEvent sourceInitAssignEvent0 = new SourceInitAssignEvent();
        rocketMQSourceEnumerator0.handleSourceEvent(479, sourceInitAssignEvent0);
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        OffsetsSelector offsetsSelector0 = OffsetsSelector.committedOffsets();
        Boundedness boundedness0 = Boundedness.BOUNDED;
        Configuration configuration0 = new Configuration();
        HashSet<MessageQueue> hashSet0 = new HashSet<MessageQueue>();
        RocketMQSourceEnumerator rocketMQSourceEnumerator0 =
                new RocketMQSourceEnumerator(
                        offsetsSelector0,
                        offsetsSelector0,
                        boundedness0,
                        configuration0,
                        (SplitEnumeratorContext<RocketMQSourceSplit>) null,
                        hashSet0);
        rocketMQSourceEnumerator0.close();
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
        OffsetsSelector offsetsSelector0 = OffsetsSelector.latest();
        Boundedness boundedness0 = Boundedness.BOUNDED;
        Configuration configuration0 = new Configuration();
        SourceCoordinatorProvider.CoordinatorExecutorThreadFactory
                sourceCoordinatorProvider_CoordinatorExecutorThreadFactory0 =
                        mock(
                                SourceCoordinatorProvider.CoordinatorExecutorThreadFactory.class,
                                new ViolatedAssumptionAnswer());
        OperatorCoordinator.Context operatorCoordinator_Context0 =
                mock(OperatorCoordinator.Context.class, new ViolatedAssumptionAnswer());
        doReturn(187, (-431)).when(operatorCoordinator_Context0).currentParallelism();
        RocketMQPartitionSplitSerializer rocketMQPartitionSplitSerializer0 =
                new RocketMQPartitionSplitSerializer();
        SourceCoordinatorContext<RocketMQSourceSplit> sourceCoordinatorContext0 =
                new SourceCoordinatorContext<RocketMQSourceSplit>(
                        sourceCoordinatorProvider_CoordinatorExecutorThreadFactory0,
                        187,
                        operatorCoordinator_Context0,
                        rocketMQPartitionSplitSerializer0);
        TreeSet<MessageQueue> treeSet0 = new TreeSet<MessageQueue>();
        MessageQueue messageQueue0 = new MessageQueue(";", ";", 0);
        treeSet0.add(messageQueue0);
        RocketMQSourceEnumerator rocketMQSourceEnumerator0 = null;
        try {
            rocketMQSourceEnumerator0 =
                    new RocketMQSourceEnumerator(
                            offsetsSelector0,
                            offsetsSelector0,
                            boundedness0,
                            configuration0,
                            sourceCoordinatorContext0,
                            treeSet0);
            fail("Expecting exception: NegativeArraySizeException");

        } catch (NegativeArraySizeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.source.enumerator.RocketMQSourceEnumerator",
                    e);
        }
    }

    @Test(timeout = 4000)
    public void test14() throws Throwable {
        OffsetsSelectorNoStopping offsetsSelectorNoStopping0 = new OffsetsSelectorNoStopping();
        Boundedness boundedness0 = Boundedness.BOUNDED;
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        Configuration configuration0 = Configuration.fromMap(hashMap0);
        RocketMQSourceEnumerator rocketMQSourceEnumerator0 =
                new RocketMQSourceEnumerator(
                        offsetsSelectorNoStopping0,
                        offsetsSelectorNoStopping0,
                        boundedness0,
                        configuration0,
                        (SplitEnumeratorContext<RocketMQSourceSplit>) null);
        RocketMQSourceEnumState rocketMQSourceEnumState0 =
                rocketMQSourceEnumerator0.snapshotState((-1332L));
        assertNotNull(rocketMQSourceEnumState0);
    }

    @Test(timeout = 4000)
    public void test15() throws Throwable {
        OffsetsSelector offsetsSelector0 = OffsetsSelector.earliest();
        Boundedness boundedness0 = Boundedness.BOUNDED;
        Configuration configuration0 = new Configuration();
        SourceCoordinatorProvider.CoordinatorExecutorThreadFactory
                sourceCoordinatorProvider_CoordinatorExecutorThreadFactory0 =
                        mock(
                                SourceCoordinatorProvider.CoordinatorExecutorThreadFactory.class,
                                new ViolatedAssumptionAnswer());
        OperatorCoordinator.Context operatorCoordinator_Context0 =
                mock(OperatorCoordinator.Context.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(operatorCoordinator_Context0).currentParallelism();
        RocketMQPartitionSplitSerializer rocketMQPartitionSplitSerializer0 =
                new RocketMQPartitionSplitSerializer();
        SourceCoordinatorContext<RocketMQSourceSplit> sourceCoordinatorContext0 =
                new SourceCoordinatorContext<RocketMQSourceSplit>(
                        sourceCoordinatorProvider_CoordinatorExecutorThreadFactory0,
                        0,
                        operatorCoordinator_Context0,
                        rocketMQPartitionSplitSerializer0);
        RocketMQSourceEnumerator rocketMQSourceEnumerator0 =
                new RocketMQSourceEnumerator(
                        offsetsSelector0,
                        offsetsSelector0,
                        boundedness0,
                        configuration0,
                        sourceCoordinatorContext0);
        rocketMQSourceEnumerator0.handleSplitRequest((-889275714), "Key '%s' not present in map");
    }
}
