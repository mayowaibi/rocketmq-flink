/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 26 11:13:50 GMT 2025
 */

package org.apache.flink.connector.rocketmq.source.enumerator;

import com.alibaba.fastjson.JSON;
import org.apache.rocketmq.common.message.MessageQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.io.EOFException;
import java.io.IOException;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.TreeSet;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
        mockJVMNonDeterminism = true,
        useVFS = true,
        useVNET = true,
        resetStaticState = true,
        separateClassLoader = true,
        useJEE = true)
public class RocketMQSourceEnumStateSerializer_ESTest
        extends RocketMQSourceEnumStateSerializer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        RocketMQSourceEnumStateSerializer rocketMQSourceEnumStateSerializer0 =
                new RocketMQSourceEnumStateSerializer();
        byte[] byteArray0 = new byte[14];
        byteArray0[0] = (byte) 105;
        byteArray0[10] = (byte) 95;
        try {
            rocketMQSourceEnumStateSerializer0.deserialize(0, byteArray0);
            fail("Expecting exception: EOFException");

        } catch (EOFException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.io.DataInputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        RocketMQSourceEnumStateSerializer rocketMQSourceEnumStateSerializer0 =
                new RocketMQSourceEnumStateSerializer();
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) (-1);
        RocketMQSourceEnumState rocketMQSourceEnumState0 =
                rocketMQSourceEnumStateSerializer0.deserialize(0, byteArray0);
        assertNotNull(rocketMQSourceEnumState0);
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        RocketMQSourceEnumStateSerializer rocketMQSourceEnumStateSerializer0 =
                new RocketMQSourceEnumStateSerializer();
        byte[] byteArray0 = new byte[1];
        try {
            rocketMQSourceEnumStateSerializer0.deserialize((-1586), byteArray0);
            fail("Expecting exception: IOException");

        } catch (IOException e) {
            //
            // The bytes are serialized with version -1586, while this deserializer only supports
            // version up to 0
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.source.enumerator.RocketMQSourceEnumStateSerializer",
                    e);
        }
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        RocketMQSourceEnumStateSerializer rocketMQSourceEnumStateSerializer0 =
                new RocketMQSourceEnumStateSerializer();
        JSON.DEFAULT_GENERATE_FEATURE = 2642246;
        LinkedHashSet<MessageQueue> linkedHashSet0 = new LinkedHashSet<MessageQueue>();
        MessageQueue messageQueue0 =
                new MessageQueue(
                        ";Ljava/lang/reflect/Type;Ljava/lang/Object;I)Ljava/lang/Object;",
                        "fastjson.parser.autoTypeSupport",
                        663);
        linkedHashSet0.add(messageQueue0);
        RocketMQSourceEnumState rocketMQSourceEnumState0 =
                new RocketMQSourceEnumState(linkedHashSet0);
        // Undeclared exception!
        try {
            rocketMQSourceEnumStateSerializer0.serialize(rocketMQSourceEnumState0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // write javaBean error, fastjson version 1.2.83, class
            // org.apache.flink.connector.rocketmq.source.enumerator.RocketMQSourceEnumState, write
            // javaBean error, fastjson version 1.2.83, class
            // org.apache.rocketmq.common.message.MessageQueue, fieldName : 0, write javaBean error,
            // fastjson version 1.2.83, class java.lang.String, fieldName : brokerName, create asm
            // serializer error, verson 1.2.83, class byte
            //
            verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        RocketMQSourceEnumStateSerializer rocketMQSourceEnumStateSerializer0 =
                new RocketMQSourceEnumStateSerializer();
        // Undeclared exception!
        try {
            rocketMQSourceEnumStateSerializer0.serialize((RocketMQSourceEnumState) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.source.enumerator.RocketMQSourceEnumStateSerializer",
                    e);
        }
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        RocketMQSourceEnumStateSerializer rocketMQSourceEnumStateSerializer0 =
                new RocketMQSourceEnumStateSerializer();
        // Undeclared exception!
        try {
            rocketMQSourceEnumStateSerializer0.deserialize(0, (byte[]) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        RocketMQSourceEnumStateSerializer rocketMQSourceEnumStateSerializer0 =
                new RocketMQSourceEnumStateSerializer();
        byte[] byteArray0 = new byte[5];
        try {
            rocketMQSourceEnumStateSerializer0.deserialize(3, byteArray0);
            fail("Expecting exception: IOException");

        } catch (IOException e) {
            //
            // The bytes are serialized with version 3, while this deserializer only supports
            // version up to 0
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.source.enumerator.RocketMQSourceEnumStateSerializer",
                    e);
        }
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        RocketMQSourceEnumStateSerializer rocketMQSourceEnumStateSerializer0 =
                new RocketMQSourceEnumStateSerializer();
        RocketMQSourceEnumState rocketMQSourceEnumState0 =
                new RocketMQSourceEnumState((Set<MessageQueue>) null);
        // Undeclared exception!
        try {
            rocketMQSourceEnumStateSerializer0.serialize(rocketMQSourceEnumState0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.source.enumerator.RocketMQSourceEnumStateSerializer",
                    e);
        }
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        RocketMQSourceEnumStateSerializer rocketMQSourceEnumStateSerializer0 =
                new RocketMQSourceEnumStateSerializer();
        TreeSet<MessageQueue> treeSet0 = new TreeSet<MessageQueue>();
        MessageQueue messageQueue0 = new MessageQueue("n6[1E!k", "n6[1E!k", (-8));
        treeSet0.add(messageQueue0);
        RocketMQSourceEnumState rocketMQSourceEnumState0 = new RocketMQSourceEnumState(treeSet0);
        byte[] byteArray0 = rocketMQSourceEnumStateSerializer0.serialize(rocketMQSourceEnumState0);
        assertEquals(26, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        RocketMQSourceEnumStateSerializer rocketMQSourceEnumStateSerializer0 =
                new RocketMQSourceEnumStateSerializer();
        byte[] byteArray0 = new byte[5];
        RocketMQSourceEnumState rocketMQSourceEnumState0 =
                rocketMQSourceEnumStateSerializer0.deserialize((byte) 0, byteArray0);
        byte[] byteArray1 = rocketMQSourceEnumStateSerializer0.serialize(rocketMQSourceEnumState0);
        assertEquals(4, byteArray1.length);
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        RocketMQSourceEnumStateSerializer rocketMQSourceEnumStateSerializer0 =
                new RocketMQSourceEnumStateSerializer();
        int int0 = rocketMQSourceEnumStateSerializer0.getVersion();
        assertEquals(0, int0);
    }
}
