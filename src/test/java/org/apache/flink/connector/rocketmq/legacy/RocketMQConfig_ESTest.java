/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 26 11:53:56 GMT 2025
 */

package org.apache.flink.connector.rocketmq.legacy;

import org.apache.rocketmq.acl.common.AclClientRPCHook;
import org.apache.rocketmq.client.AccessChannel;
import org.apache.rocketmq.client.ClientConfig;
import org.apache.rocketmq.client.consumer.DefaultLitePullConsumer;
import org.apache.rocketmq.client.producer.DefaultMQProducer;
import org.apache.rocketmq.remoting.RPCHook;
import org.apache.rocketmq.remoting.protocol.LanguageCode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.Properties;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
        mockJVMNonDeterminism = true,
        useVFS = true,
        useVNET = true,
        resetStaticState = true,
        separateClassLoader = true,
        useJEE = true)
public class RocketMQConfig_ESTest extends RocketMQConfig_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0() throws Throwable {
        DefaultMQProducer defaultMQProducer0 =
                mock(DefaultMQProducer.class, new ViolatedAssumptionAnswer());
        // Undeclared exception!
        try {
            RocketMQConfig.buildProducerConfigs((Properties) null, defaultMQProducer0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.connector.rocketmq.legacy.RocketMQConfig", e);
        }
    }

    @Test(timeout = 4000)
    public void test1() throws Throwable {
        Properties properties0 = new Properties();
        assertNotNull(properties0);
        assertEquals(0, properties0.size());
        assertTrue(properties0.isEmpty());

        DefaultMQProducer defaultMQProducer0 =
                mock(DefaultMQProducer.class, new ViolatedAssumptionAnswer());
        // Undeclared exception!
        try {
            RocketMQConfig.buildProducerConfigs(properties0, defaultMQProducer0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // The validated string is empty
            //
            verifyException("org.apache.commons.lang.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test2() throws Throwable {
        // Undeclared exception!
        try {
            RocketMQConfig.buildConsumerConfigs((Properties) null, (DefaultLitePullConsumer) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.connector.rocketmq.legacy.RocketMQConfig", e);
        }
    }

    @Test(timeout = 4000)
    public void test3() throws Throwable {
        ClientConfig clientConfig0 = new ClientConfig();
        assertNotNull(clientConfig0);
        assertEquals("{}", clientConfig0.getSocksProxyConfig());
        assertEquals(1000L, clientConfig0.getPullTimeDelayMillsWhenException());
        assertFalse(clientConfig0.isUnitMode());
        assertEquals(3000, clientConfig0.getMqClientApiTimeout());
        assertEquals(30000, clientConfig0.getPollNameServerInterval());
        assertFalse(clientConfig0.isVipChannelEnabled());
        assertEquals(LanguageCode.JAVA, clientConfig0.getLanguage());
        assertFalse(clientConfig0.isEnableStreamRequestType());
        assertEquals(AccessChannel.LOCAL, clientConfig0.getAccessChannel());
        assertEquals(1, clientConfig0.getClientCallbackExecutorThreads());
        assertEquals(5000, clientConfig0.getPersistConsumerOffsetInterval());
        assertEquals("DEFAULT", clientConfig0.getInstanceName());
        assertFalse(clientConfig0.isUseTLS());
        assertEquals("192.168.1.42", clientConfig0.getClientIP());
        assertTrue(clientConfig0.isDecodeDecompressBody());
        assertEquals(30000, clientConfig0.getHeartbeatBrokerInterval());
        assertTrue(clientConfig0.isDecodeReadBody());
        assertNull(clientConfig0.getUnitName());

        // Undeclared exception!
        try {
            RocketMQConfig.buildCommonConfigs((Properties) null, clientConfig0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.connector.rocketmq.legacy.RocketMQConfig", e);
        }
    }

    @Test(timeout = 4000)
    public void test4() throws Throwable {
        // Undeclared exception!
        try {
            RocketMQConfig.buildAclRPCHook((Properties) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.connector.rocketmq.legacy.RocketMQConfig", e);
        }
    }

    @Test(timeout = 4000)
    public void test5() throws Throwable {
        Properties properties0 = new Properties();
        DefaultLitePullConsumer defaultLitePullConsumer0 =
                new DefaultLitePullConsumer("producer.topic", "", (RPCHook) null);
        // Undeclared exception!
        try {
            RocketMQConfig.buildCommonConfigs(properties0, defaultLitePullConsumer0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // The validated string is empty
            //
            verifyException("org.apache.commons.lang.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test6() throws Throwable {
        Properties properties0 = new Properties();
        AclClientRPCHook aclClientRPCHook0 = RocketMQConfig.buildAclRPCHook(properties0);
        assertNull(aclClientRPCHook0);
    }

    @Test(timeout = 4000)
    public void test7() throws Throwable {
        Properties properties0 = new Properties();
        DefaultLitePullConsumer defaultLitePullConsumer0 = new DefaultLitePullConsumer();
        // Undeclared exception!
        try {
            RocketMQConfig.buildConsumerConfigs(properties0, defaultLitePullConsumer0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // The validated string is empty
            //
            verifyException("org.apache.commons.lang.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test8() throws Throwable {
        RocketMQConfig rocketMQConfig0 = new RocketMQConfig();
        assertEquals(18, RocketMQConfig.MSG_DELAY_LEVEL18);
    }
}
