/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 26 12:22:26 GMT 2025
 */

package org.apache.flink.connector.rocketmq.legacy.common.serialization;

import org.apache.flink.api.common.typeinfo.TypeInformation;

import org.apache.rocketmq.common.message.MessageExt;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.Test;
import org.junit.runner.RunWith;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
        mockJVMNonDeterminism = true,
        useVFS = true,
        useVNET = true,
        resetStaticState = true,
        separateClassLoader = true,
        useJEE = true)
public class ForwardMessageExtDeserialization_ESTest
        extends ForwardMessageExtDeserialization_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0() throws Throwable {
        ForwardMessageExtDeserialization forwardMessageExtDeserialization0 =
                new ForwardMessageExtDeserialization();
        TypeInformation<MessageExt> typeInformation0 =
                forwardMessageExtDeserialization0.getProducedType();
        assertNotNull(typeInformation0);

        forwardMessageExtDeserialization0.getProducedType();
        TypeInformation<MessageExt> typeInformation1 =
                forwardMessageExtDeserialization0.getProducedType();
        forwardMessageExtDeserialization0.getProducedType();
        TypeInformation<MessageExt> typeInformation2 =
                forwardMessageExtDeserialization0.getProducedType();
        assertNotSame(typeInformation2, typeInformation1);
    }

    @Test(timeout = 4000)
    public void test1() throws Throwable {
        ForwardMessageExtDeserialization forwardMessageExtDeserialization0 =
                new ForwardMessageExtDeserialization();
        MessageExt messageExt0 = mock(MessageExt.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null, (String) null, (String) null, (String) null)
                .when(messageExt0)
                .toString();
        forwardMessageExtDeserialization0.getProducedType();
        forwardMessageExtDeserialization0.getProducedType();
        forwardMessageExtDeserialization0.getProducedType();
        MessageExt messageExt1 =
                forwardMessageExtDeserialization0.deserializeMessageExt(messageExt0);
        MessageExt messageExt2 =
                forwardMessageExtDeserialization0.deserializeMessageExt(messageExt1);
        forwardMessageExtDeserialization0.getProducedType();
        forwardMessageExtDeserialization0.deserializeMessageExt(messageExt2);
        forwardMessageExtDeserialization0.deserializeMessageExt(messageExt1);
        forwardMessageExtDeserialization0.deserializeMessageExt(messageExt1);
        forwardMessageExtDeserialization0.getProducedType();
        forwardMessageExtDeserialization0.getProducedType();
        // Undeclared exception!
        forwardMessageExtDeserialization0.getProducedType();
    }

    @Test(timeout = 4000)
    public void test2() throws Throwable {
        ForwardMessageExtDeserialization forwardMessageExtDeserialization0 =
                new ForwardMessageExtDeserialization();
        MessageExt messageExt0 =
                forwardMessageExtDeserialization0.deserializeMessageExt((MessageExt) null);
        assertNull(messageExt0);
    }
}
