/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 26 11:32:15 GMT 2025
 */

package org.apache.flink.connector.rocketmq.source.table;

import org.apache.flink.configuration.ConfigOption;
import org.apache.flink.configuration.Configuration;
import org.apache.flink.table.catalog.CatalogTable;
import org.apache.flink.table.catalog.Column;
import org.apache.flink.table.catalog.ObjectIdentifier;
import org.apache.flink.table.catalog.ResolvedCatalogTable;
import org.apache.flink.table.catalog.ResolvedSchema;
import org.apache.flink.table.factories.DynamicTableFactory;
import org.apache.flink.table.factories.FactoryUtil;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Set;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
        mockJVMNonDeterminism = true,
        useVFS = true,
        useVNET = true,
        resetStaticState = true,
        separateClassLoader = true,
        useJEE = true)
public class RocketMQDynamicTableSourceFactory_ESTest
        extends RocketMQDynamicTableSourceFactory_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0() throws Throwable {
        RocketMQDynamicTableSourceFactory rocketMQDynamicTableSourceFactory0 =
                new RocketMQDynamicTableSourceFactory();
        ObjectIdentifier objectIdentifier0 = ObjectIdentifier.of("rocketmq", "rocketmq", "]pQd?V=");
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        CatalogTable catalogTable0 = CatalogTable.fromProperties(hashMap0);
        ArrayList<Column> arrayList0 = new ArrayList<Column>();
        ResolvedSchema resolvedSchema0 = ResolvedSchema.of((List<Column>) arrayList0);
        ResolvedCatalogTable resolvedCatalogTable0 =
                new ResolvedCatalogTable(catalogTable0, resolvedSchema0);
        Configuration configuration0 = new Configuration();
        ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
        FactoryUtil.DefaultDynamicTableContext factoryUtil_DefaultDynamicTableContext0 =
                new FactoryUtil.DefaultDynamicTableContext(
                        objectIdentifier0,
                        resolvedCatalogTable0,
                        hashMap0,
                        configuration0,
                        classLoader0,
                        true);
        // Undeclared exception!
        try {
            rocketMQDynamicTableSourceFactory0.createDynamicTableSource(
                    factoryUtil_DefaultDynamicTableContext0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // One or more required options are missing.
            //
            // Missing required options are:
            //
            // rocketmq.source.group
            // rocketmq.source.topic
            //
            verifyException("org.apache.flink.table.factories.FactoryUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test1() throws Throwable {
        RocketMQDynamicTableSourceFactory rocketMQDynamicTableSourceFactory0 =
                new RocketMQDynamicTableSourceFactory();
        // Undeclared exception!
        try {
            rocketMQDynamicTableSourceFactory0.createDynamicTableSource(
                    (DynamicTableFactory.Context) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.table.factories.FactoryUtil$TableFactoryHelper", e);
        }
    }

    @Test(timeout = 4000)
    public void test2() throws Throwable {
        RocketMQDynamicTableSourceFactory rocketMQDynamicTableSourceFactory0 =
                new RocketMQDynamicTableSourceFactory();
        Set<ConfigOption<?>> set0 = rocketMQDynamicTableSourceFactory0.optionalOptions();
        assertEquals(15, set0.size());
    }

    @Test(timeout = 4000)
    public void test3() throws Throwable {
        RocketMQDynamicTableSourceFactory rocketMQDynamicTableSourceFactory0 =
                new RocketMQDynamicTableSourceFactory();
        Set<ConfigOption<?>> set0 = rocketMQDynamicTableSourceFactory0.requiredOptions();
        assertFalse(set0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test4() throws Throwable {
        RocketMQDynamicTableSourceFactory rocketMQDynamicTableSourceFactory0 =
                new RocketMQDynamicTableSourceFactory();
        String string0 = rocketMQDynamicTableSourceFactory0.factoryIdentifier();
        assertEquals("rocketmq", string0);
    }
}
