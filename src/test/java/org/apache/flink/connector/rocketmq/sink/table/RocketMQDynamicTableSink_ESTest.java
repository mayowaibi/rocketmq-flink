/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 26 11:43:17 GMT 2025
 */

package org.apache.flink.connector.rocketmq.sink.table;

import org.apache.flink.api.java.typeutils.RowTypeInfo;
import org.apache.flink.table.api.TableSchema;
import org.apache.flink.table.connector.ChangelogMode;
import org.apache.flink.table.connector.sink.DynamicTableSink;
import org.apache.flink.table.descriptors.DescriptorProperties;
import org.apache.flink.table.runtime.connector.sink.SinkRuntimeProviderContext;
import org.apache.flink.table.types.AtomicDataType;
import org.apache.flink.table.types.CollectionDataType;
import org.apache.flink.table.types.DataType;
import org.apache.flink.table.types.FieldsDataType;
import org.apache.flink.table.types.logical.BooleanType;
import org.apache.flink.table.types.logical.DecimalType;
import org.apache.flink.table.types.logical.FloatType;
import org.apache.flink.table.types.logical.IntType;
import org.apache.flink.table.types.logical.LocalZonedTimestampType;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
        mockJVMNonDeterminism = true,
        useVFS = true,
        useVNET = true,
        resetStaticState = true,
        separateClassLoader = true,
        useJEE = true)
public class RocketMQDynamicTableSink_ESTest extends RocketMQDynamicTableSink_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        IntType intType0 = new IntType();
        Class<Integer> class0 = Integer.class;
        AtomicDataType atomicDataType0 = new AtomicDataType(intType0, class0);
        String[] stringArray0 = new String[0];
        RowTypeInfo rowTypeInfo0 =
                RocketMQDynamicTableSink.convertToRowTypeInfo(atomicDataType0, stringArray0);
        assertFalse(rowTypeInfo0.isBasicType());
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        DescriptorProperties descriptorProperties0 =
                mock(DescriptorProperties.class, new ViolatedAssumptionAnswer());
        String[] stringArray0 = new String[1];
        TableSchema tableSchema0 = mock(TableSchema.class, new ViolatedAssumptionAnswer());
        RocketMQDynamicTableSink rocketMQDynamicTableSink0 =
                new RocketMQDynamicTableSink(
                        descriptorProperties0,
                        tableSchema0,
                        "metadata",
                        "tt);GYs~ndQ?h",
                        "watermark",
                        "primary-key.columns",
                        "producer.group",
                        "strategy.expr",
                        "primary-key.columns",
                        "metadata",
                        "TAGS",
                        0L,
                        0L,
                        false,
                        true,
                        false,
                        stringArray0);
        String string0 = rocketMQDynamicTableSink0.asSummaryString();
        assertEquals(
                "org.apache.flink.connector.rocketmq.sink.table.RocketMQDynamicTableSink", string0);
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        DescriptorProperties descriptorProperties0 =
                mock(DescriptorProperties.class, new ViolatedAssumptionAnswer());
        String[] stringArray0 = new String[9];
        BooleanType booleanType0 = new BooleanType();
        AtomicDataType atomicDataType0 = new AtomicDataType(booleanType0);
        List<DataType> list0 = DataType.getFieldDataTypes(atomicDataType0);
        FieldsDataType fieldsDataType0 = new FieldsDataType(booleanType0, list0);
        CollectionDataType collectionDataType0 =
                new CollectionDataType(booleanType0, fieldsDataType0);
        TableSchema tableSchema0 = mock(TableSchema.class, new ViolatedAssumptionAnswer());
        doReturn(stringArray0).when(tableSchema0).getFieldNames();
        doReturn(collectionDataType0).when(tableSchema0).toRowDataType();
        RocketMQDynamicTableSink rocketMQDynamicTableSink0 =
                new RocketMQDynamicTableSink(
                        descriptorProperties0,
                        tableSchema0,
                        ")",
                        "",
                        ":]9s\"U23:zIx",
                        "primary-key.columns",
                        "lambda$createFieldGetter$245ca7d1$10",
                        "O9x>xjRik6JW_J~B=",
                        "virtual",
                        0L,
                        0L,
                        true,
                        true,
                        true,
                        stringArray0);
        SinkRuntimeProviderContext sinkRuntimeProviderContext0 =
                new SinkRuntimeProviderContext(true);
        // Undeclared exception!
        try {
            rocketMQDynamicTableSink0.getSinkRuntimeProvider(sinkRuntimeProviderContext0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // Unsupported conversion from data type 'BOOLEAN' (conversion class: java.lang.Boolean)
            // to type information. Only data types that originated from type information fully
            // support a reverse conversion.
            //
            verifyException(
                    "org.apache.flink.table.types.utils.LegacyTypeInfoDataTypeConverter", e);
        }
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        DescriptorProperties descriptorProperties0 =
                mock(DescriptorProperties.class, new ViolatedAssumptionAnswer());
        FloatType floatType0 = new FloatType();
        AtomicDataType atomicDataType0 = new AtomicDataType(floatType0);
        TableSchema tableSchema0 = mock(TableSchema.class, new ViolatedAssumptionAnswer());
        doReturn((String[]) null).when(tableSchema0).getFieldNames();
        doReturn(atomicDataType0).when(tableSchema0).toRowDataType();
        String[] stringArray0 = new String[9];
        RocketMQDynamicTableSink rocketMQDynamicTableSink0 =
                new RocketMQDynamicTableSink(
                        descriptorProperties0,
                        tableSchema0,
                        "data-type",
                        "t4R",
                        "i",
                        "comment",
                        "NljGB*XEDTBte",
                        "expr",
                        "primary-key.columns",
                        "data-type",
                        "WtQeF?yEE",
                        1L,
                        0L,
                        true,
                        true,
                        true,
                        stringArray0);
        SinkRuntimeProviderContext sinkRuntimeProviderContext0 =
                new SinkRuntimeProviderContext(true);
        // Undeclared exception!
        try {
            rocketMQDynamicTableSink0.getSinkRuntimeProvider(sinkRuntimeProviderContext0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // FieldNames should not be null.
            //
            verifyException("org.apache.flink.util.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        String[] stringArray0 = new String[0];
        DescriptorProperties descriptorProperties0 =
                mock(DescriptorProperties.class, new ViolatedAssumptionAnswer());
        TableSchema tableSchema0 = mock(TableSchema.class, new ViolatedAssumptionAnswer());
        RocketMQDynamicTableSink rocketMQDynamicTableSink0 =
                new RocketMQDynamicTableSink(
                        descriptorProperties0,
                        tableSchema0,
                        "strategy.expr",
                        "globalJobParameters shouldn't be null",
                        "keys",
                        "TRy=;0JZPOW@e>b?m",
                        "watermark",
                        "%",
                        "-DRR1r+mRR",
                        0L,
                        10,
                        false,
                        false,
                        false,
                        stringArray0);
        // Undeclared exception!
        try {
            rocketMQDynamicTableSink0.getChangelogMode((ChangelogMode) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.sink.table.RocketMQDynamicTableSink", e);
        }
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        String[] stringArray0 = new String[1];
        // Undeclared exception!
        try {
            RocketMQDynamicTableSink.convertToRowTypeInfo((DataType) null, stringArray0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.sink.table.RocketMQDynamicTableSink", e);
        }
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        DecimalType decimalType0 = new DecimalType();
        AtomicDataType atomicDataType0 = new AtomicDataType(decimalType0);
        // Undeclared exception!
        try {
            RocketMQDynamicTableSink.convertToRowTypeInfo(atomicDataType0, (String[]) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // FieldNames should not be null.
            //
            verifyException("org.apache.flink.util.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        String[] stringArray0 = new String[1];
        RocketMQDynamicTableSink.WritableMetadata rocketMQDynamicTableSink_WritableMetadata0 =
                RocketMQDynamicTableSink.WritableMetadata.KEYS;
        AtomicDataType atomicDataType0 =
                (AtomicDataType) rocketMQDynamicTableSink_WritableMetadata0.dataType;
        // Undeclared exception!
        try {
            RocketMQDynamicTableSink.convertToRowTypeInfo(atomicDataType0, stringArray0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Number of field types and names is different.
            //
            verifyException("org.apache.flink.util.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        DescriptorProperties descriptorProperties0 =
                mock(DescriptorProperties.class, new ViolatedAssumptionAnswer());
        String[] stringArray0 = new String[1];
        TableSchema tableSchema0 = mock(TableSchema.class, new ViolatedAssumptionAnswer());
        RocketMQDynamicTableSink rocketMQDynamicTableSink0 =
                new RocketMQDynamicTableSink(
                        descriptorProperties0,
                        tableSchema0,
                        "",
                        "name",
                        "expr",
                        "7(NUu $a? ",
                        "type",
                        "primary-key.name",
                        "partition.keys",
                        294L,
                        294L,
                        true,
                        true,
                        false,
                        stringArray0);
        DynamicTableSink dynamicTableSink0 = rocketMQDynamicTableSink0.copy();
        assertNotSame(dynamicTableSink0, rocketMQDynamicTableSink0);
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        DescriptorProperties descriptorProperties0 =
                mock(DescriptorProperties.class, new ViolatedAssumptionAnswer());
        String[] stringArray0 = new String[6];
        LocalZonedTimestampType localZonedTimestampType0 = new LocalZonedTimestampType();
        AtomicDataType atomicDataType0 = new AtomicDataType(localZonedTimestampType0);
        TableSchema tableSchema0 = mock(TableSchema.class, new ViolatedAssumptionAnswer());
        doReturn(stringArray0).when(tableSchema0).getFieldNames();
        doReturn(atomicDataType0).when(tableSchema0).toRowDataType();
        RocketMQDynamicTableSink rocketMQDynamicTableSink0 =
                new RocketMQDynamicTableSink(
                        descriptorProperties0,
                        tableSchema0,
                        "primary-key.name",
                        "GOJi:PcQ#`1jxuu",
                        "GOJi:PcQ#`1jxuu",
                        "data-type",
                        (String) null,
                        "virtual",
                        "strategy.data-type",
                        "GOJi:PcQ#`1jxuu",
                        "",
                        0L,
                        0L,
                        false,
                        false,
                        false,
                        stringArray0);
        SinkRuntimeProviderContext sinkRuntimeProviderContext0 =
                new SinkRuntimeProviderContext(false);
        // Undeclared exception!
        try {
            rocketMQDynamicTableSink0.getSinkRuntimeProvider(sinkRuntimeProviderContext0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Number of field types and names is different.
            //
            verifyException("org.apache.flink.util.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        DescriptorProperties descriptorProperties0 =
                mock(DescriptorProperties.class, new ViolatedAssumptionAnswer());
        String[] stringArray0 = new String[0];
        BooleanType booleanType0 = new BooleanType(true);
        LinkedList<DataType> linkedList0 = new LinkedList<DataType>();
        FieldsDataType fieldsDataType0 = new FieldsDataType(booleanType0, linkedList0);
        TableSchema tableSchema0 = mock(TableSchema.class, new ViolatedAssumptionAnswer());
        doReturn((DataType[]) null).when(tableSchema0).getFieldDataTypes();
        doReturn(stringArray0).when(tableSchema0).getFieldNames();
        doReturn(fieldsDataType0).when(tableSchema0).toRowDataType();
        String[] stringArray1 = new String[7];
        RocketMQDynamicTableSink rocketMQDynamicTableSink0 =
                new RocketMQDynamicTableSink(
                        descriptorProperties0,
                        tableSchema0,
                        (String) null,
                        "",
                        "(7E_Ne^<",
                        "c",
                        "primary-key.columns",
                        "tags",
                        "",
                        0L,
                        0L,
                        true,
                        false,
                        false,
                        stringArray1);
        SinkRuntimeProviderContext sinkRuntimeProviderContext0 =
                new SinkRuntimeProviderContext(true);
        DynamicTableSink.SinkRuntimeProvider dynamicTableSink_SinkRuntimeProvider0 =
                rocketMQDynamicTableSink0.getSinkRuntimeProvider(sinkRuntimeProviderContext0);
        assertNotNull(dynamicTableSink_SinkRuntimeProvider0);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        DescriptorProperties descriptorProperties0 =
                mock(DescriptorProperties.class, new ViolatedAssumptionAnswer());
        String[] stringArray0 = new String[1];
        TableSchema tableSchema0 = mock(TableSchema.class, new ViolatedAssumptionAnswer());
        RocketMQDynamicTableSink rocketMQDynamicTableSink0 =
                new RocketMQDynamicTableSink(
                        descriptorProperties0,
                        tableSchema0,
                        "",
                        "name",
                        "expr",
                        "7(NUu $a? ",
                        "type",
                        "primary-key.name",
                        "partition.keys",
                        294L,
                        294L,
                        true,
                        true,
                        false,
                        stringArray0);
        ChangelogMode changelogMode0 = ChangelogMode.all();
        ChangelogMode changelogMode1 = rocketMQDynamicTableSink0.getChangelogMode(changelogMode0);
        assertFalse(changelogMode1.equals((Object) changelogMode0));
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        DescriptorProperties descriptorProperties0 =
                mock(DescriptorProperties.class, new ViolatedAssumptionAnswer());
        TableSchema tableSchema0 = mock(TableSchema.class, new ViolatedAssumptionAnswer());
        String[] stringArray0 = new String[7];
        RocketMQDynamicTableSink rocketMQDynamicTableSink0 =
                new RocketMQDynamicTableSink(
                        descriptorProperties0,
                        tableSchema0,
                        (String) null,
                        "",
                        "(7E_Ne^<",
                        "c",
                        "primary-key.columns",
                        "tags",
                        "",
                        0L,
                        0L,
                        true,
                        false,
                        false,
                        stringArray0);
        Map<String, DataType> map0 = rocketMQDynamicTableSink0.listWritableMetadata();
        assertFalse(map0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
        DescriptorProperties descriptorProperties0 =
                mock(DescriptorProperties.class, new ViolatedAssumptionAnswer());
        TableSchema tableSchema0 = mock(TableSchema.class, new ViolatedAssumptionAnswer());
        doReturn((String[]) null).when(tableSchema0).getFieldNames();
        doReturn((DataType) null).when(tableSchema0).toRowDataType();
        String[] stringArray0 = new String[5];
        RocketMQDynamicTableSink rocketMQDynamicTableSink0 =
                new RocketMQDynamicTableSink(
                        descriptorProperties0,
                        tableSchema0,
                        "comment",
                        "f<>C%u=\"=sW@",
                        "rowtime",
                        "(rm",
                        "}",
                        "data-type",
                        "Pkxh",
                        "}",
                        "0H>G7",
                        0L,
                        0L,
                        true,
                        true,
                        false,
                        stringArray0);
        SinkRuntimeProviderContext sinkRuntimeProviderContext0 =
                new SinkRuntimeProviderContext(true);
        // Undeclared exception!
        try {
            rocketMQDynamicTableSink0.getSinkRuntimeProvider(sinkRuntimeProviderContext0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.sink.table.RocketMQDynamicTableSink", e);
        }
    }
}
