/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 26 11:57:25 GMT 2025
 */

package org.apache.flink.connector.rocketmq.legacy.common.serialization;

import org.apache.flink.api.common.typeinfo.TypeInformation;
import org.apache.flink.api.java.tuple.Tuple;
import org.apache.flink.api.java.tuple.Tuple2;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
        mockJVMNonDeterminism = true,
        useVFS = true,
        useVNET = true,
        resetStaticState = true,
        separateClassLoader = true,
        useJEE = true)
public class SimpleTupleDeserializationSchema_ESTest
        extends SimpleTupleDeserializationSchema_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0() throws Throwable {
        SimpleTupleDeserializationSchema simpleTupleDeserializationSchema0 =
                new SimpleTupleDeserializationSchema();
        byte[] byteArray0 = new byte[0];
        Tuple2<String, String> tuple2_0 =
                simpleTupleDeserializationSchema0.deserializeKeyAndValue(byteArray0, (byte[]) null);
        assertEquals(25, Tuple.MAX_ARITY);
    }

    @Test(timeout = 4000)
    public void test1() throws Throwable {
        SimpleTupleDeserializationSchema simpleTupleDeserializationSchema0 =
                new SimpleTupleDeserializationSchema();
        byte[] byteArray0 = new byte[0];
        Tuple2<String, String> tuple2_0 =
                simpleTupleDeserializationSchema0.deserializeKeyAndValue(byteArray0, byteArray0);
        assertEquals(2, tuple2_0.getArity());
    }

    @Test(timeout = 4000)
    public void test2() throws Throwable {
        SimpleTupleDeserializationSchema simpleTupleDeserializationSchema0 =
                new SimpleTupleDeserializationSchema();
        byte[] byteArray0 = new byte[0];
        Tuple2<String, String> tuple2_0 =
                simpleTupleDeserializationSchema0.deserializeKeyAndValue((byte[]) null, byteArray0);
        assertEquals(2, tuple2_0.getArity());
    }

    @Test(timeout = 4000)
    public void test3() throws Throwable {
        SimpleTupleDeserializationSchema simpleTupleDeserializationSchema0 =
                new SimpleTupleDeserializationSchema();
        TypeInformation<Tuple2<String, String>> typeInformation0 =
                simpleTupleDeserializationSchema0.getProducedType();
        assertNotNull(typeInformation0);
    }
}
