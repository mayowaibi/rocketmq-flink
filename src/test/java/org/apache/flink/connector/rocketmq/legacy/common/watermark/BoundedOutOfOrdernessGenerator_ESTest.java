/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 26 12:21:32 GMT 2025
 */

package org.apache.flink.connector.rocketmq.legacy.common.watermark;

import org.apache.flink.streaming.api.watermark.Watermark;

import org.apache.rocketmq.common.message.MessageExt;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.Test;
import org.junit.runner.RunWith;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
        mockJVMNonDeterminism = true,
        useVFS = true,
        useVNET = true,
        resetStaticState = true,
        separateClassLoader = true,
        useJEE = true)
public class BoundedOutOfOrdernessGenerator_ESTest
        extends BoundedOutOfOrdernessGenerator_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0() throws Throwable {
        BoundedOutOfOrdernessGenerator boundedOutOfOrdernessGenerator0 =
                new BoundedOutOfOrdernessGenerator(0L);
        Watermark watermark0 = boundedOutOfOrdernessGenerator0.getCurrentWatermark();
        assertEquals(0L, watermark0.getTimestamp());
    }

    @Test(timeout = 4000)
    public void test1() throws Throwable {
        BoundedOutOfOrdernessGenerator boundedOutOfOrdernessGenerator0 =
                new BoundedOutOfOrdernessGenerator((-2009L));
        Watermark watermark0 = boundedOutOfOrdernessGenerator0.getCurrentWatermark();
        assertEquals(2009L, watermark0.getTimestamp());
    }

    @Test(timeout = 4000)
    public void test2() throws Throwable {
        BoundedOutOfOrdernessGenerator boundedOutOfOrdernessGenerator0 =
                new BoundedOutOfOrdernessGenerator(1378L);
        MessageExt messageExt0 = mock(MessageExt.class, new ViolatedAssumptionAnswer());
        doReturn(1378L).when(messageExt0).getBornTimestamp();
        long long0 = boundedOutOfOrdernessGenerator0.extractTimestamp(messageExt0, 1378L);
        assertEquals(1378L, long0);
    }

    @Test(timeout = 4000)
    public void test3() throws Throwable {
        BoundedOutOfOrdernessGenerator boundedOutOfOrdernessGenerator0 =
                new BoundedOutOfOrdernessGenerator();
        MessageExt messageExt0 = mock(MessageExt.class, new ViolatedAssumptionAnswer());
        doReturn((-1251L)).when(messageExt0).getBornTimestamp();
        long long0 = boundedOutOfOrdernessGenerator0.extractTimestamp(messageExt0, 0L);
        assertEquals((-1251L), long0);
    }

    @Test(timeout = 4000)
    public void test4() throws Throwable {
        BoundedOutOfOrdernessGenerator boundedOutOfOrdernessGenerator0 =
                new BoundedOutOfOrdernessGenerator();
        // Undeclared exception!
        try {
            boundedOutOfOrdernessGenerator0.extractTimestamp((MessageExt) null, 0L);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.legacy.common.watermark.BoundedOutOfOrdernessGenerator",
                    e);
        }
    }

    @Test(timeout = 4000)
    public void test5() throws Throwable {
        BoundedOutOfOrdernessGenerator boundedOutOfOrdernessGenerator0 =
                new BoundedOutOfOrdernessGenerator(1378L);
        Watermark watermark0 = boundedOutOfOrdernessGenerator0.getCurrentWatermark();
        assertEquals((-1378L), watermark0.getTimestamp());
    }

    @Test(timeout = 4000)
    public void test6() throws Throwable {
        BoundedOutOfOrdernessGenerator boundedOutOfOrdernessGenerator0 =
                new BoundedOutOfOrdernessGenerator();
        String string0 = boundedOutOfOrdernessGenerator0.toString();
        assertEquals(
                "BoundedOutOfOrdernessGenerator{maxOutOfOrderness=5000, currentMaxTimestamp=0}",
                string0);
    }

    @Test(timeout = 4000)
    public void test7() throws Throwable {
        BoundedOutOfOrdernessGenerator boundedOutOfOrdernessGenerator0 =
                new BoundedOutOfOrdernessGenerator();
        MessageExt messageExt0 = mock(MessageExt.class, new ViolatedAssumptionAnswer());
        doReturn(0L).when(messageExt0).getBornTimestamp();
        long long0 = boundedOutOfOrdernessGenerator0.extractTimestamp(messageExt0, 2699L);
        assertEquals(0L, long0);
    }
}
