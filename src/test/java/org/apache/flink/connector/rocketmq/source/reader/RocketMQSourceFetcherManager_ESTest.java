/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 26 11:49:15 GMT 2025
 */

package org.apache.flink.connector.rocketmq.source.reader;

import org.apache.flink.connector.base.source.reader.RecordsWithSplitIds;
import org.apache.flink.connector.base.source.reader.splitreader.SplitReader;
import org.apache.flink.connector.base.source.reader.synchronization.FutureCompletingBlockingQueue;
import org.apache.flink.connector.rocketmq.source.split.RocketMQSourceSplit;

import org.apache.rocketmq.common.message.MessageQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.function.Consumer;
import java.util.function.Supplier;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
        mockJVMNonDeterminism = true,
        useVFS = true,
        useVNET = true,
        resetStaticState = true,
        separateClassLoader = true,
        useJEE = true)
public class RocketMQSourceFetcherManager_ESTest
        extends RocketMQSourceFetcherManager_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0() throws Throwable {
        FutureCompletingBlockingQueue<RecordsWithSplitIds<MessageView>>
                futureCompletingBlockingQueue0 =
                        (FutureCompletingBlockingQueue<RecordsWithSplitIds<MessageView>>)
                                mock(
                                        FutureCompletingBlockingQueue.class,
                                        new ViolatedAssumptionAnswer());
        Supplier<SplitReader<MessageView, RocketMQSourceSplit>> supplier0 =
                (Supplier<SplitReader<MessageView, RocketMQSourceSplit>>)
                        mock(Supplier.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(supplier0).get();
        Consumer<Collection<String>> consumer0 =
                (Consumer<Collection<String>>) mock(Consumer.class, new ViolatedAssumptionAnswer());
        RocketMQSourceFetcherManager rocketMQSourceFetcherManager0 =
                new RocketMQSourceFetcherManager(
                        futureCompletingBlockingQueue0, supplier0, consumer0);
        rocketMQSourceFetcherManager0.addSplits((List<RocketMQSourceSplit>) null);
        RocketMQSplitReader rocketMQSplitReader0 = rocketMQSourceFetcherManager0.getSplitReader();
        assertNull(rocketMQSplitReader0);
    }

    @Test(timeout = 4000)
    public void test1() throws Throwable {
        FutureCompletingBlockingQueue<RecordsWithSplitIds<MessageView>>
                futureCompletingBlockingQueue0 =
                        (FutureCompletingBlockingQueue<RecordsWithSplitIds<MessageView>>)
                                mock(
                                        FutureCompletingBlockingQueue.class,
                                        new ViolatedAssumptionAnswer());
        SplitReader<MessageView, RocketMQSourceSplit> splitReader0 =
                (SplitReader<MessageView, RocketMQSourceSplit>)
                        mock(SplitReader.class, new ViolatedAssumptionAnswer());
        Supplier<SplitReader<MessageView, RocketMQSourceSplit>> supplier0 =
                (Supplier<SplitReader<MessageView, RocketMQSourceSplit>>)
                        mock(Supplier.class, new ViolatedAssumptionAnswer());
        doReturn(splitReader0).when(supplier0).get();
        Consumer<Collection<String>> consumer0 =
                (Consumer<Collection<String>>) mock(Consumer.class, new ViolatedAssumptionAnswer());
        RocketMQSourceFetcherManager rocketMQSourceFetcherManager0 =
                new RocketMQSourceFetcherManager(
                        futureCompletingBlockingQueue0, supplier0, consumer0);
        rocketMQSourceFetcherManager0.addSplits((List<RocketMQSourceSplit>) null);
        // Undeclared exception!
        try {
            rocketMQSourceFetcherManager0.getSplitReader();
            fail("Expecting exception: ClassCastException");

        } catch (ClassCastException e) {
            //
            // org.apache.flink.connector.base.source.reader.splitreader.SplitReader$MockitoMock$893138908 cannot be cast to org.apache.flink.connector.rocketmq.source.reader.RocketMQSplitReader
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.source.reader.RocketMQSourceFetcherManager",
                    e);
        }
    }

    @Test(timeout = 4000)
    public void test2() throws Throwable {
        FutureCompletingBlockingQueue<RecordsWithSplitIds<MessageView>>
                futureCompletingBlockingQueue0 =
                        (FutureCompletingBlockingQueue<RecordsWithSplitIds<MessageView>>)
                                mock(
                                        FutureCompletingBlockingQueue.class,
                                        new ViolatedAssumptionAnswer());
        Supplier<SplitReader<MessageView, RocketMQSourceSplit>> supplier0 =
                (Supplier<SplitReader<MessageView, RocketMQSourceSplit>>)
                        mock(Supplier.class, new ViolatedAssumptionAnswer());
        Consumer<Collection<String>> consumer0 =
                (Consumer<Collection<String>>) mock(Consumer.class, new ViolatedAssumptionAnswer());
        RocketMQSourceFetcherManager rocketMQSourceFetcherManager0 =
                new RocketMQSourceFetcherManager(
                        futureCompletingBlockingQueue0, supplier0, consumer0);
        // Undeclared exception!
        try {
            rocketMQSourceFetcherManager0.commitOffsets((Map<MessageQueue, Long>) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
        }
    }

    @Test(timeout = 4000)
    public void test3() throws Throwable {
        FutureCompletingBlockingQueue<RecordsWithSplitIds<MessageView>>
                futureCompletingBlockingQueue0 =
                        (FutureCompletingBlockingQueue<RecordsWithSplitIds<MessageView>>)
                                mock(
                                        FutureCompletingBlockingQueue.class,
                                        new ViolatedAssumptionAnswer());
        Supplier<SplitReader<MessageView, RocketMQSourceSplit>> supplier0 =
                (Supplier<SplitReader<MessageView, RocketMQSourceSplit>>)
                        mock(Supplier.class, new ViolatedAssumptionAnswer());
        Consumer<Collection<String>> consumer0 =
                (Consumer<Collection<String>>) mock(Consumer.class, new ViolatedAssumptionAnswer());
        RocketMQSourceFetcherManager rocketMQSourceFetcherManager0 =
                new RocketMQSourceFetcherManager(
                        futureCompletingBlockingQueue0, supplier0, consumer0);
        // Undeclared exception!
        try {
            rocketMQSourceFetcherManager0.getSplitReader();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.source.reader.RocketMQSourceFetcherManager",
                    e);
        }
    }
}
