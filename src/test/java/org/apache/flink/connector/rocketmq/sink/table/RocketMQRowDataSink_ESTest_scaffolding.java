/**
 * Scaffolding file used to store all the setups needed to run tests automatically generated by
 * EvoSuite Wed Mar 26 12:02:55 GMT 2025
 */
package org.apache.flink.connector.rocketmq.sink.table;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.evosuite.runtime.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

import static org.evosuite.shaded.org.mockito.Mockito.*;

@EvoSuiteClassExclude
public class RocketMQRowDataSink_ESTest_scaffolding {

    @org.junit.Rule
    public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr =
            new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

    private static final java.util.Properties defaultProperties =
            (java.util.Properties) java.lang.System.getProperties().clone();

    private org.evosuite.runtime.thread.ThreadStopper threadStopper =
            new org.evosuite.runtime.thread.ThreadStopper(
                    org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);

    @BeforeClass
    public static void initEvoSuiteFramework() {
        org.evosuite.runtime.RuntimeSettings.className =
                "org.apache.flink.connector.rocketmq.sink.table.RocketMQRowDataSink";
        org.evosuite.runtime.GuiSupport.initialize();
        org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100;
        org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000;
        org.evosuite.runtime.RuntimeSettings.mockSystemIn = true;
        org.evosuite.runtime.RuntimeSettings.sandboxMode =
                org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED;
        org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT();
        org.evosuite.runtime.classhandling.JDKClassResetter.init();
        setSystemProperties();
        initializeClasses();
        org.evosuite.runtime.Runtime.getInstance().resetRuntime();
        try {
            initMocksToAvoidTimeoutsInTheTests();
        } catch (ClassNotFoundException e) {
        }
    }

    @AfterClass
    public static void clearEvoSuiteFramework() {
        Sandbox.resetDefaultSecurityManager();
        java.lang.System.setProperties((java.util.Properties) defaultProperties.clone());
    }

    @Before
    public void initTestCase() {
        threadStopper.storeCurrentThreads();
        threadStopper.startRecordingTime();
        org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler();
        org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode();
        setSystemProperties();
        org.evosuite.runtime.GuiSupport.setHeadless();
        org.evosuite.runtime.Runtime.getInstance().resetRuntime();
        org.evosuite.runtime.agent.InstrumentingAgent.activate();
    }

    @After
    public void doneWithTestCase() {
        threadStopper.killAndJoinClientThreads();
        org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks();
        org.evosuite.runtime.classhandling.JDKClassResetter.reset();
        resetClasses();
        org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode();
        org.evosuite.runtime.agent.InstrumentingAgent.deactivate();
        org.evosuite.runtime.GuiSupport.restoreHeadlessMode();
    }

    public static void setSystemProperties() {

        java.lang.System.setProperties((java.util.Properties) defaultProperties.clone());
        java.lang.System.setProperty("file.encoding", "UTF-8");
        java.lang.System.setProperty("java.awt.headless", "true");
        java.lang.System.setProperty(
                "java.io.tmpdir", "/var/folders/t3/x2jshcps4n99vnsnf_qb26qm0000gn/T/");
        java.lang.System.setProperty("user.country", "GB");
        java.lang.System.setProperty("user.dir", "/Users/isaac/IdeaProjects/rocketmq-flink");
        java.lang.System.setProperty("user.home", "/Users/isaac");
        java.lang.System.setProperty("user.language", "en");
        java.lang.System.setProperty("user.name", "isaac");
        java.lang.System.setProperty("user.timezone", "America/Toronto");
    }

    private static void initializeClasses() {
        org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(
                RocketMQRowDataSink_ESTest_scaffolding.class.getClassLoader(),
                "org.apache.rocketmq.client.producer.SendCallback",
                "org.apache.flink.table.types.DataType",
                "org.apache.flink.api.common.functions.RuntimeContext",
                "org.apache.rocketmq.common.message.Message",
                "org.apache.rocketmq.client.ClientConfig",
                "org.apache.rocketmq.remoting.RPCHook",
                "org.apache.flink.runtime.state.FunctionSnapshotContext",
                "org.apache.flink.api.java.typeutils.RowTypeInfo",
                "org.apache.flink.configuration.WritableConfig",
                "org.apache.rocketmq.client.exception.MQClientException",
                "org.apache.rocketmq.client.MQAdmin",
                "org.apache.flink.table.data.RowData$FieldGetter",
                "org.apache.flink.api.common.functions.Function",
                "org.apache.flink.api.common.typeinfo.TypeInformation",
                "org.apache.rocketmq.client.producer.MessageQueueSelector",
                "org.apache.flink.configuration.FallbackKey",
                "org.apache.flink.connector.rocketmq.legacy.common.util.MetricUtils$LatencyGauge",
                "org.apache.flink.streaming.api.functions.sink.SinkFunction",
                "org.apache.flink.streaming.api.checkpoint.CheckpointedFunction",
                "org.apache.flink.runtime.state.FunctionInitializationContext",
                "org.apache.flink.table.data.MapData",
                "org.apache.flink.runtime.state.ManagedSnapshotContext",
                "org.apache.flink.streaming.api.functions.sink.RichSinkFunction",
                "org.apache.flink.api.common.functions.IterationRuntimeContext",
                "org.apache.flink.core.io.IOReadableWritable",
                "org.apache.flink.metrics.Meter",
                "org.apache.flink.table.data.ArrayData",
                "org.apache.flink.table.types.logical.LogicalType",
                "org.apache.flink.api.common.eventtime.Watermark",
                "org.apache.flink.connector.rocketmq.sink.table.RocketMQRowDataConverter",
                "org.apache.flink.runtime.state.ManagedInitializationContext",
                "org.apache.rocketmq.remoting.exception.RemotingException",
                "org.apache.flink.table.data.BoxedWrapperRowData",
                "org.apache.flink.api.common.functions.RichFunction",
                "org.apache.flink.streaming.api.functions.sink.SinkFunction$Context",
                "org.apache.flink.core.memory.DataOutputView",
                "org.apache.flink.metrics.Metric",
                "org.apache.flink.configuration.ReadableConfig",
                "org.apache.rocketmq.client.producer.MQProducer",
                "org.apache.flink.metrics.Gauge",
                "org.apache.flink.connector.rocketmq.sink.table.RocketMQDynamicTableSink$WritableMetadata",
                "org.apache.flink.connector.rocketmq.legacy.RocketMQSink",
                "org.apache.flink.connector.rocketmq.legacy.common.selector.MessageQueueSelector",
                "org.apache.flink.configuration.ConfigOption",
                "org.apache.flink.core.memory.DataInputView",
                "org.apache.rocketmq.client.producer.DefaultMQProducer",
                "org.apache.flink.table.types.AbstractDataType",
                "org.apache.flink.connector.rocketmq.sink.table.RocketMQRowDataSink",
                "org.apache.flink.table.data.RowData",
                "org.apache.flink.table.data.TimestampData",
                "org.apache.flink.configuration.Configuration",
                "org.apache.flink.api.common.typeutils.CompositeType",
                "org.apache.flink.table.data.DecimalData",
                "org.apache.flink.table.data.binary.TypedSetters",
                "org.apache.flink.table.data.StringData",
                "org.apache.flink.api.common.ExecutionConfig$GlobalJobParameters",
                "org.apache.flink.types.RowKind",
                "org.apache.flink.table.data.RawValueData",
                "org.apache.flink.api.common.functions.AbstractRichFunction",
                "org.apache.flink.api.java.typeutils.TupleTypeInfoBase");
    }

    private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException {
        mock(
                Class.forName(
                        "org.apache.flink.configuration.Configuration",
                        false,
                        RocketMQRowDataSink_ESTest_scaffolding.class.getClassLoader()));
        mock(
                Class.forName(
                        "org.apache.flink.connector.rocketmq.legacy.RocketMQSink",
                        false,
                        RocketMQRowDataSink_ESTest_scaffolding.class.getClassLoader()));
        mock(
                Class.forName(
                        "org.apache.flink.connector.rocketmq.sink.table.RocketMQRowDataConverter",
                        false,
                        RocketMQRowDataSink_ESTest_scaffolding.class.getClassLoader()));
        mock(
                Class.forName(
                        "org.apache.flink.streaming.api.functions.sink.SinkFunction$Context",
                        false,
                        RocketMQRowDataSink_ESTest_scaffolding.class.getClassLoader()));
        mock(
                Class.forName(
                        "org.apache.flink.table.data.RowData",
                        false,
                        RocketMQRowDataSink_ESTest_scaffolding.class.getClassLoader()));
        mock(
                Class.forName(
                        "org.apache.rocketmq.common.message.Message",
                        false,
                        RocketMQRowDataSink_ESTest_scaffolding.class.getClassLoader()));
    }

    private static void resetClasses() {
        org.evosuite.runtime.classhandling.ClassResetter.getInstance()
                .setClassLoader(RocketMQRowDataSink_ESTest_scaffolding.class.getClassLoader());

        org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
                "org.apache.flink.api.common.functions.AbstractRichFunction",
                "org.apache.flink.streaming.api.functions.sink.RichSinkFunction",
                "org.apache.flink.connector.rocketmq.sink.table.RocketMQRowDataSink",
                "org.apache.flink.connector.rocketmq.legacy.RocketMQSink",
                "org.apache.flink.connector.rocketmq.sink.table.RocketMQRowDataConverter",
                "org.apache.flink.api.common.ExecutionConfig$GlobalJobParameters",
                "org.apache.flink.configuration.Configuration",
                "org.apache.rocketmq.common.message.Message");
    }
}
