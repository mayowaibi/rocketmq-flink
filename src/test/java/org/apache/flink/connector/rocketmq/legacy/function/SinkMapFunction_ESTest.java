/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 26 12:18:11 GMT 2025
 */

package org.apache.flink.connector.rocketmq.legacy.function;

import org.apache.flink.api.java.tuple.Tuple2;
import org.apache.flink.streaming.api.functions.ProcessFunction;
import org.apache.flink.util.Collector;

import org.apache.rocketmq.common.message.Message;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.Test;
import org.junit.runner.RunWith;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
        mockJVMNonDeterminism = true,
        useVFS = true,
        useVNET = true,
        resetStaticState = true,
        separateClassLoader = true,
        useJEE = true)
public class SinkMapFunction_ESTest extends SinkMapFunction_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0() throws Throwable {
        SinkMapFunction sinkMapFunction0 =
                new SinkMapFunction("the message topic is null", "Key must not be null.");
        Tuple2<String, String> tuple2_0 =
                (Tuple2<String, String>) mock(Tuple2.class, new ViolatedAssumptionAnswer());
        Collector<Message> collector0 =
                (Collector<Message>) mock(Collector.class, new ViolatedAssumptionAnswer());
        try {
            sinkMapFunction0.processElement(tuple2_0, (ProcessFunction.Context) null, collector0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.legacy.function.SinkMapFunction", e);
        }
    }

    @Test(timeout = 4000)
    public void test1() throws Throwable {
        SinkMapFunction sinkMapFunction0 = new SinkMapFunction();
        Tuple2<String, String> tuple2_0 =
                (Tuple2<String, String>) mock(Tuple2.class, new ViolatedAssumptionAnswer());
        ProcessFunction.Context processFunction_Context0 =
                mock(ProcessFunction.Context.class, new ViolatedAssumptionAnswer());
        Collector<Message> collector0 =
                (Collector<Message>) mock(Collector.class, new ViolatedAssumptionAnswer());
        try {
            sinkMapFunction0.processElement(tuple2_0, processFunction_Context0, collector0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // the message topic is null
            //
            verifyException("org.apache.commons.lang.Validate", e);
        }
    }
}
