/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 26 11:17:35 GMT 2025
 */

package org.apache.flink.connector.rocketmq.catalog;

import org.apache.flink.api.common.functions.ReduceFunction;
import org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer;
import org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer;
import org.apache.flink.configuration.Configuration;
import org.apache.flink.configuration.DelegatingConfiguration;
import org.apache.flink.metrics.groups.UnregisteredMetricsGroup;
import org.apache.flink.runtime.jobgraph.JobVertexID;
import org.apache.flink.runtime.metrics.groups.UnregisteredMetricGroups;
import org.apache.flink.streaming.api.operators.BatchGroupedReduceOperator;
import org.apache.flink.table.api.Schema;
import org.apache.flink.table.catalog.CatalogBaseTable;
import org.apache.flink.table.catalog.CatalogDatabase;
import org.apache.flink.table.catalog.CatalogDatabaseImpl;
import org.apache.flink.table.catalog.CatalogFunctionImpl;
import org.apache.flink.table.catalog.CatalogPartitionSpec;
import org.apache.flink.table.catalog.ExternalCatalogTable;
import org.apache.flink.table.catalog.ObjectIdentifier;
import org.apache.flink.table.catalog.ObjectPath;
import org.apache.flink.table.catalog.stats.CatalogColumnStatistics;
import org.apache.flink.table.catalog.stats.CatalogColumnStatisticsDataBase;
import org.apache.flink.table.catalog.stats.CatalogTableStatistics;
import org.apache.flink.table.expressions.Expression;
import org.apache.flink.table.expressions.SqlCallExpression;
import org.apache.flink.table.expressions.ValueLiteralExpression;
import org.apache.flink.table.factories.FactoryUtil;
import org.apache.flink.table.functions.FunctionIdentifier;
import org.apache.flink.table.module.CoreModuleFactory;

import org.apache.flink.shaded.netty4.io.netty.buffer.ByteBuf;
import org.apache.flink.shaded.netty4.io.netty.buffer.ByteBufAllocator;
import org.apache.flink.shaded.netty4.io.netty.buffer.CompositeByteBuf;
import org.apache.flink.shaded.netty4.io.netty.buffer.UnpooledByteBufAllocator;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
        mockJVMNonDeterminism = true,
        useVFS = true,
        useVNET = true,
        resetStaticState = true,
        separateClassLoader = true,
        useJEE = true)
public class RocketMQCatalog_ESTest extends RocketMQCatalog_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        String string0 = "c;\"DB)Wng";
        FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        RocketMQCatalog rocketMQCatalog0 =
                new RocketMQCatalog(
                        "'@DRwJ@n]2XUyr@~", "#JrTvhp@*^]O6 x#r#", "c;\"DB)Wng", "&su~5e");
        ObjectPath objectPath0 = null;
        DelegatingConfiguration delegatingConfiguration0 = new DelegatingConfiguration();
        Map<String, String> map0 = delegatingConfiguration0.toMap();
        CatalogPartitionSpec catalogPartitionSpec0 = new CatalogPartitionSpec(map0);
        catalogPartitionSpec0.toString();
        // Undeclared exception!
        try {
            rocketMQCatalog0.listPartitions((ObjectPath) null, catalogPartitionSpec0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // Table path cannot be null
            //
            verifyException("org.apache.flink.util.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        String string0 = "NpOpz";
        FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "NpOpz");
        RocketMQCatalog rocketMQCatalog0 =
                new RocketMQCatalog("NpOpz", "V", "Database name is not default.", "Wj");
        ObjectPath objectPath0 = null;
        SqlCallExpression sqlCallExpression0 = new SqlCallExpression("V");
        sqlCallExpression0.asSummaryString();
        List<Expression> list0 = sqlCallExpression0.getChildren();
        // Undeclared exception!
        try {
            rocketMQCatalog0.listPartitionsByFilter((ObjectPath) null, list0);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.connector.rocketmq.catalog.RocketMQCatalog", e);
        }
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        RocketMQCatalog rocketMQCatalog0 =
                new RocketMQCatalog(
                        "VzT}fm", "VzT}fm", "VzT}fm", "namesrvAddr cannot be null or empty");
        try {
            rocketMQCatalog0.listTables("VzT}fm");
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // Failed to get topics of namespace VzT}fm from schema registry client.
            //
            verifyException("org.apache.flink.connector.rocketmq.catalog.RocketMQCatalog", e);
        }
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        RocketMQCatalog rocketMQCatalog0 =
                new RocketMQCatalog("topic", "topic", "sA$Y~gb5.", "topic");
        ObjectPath objectPath0 = new ObjectPath("sA$Y~gb5.", "sA$Y~gb5.");
        objectPath0.toString();
        objectPath0.toString();
        Integer integer0 = new Integer(3737);
        FileSystemHandling.createFolder((EvoSuiteFile) null);
        String string0 = "oQrj@LW[ -Rm?";
        DelegatingConfiguration delegatingConfiguration0 = new DelegatingConfiguration();
        Map<String, String> map0 = delegatingConfiguration0.toMap();
        CatalogPartitionSpec catalogPartitionSpec0 = new CatalogPartitionSpec(map0);
        rocketMQCatalog0.getPartitionStatistics(objectPath0, catalogPartitionSpec0);
        CatalogPartitionSpec catalogPartitionSpec1 =
                mock(CatalogPartitionSpec.class, new ViolatedAssumptionAnswer());
        CatalogTableStatistics catalogTableStatistics0 =
                rocketMQCatalog0.getPartitionStatistics(objectPath0, catalogPartitionSpec1);
        Map<String, String> map1 = catalogTableStatistics0.getProperties();
        CatalogPartitionSpec catalogPartitionSpec2 = new CatalogPartitionSpec(map1);
        try {
            rocketMQCatalog0.listPartitions(objectPath0, catalogPartitionSpec2);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // Failed to list partitions of table sA$Y~gb5..sA$Y~gb5. by defaultMQAdminExt.
            //
            verifyException("org.apache.flink.connector.rocketmq.catalog.RocketMQCatalog", e);
        }
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        RocketMQCatalog rocketMQCatalog0 =
                new RocketMQCatalog("zE]:(l[$r\fZ,6 vt", "y8'", "|1+s", "Asa3id SK9fE)[%nFQV");
        String string0 = " 2";
        ObjectPath objectPath0 = new ObjectPath("}_Nv*>&G", "Only support avro schema.");
        Schema schema0 = Schema.derived();
        ExternalCatalogTable externalCatalogTable0 = new ExternalCatalogTable(schema0);
        CatalogBaseTable catalogBaseTable0 = externalCatalogTable0.copy();
        // Undeclared exception!
        try {
            rocketMQCatalog0.createTable(objectPath0, catalogBaseTable0, false);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.connector.rocketmq.catalog.RocketMQCatalog", e);
        }
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        FileSystemHandling.shouldAllThrowIOExceptions();
        RocketMQCatalog rocketMQCatalog0 = new RocketMQCatalog("g_\"{", "g_\"{", "g_\"{", "g_\"{");
        ObjectPath objectPath0 = new ObjectPath("default", "g_\"{");
        FileSystemHandling.createFolder((EvoSuiteFile) null);
        // Undeclared exception!
        try {
            rocketMQCatalog0.dropTable(objectPath0, true);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.connector.rocketmq.catalog.RocketMQCatalog", e);
        }
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        String string0 = "(gG(4<1#$q";
        RocketMQCatalog rocketMQCatalog0 =
                new RocketMQCatalog("(gG(4<1#$q", "(gG(4<1#$q", "(gG(4<1#$q", "(gG(4<1#$q");
        // Undeclared exception!
        try {
            rocketMQCatalog0.listFunctions("(gG(4<1#$q");
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.connector.rocketmq.catalog.RocketMQCatalog", e);
        }
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        String string0 = "95wN4W";
        RocketMQCatalog rocketMQCatalog0 =
                new RocketMQCatalog("Custom Source", "95wN4W", "rocketmq", "Custom Source");
        ObjectIdentifier objectIdentifier0 =
                ObjectIdentifier.of(
                        "Custom Source",
                        "schemaRegistryUrl cannot be null or empty",
                        "Custom Source");
        ObjectPath objectPath0 = objectIdentifier0.toObjectPath();
        CatalogFunctionImpl catalogFunctionImpl0 = new CatalogFunctionImpl("default");
        objectPath0.getFullName();
        catalogFunctionImpl0.copy();
        boolean boolean0 = false;
        CatalogPartitionSpec catalogPartitionSpec0 = null;
        try {
            rocketMQCatalog0.listPartitions(objectPath0, (CatalogPartitionSpec) null);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // Failed to list partitions of table schemaRegistryUrl cannot be null or empty.Custom
            // Source by defaultMQAdminExt.
            //
            verifyException("org.apache.flink.connector.rocketmq.catalog.RocketMQCatalog", e);
        }
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        RocketMQCatalog rocketMQCatalog0 =
                new RocketMQCatalog("/O(nMJlkp3ai", "/O(nMJlkp3ai", "rocketmq", "/O(nMJlkp3ai");
        ObjectPath objectPath0 = null;
        HashMap<String, CatalogColumnStatisticsDataBase> hashMap0 =
                new HashMap<String, CatalogColumnStatisticsDataBase>();
        CatalogColumnStatistics catalogColumnStatistics0 = new CatalogColumnStatistics(hashMap0);
        Map<String, String> map0 = catalogColumnStatistics0.getProperties();
        DelegatingConfiguration delegatingConfiguration0 = new DelegatingConfiguration();
        ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
        FactoryUtil.DefaultModuleContext factoryUtil_DefaultModuleContext0 =
                new FactoryUtil.DefaultModuleContext(map0, delegatingConfiguration0, classLoader0);
        Map<String, String> map1 = factoryUtil_DefaultModuleContext0.getOptions();
        CatalogPartitionSpec catalogPartitionSpec0 = new CatalogPartitionSpec(map1);
        catalogPartitionSpec0.toString();
        rocketMQCatalog0.getPartition((ObjectPath) null, catalogPartitionSpec0);
        rocketMQCatalog0.close();
        CatalogPartitionSpec catalogPartitionSpec1 = new CatalogPartitionSpec(map0);
        RocketMQCatalog rocketMQCatalog1 = null;
        try {
            rocketMQCatalog1 =
                    new RocketMQCatalog("/O(nMJlkp3ai", "x4cJ{ #J", "nameServerAddress", "");
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // schemaRegistryUrl cannot be null or empty
            //
            verifyException("org.apache.flink.util.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        RocketMQCatalog rocketMQCatalog0 =
                new RocketMQCatalog(
                        "?_/{>qWyv#%=/TMM",
                        "?_/{>qWyv#%=/TMM",
                        "Whether to enable the JVM direct memory limit of the JobManager process (-XX:MaxDirectMemorySize). The limit will be set to the value of '%s' option. ",
                        ".&!G Aa[/");
        ObjectPath objectPath0 =
                new ObjectPath(
                        "Failed to get topics of namespace %s from schema registry client.",
                        "lQDjh9");
        String string0 = "TaskManager received a checkpoint request for unknown task ";
        CatalogFunctionImpl catalogFunctionImpl0 =
                new CatalogFunctionImpl(
                        "TaskManager received a checkpoint request for unknown task ");
        catalogFunctionImpl0.getDetailedDescription();
        // Undeclared exception!
        try {
            rocketMQCatalog0.createFunction(objectPath0, catalogFunctionImpl0, true);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.connector.rocketmq.catalog.RocketMQCatalog", e);
        }
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        RocketMQCatalog rocketMQCatalog0 =
                new RocketMQCatalog(
                        "e",
                        "e",
                        "e",
                        "Byte array does not provide enough space to store requested data.");
        ObjectPath objectPath0 = new ObjectPath("e", "default");
        CatalogPartitionSpec catalogPartitionSpec0 = null;
        // Undeclared exception!
        try {
            rocketMQCatalog0.getPartition(objectPath0, (CatalogPartitionSpec) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.connector.rocketmq.catalog.RocketMQCatalog", e);
        }
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        RocketMQCatalog rocketMQCatalog0 =
                new RocketMQCatalog("-1Y", "-1Y", "-1Y", "=PrbTg0MB/V U#R");
        UnregisteredMetricsGroup unregisteredMetricsGroup0 = new UnregisteredMetricsGroup();
        Map<String, String> map0 = unregisteredMetricsGroup0.getAllVariables();
        CatalogPartitionSpec catalogPartitionSpec0 = new CatalogPartitionSpec(map0);
        HashMap<String, CatalogColumnStatisticsDataBase> hashMap0 =
                new HashMap<String, CatalogColumnStatisticsDataBase>();
        CatalogColumnStatistics catalogColumnStatistics0 =
                new CatalogColumnStatistics(hashMap0, map0);
        CatalogColumnStatistics catalogColumnStatistics1 = catalogColumnStatistics0.copy();
        // Undeclared exception!
        try {
            rocketMQCatalog0.alterPartitionColumnStatistics(
                    (ObjectPath) null, catalogPartitionSpec0, catalogColumnStatistics1, false);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.connector.rocketmq.catalog.RocketMQCatalog", e);
        }
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        RocketMQCatalog rocketMQCatalog0 =
                new RocketMQCatalog(
                        "&kwO=",
                        "Failed to get schema of table %s from schema registry client.",
                        "lBv_9N8snE]2dL1T#%",
                        "topic");
        rocketMQCatalog0.getFactory();
        ObjectPath objectPath0 = null;
        Map<String, String> map0 = null;
        CatalogTableStatistics catalogTableStatistics0 =
                new CatalogTableStatistics((-1641L), 2824, 2824, 1864L);
        // Undeclared exception!
        try {
            rocketMQCatalog0.alterTableStatistics(
                    (ObjectPath) null, catalogTableStatistics0, false);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.connector.rocketmq.catalog.RocketMQCatalog", e);
        }
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
        RocketMQCatalog rocketMQCatalog0 =
                new RocketMQCatalog(
                        "Not support to find functions.",
                        "Not support to find functions.",
                        "QApyf>8",
                        "QApyf>8");
        boolean boolean0 = rocketMQCatalog0.databaseExists("Not support to find functions.");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test14() throws Throwable {
        RocketMQCatalog rocketMQCatalog0 =
                new RocketMQCatalog("W&60^!lB'2", "W&60^!lB'2", "W&60^!lB'2", "W&60^!lB'2");
        rocketMQCatalog0.getDatabase("W&60^!lB'2");
        // Undeclared exception!
        try {
            ObjectPath.fromString("sC+J8LawO{X:%");
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Cannot get split 'sC+J8LawO{X:%' to get databaseName and objectName
            //
            verifyException("org.apache.flink.table.catalog.ObjectPath", e);
        }
    }

    @Test(timeout = 4000)
    public void test15() throws Throwable {
        RocketMQCatalog rocketMQCatalog0 = new RocketMQCatalog("OI'4q=7", "{", "GMj", "Y][3\"kA");
        ObjectPath objectPath0 = new ObjectPath("default", "OI'4q=7");
        // Undeclared exception!
        try {
            rocketMQCatalog0.renameTable(objectPath0, "Q", true);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.connector.rocketmq.catalog.RocketMQCatalog", e);
        }
    }

    @Test(timeout = 4000)
    public void test16() throws Throwable {
        String string0 = "%Pa[S=wr;%u.,O7";
        RocketMQCatalog rocketMQCatalog0 =
                new RocketMQCatalog(
                        "org.apache.flink.connector.rocketmq.catalog.RocketMQCatalog$1",
                        "org.apache.flink.connector.rocketmq.catalog.RocketMQCatalog$1",
                        "%Pa[S=wr;%u.,O7",
                        "%Pa[S=wr;%u.,O7");
        String string1 = "Failed to get schema of table %s from schema registry client.";
        ObjectPath objectPath0 =
                new ObjectPath(
                        "default", "Failed to get schema of table %s from schema registry client.");
        objectPath0.equals(rocketMQCatalog0);
        // Undeclared exception!
        try {
            rocketMQCatalog0.functionExists(objectPath0);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.connector.rocketmq.catalog.RocketMQCatalog", e);
        }
    }

    @Test(timeout = 4000)
    public void test17() throws Throwable {
        RocketMQCatalog rocketMQCatalog0 =
                new RocketMQCatalog(
                        "ecC&.+{BgNU}", "ecC&.+{BgNU}", "Q_[~oIk", "Orders may not be empty");
        ObjectPath objectPath0 = new ObjectPath("L4+XuJs", "LGj7\">[f [");
        // Undeclared exception!
        try {
            rocketMQCatalog0.functionExists(objectPath0);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.connector.rocketmq.catalog.RocketMQCatalog", e);
        }
    }

    @Test(timeout = 4000)
    public void test18() throws Throwable {
        String string0 = "UtlRP_lCEg 7)pedVoV";
        RocketMQCatalog rocketMQCatalog0 =
                new RocketMQCatalog(
                        "Table path cannot be null",
                        "UtlRP_lCEg 7)pedVoV",
                        "UtlRP_lCEg 7)pedVoV",
                        "UtlRP_lCEg 7)pedVoV");
        ObjectPath objectPath0 = null;
        rocketMQCatalog0.close();
        // Undeclared exception!
        try {
            rocketMQCatalog0.dropFunction((ObjectPath) null, true);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.connector.rocketmq.catalog.RocketMQCatalog", e);
        }
    }

    @Test(timeout = 4000)
    public void test19() throws Throwable {
        String string0 = ":A38||_";
        RocketMQCatalog rocketMQCatalog0 =
                new RocketMQCatalog(":A38||_", "+$L:p]/cMb{hv%", "+$L:p]/cMb{hv%", "R}ZHgJ~Q");
        ObjectPath objectPath0 = new ObjectPath("TU$`YJ", "><vtB6W4kg-Q/[");
        // Undeclared exception!
        try {
            rocketMQCatalog0.dropFunction(objectPath0, true);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.connector.rocketmq.catalog.RocketMQCatalog", e);
        }
    }

    @Test(timeout = 4000)
    public void test20() throws Throwable {
        RocketMQCatalog rocketMQCatalog0 = new RocketMQCatalog("9bd&", "9bd&", "9bd&", "9bd&");
        rocketMQCatalog0.close();
        rocketMQCatalog0.listDatabases();
        // Undeclared exception!
        try {
            ObjectPath.fromString("default");
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Cannot get split 'default' to get databaseName and objectName
            //
            verifyException("org.apache.flink.table.catalog.ObjectPath", e);
        }
    }

    @Test(timeout = 4000)
    public void test21() throws Throwable {
        String string0 = "j6XO";
        RocketMQCatalog rocketMQCatalog0 =
                new RocketMQCatalog(
                        "j6XO",
                        "org.apache.flink.core.io.LocatableInputSplit",
                        "org.apache.flink.core.io.LocatableInputSplit",
                        "org.apache.flink.table.runtime.operators.aggregate.RecordCounter");
        rocketMQCatalog0.listDatabases();
        try {
            rocketMQCatalog0.open();
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // Failed to create RocketMQ admin using :org.apache.flink.core.io.LocatableInputSplit
            //
            verifyException("org.apache.flink.connector.rocketmq.catalog.RocketMQCatalog", e);
        }
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        String string0 = "Database name can not be null or empty.";
        RocketMQCatalog rocketMQCatalog0 =
                new RocketMQCatalog(
                        "bZ&%Cf/Z",
                        "+BBjdBK51u2o%Xf}`<",
                        "bZ&%Cf/Z",
                        "Database name can not be null or empty.");
        rocketMQCatalog0.getFactory();
        ObjectIdentifier objectIdentifier0 = ObjectIdentifier.of("bZ&%Cf/Z", "bZ&%Cf/Z", ",Ks)H");
        ObjectPath objectPath0 = objectIdentifier0.toObjectPath();
        try {
            rocketMQCatalog0.getFunction(objectPath0);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // Function bZ&%Cf/Z.,Ks)H does not exist in Catalog Not support to find functions..
            //
            verifyException("org.apache.flink.connector.rocketmq.catalog.RocketMQCatalog", e);
        }
    }

    @Test(timeout = 4000)
    public void test23() throws Throwable {
        RocketMQCatalog rocketMQCatalog0 =
                new RocketMQCatalog("{oKIT}%9Q<Xs", "{oKIT}%9Q<Xs", "WL'_AL3{7U", "WL'_AL3{7U");
        String string0 = "";
        ObjectIdentifier objectIdentifier0 =
                ObjectIdentifier.of(
                        "WL'_AL3{7U", "{oKIT}%9Q<Xs", "schemaRegistryUrl cannot be null or empty");
        ObjectIdentifier objectIdentifier1 =
                FunctionIdentifier.normalizeObjectIdentifier(objectIdentifier0);
        ObjectPath objectPath0 = objectIdentifier1.toObjectPath();
        try {
            rocketMQCatalog0.getFunction(objectPath0);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // Function {oKIT}%9Q<Xs.schemaregistryurl cannot be null or empty does not exist in
            // Catalog Not support to find functions..
            //
            verifyException("org.apache.flink.connector.rocketmq.catalog.RocketMQCatalog", e);
        }
    }

    @Test(timeout = 4000)
    public void test24() throws Throwable {
        RocketMQCatalog rocketMQCatalog0 =
                new RocketMQCatalog("8E3\f?a6ZK", "-p]l?", "-p]l?", "8E3\f?a6ZK");
        String string0 = null;
        String string1 = null;
        // Undeclared exception!
        try {
            rocketMQCatalog0.listViews((String) null);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.connector.rocketmq.catalog.RocketMQCatalog", e);
        }
    }

    @Test(timeout = 4000)
    public void test25() throws Throwable {
        RocketMQCatalog rocketMQCatalog0 =
                new RocketMQCatalog("rocketmq", "rocketmq", "rocketmq", "rocketmq");
        UnregisteredMetricsGroup unregisteredMetricsGroup0 = new UnregisteredMetricsGroup();
        Map<String, String> map0 = unregisteredMetricsGroup0.getAllVariables();
        String string0 = null;
        unregisteredMetricsGroup0.getAllVariables();
        CatalogDatabaseImpl catalogDatabaseImpl0 = new CatalogDatabaseImpl(map0, (String) null);
        boolean boolean0 = false;
        // Undeclared exception!
        try {
            rocketMQCatalog0.alterDatabase("rocketmq", catalogDatabaseImpl0, false);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.connector.rocketmq.catalog.RocketMQCatalog", e);
        }
    }

    @Test(timeout = 4000)
    public void test26() throws Throwable {
        RocketMQCatalog rocketMQCatalog0 =
                new RocketMQCatalog(
                        "R`YqJJ.w0I<;'1rT",
                        "R`YqJJ.w0I<;'1rT",
                        "R`YqJJ.w0I<;'1rT",
                        "R`YqJJ.w0I<;'1rT");
        CatalogColumnStatistics catalogColumnStatistics0 = CatalogColumnStatistics.UNKNOWN;
        Map<String, String> map0 = catalogColumnStatistics0.getProperties();
        CatalogDatabaseImpl catalogDatabaseImpl0 =
                new CatalogDatabaseImpl(map0, "R`YqJJ.w0I<;'1rT");
        CatalogDatabase catalogDatabase0 = catalogDatabaseImpl0.copy();
        // Undeclared exception!
        try {
            rocketMQCatalog0.alterDatabase("R`YqJJ.w0I<;'1rT", catalogDatabase0, true);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.connector.rocketmq.catalog.RocketMQCatalog", e);
        }
    }

    @Test(timeout = 4000)
    public void test27() throws Throwable {
        String string0 = "@s8,vz5J/\\u?huKlJ";
        RocketMQCatalog rocketMQCatalog0 =
                new RocketMQCatalog("*HN1nn.", "gE I X~!KySFOTm 9", string0, "*HN1nn.");
        ObjectPath objectPath0 = new ObjectPath(string0, "default");
        objectPath0.getFullName();
        rocketMQCatalog0.getTableStatistics(objectPath0);
        try {
            rocketMQCatalog0.listTables(
                    "org.apache.flink.runtime.io.network.partition.ResultPartition");
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // Database org.apache.flink.runtime.io.network.partition.ResultPartition does not exist
            // in Catalog *HN1nn..
            //
            verifyException("org.apache.flink.connector.rocketmq.catalog.RocketMQCatalog", e);
        }
    }

    @Test(timeout = 4000)
    public void test28() throws Throwable {
        String string0 =
                "org.apache.flink.table.catalog.exceptions.PartitionAlreadyExistsException";
        RocketMQCatalog rocketMQCatalog0 =
                new RocketMQCatalog(
                        "%=&",
                        "nameServerAddress",
                        "nameServerAddress",
                        "org.apache.flink.table.catalog.exceptions.PartitionAlreadyExistsException");
        String string1 = "";
        // Undeclared exception!
        try {
            rocketMQCatalog0.dropDatabase("%=&", false, false);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.connector.rocketmq.catalog.RocketMQCatalog", e);
        }
    }

    @Test(timeout = 4000)
    public void test29() throws Throwable {
        RocketMQCatalog rocketMQCatalog0 =
                new RocketMQCatalog("13oW@kftQK}ET_gc0", "dataPort", "13oW@kftQK}ET_gc0", ";8");
        String string0 = "";
        ObjectPath objectPath0 = null;
        // Undeclared exception!
        try {
            rocketMQCatalog0.tableExists((ObjectPath) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.connector.rocketmq.catalog.RocketMQCatalog", e);
        }
    }

    @Test(timeout = 4000)
    public void test30() throws Throwable {
        RocketMQCatalog rocketMQCatalog0 =
                new RocketMQCatalog(
                        "namesrvAddr cannot be null or empty",
                        "9>E",
                        "9>E",
                        "chainedTaskConfig_");
        boolean boolean0 = rocketMQCatalog0.databaseExists("#0:{Gtv8");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test31() throws Throwable {
        String string0 = "default";
        RocketMQCatalog rocketMQCatalog0 = new RocketMQCatalog("default", "D", "D", "D");
        String string1 = null;
        ObjectPath objectPath0 = null;
        CatalogColumnStatistics catalogColumnStatistics0 =
                rocketMQCatalog0.getTableColumnStatistics((ObjectPath) null);
        CatalogColumnStatistics catalogColumnStatistics1 = catalogColumnStatistics0.copy();
        catalogColumnStatistics0.copy();
        // Undeclared exception!
        try {
            rocketMQCatalog0.alterTableColumnStatistics(
                    (ObjectPath) null, catalogColumnStatistics1, true);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.connector.rocketmq.catalog.RocketMQCatalog", e);
        }
    }

    @Test(timeout = 4000)
    public void test32() throws Throwable {
        RocketMQCatalog rocketMQCatalog0 =
                new RocketMQCatalog(
                        "CHECKPOINT_DECLINED_TASK_NOT_READY",
                        "F{05Ox~D",
                        "org.apache.flink.connector.rocketmq.catalog.RocketMQCatalog$1",
                        "AU^5P5uR[g`/cf%_W.:");
        ObjectPath objectPath0 =
                new ObjectPath(
                        "(I)V", "org.apache.flink.connector.rocketmq.catalog.RocketMQCatalog$1");
        CatalogColumnStatistics catalogColumnStatistics0 =
                rocketMQCatalog0.getTableColumnStatistics(objectPath0);
        boolean boolean0 = true;
        // Undeclared exception!
        try {
            rocketMQCatalog0.alterTableColumnStatistics(
                    objectPath0, catalogColumnStatistics0, true);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.connector.rocketmq.catalog.RocketMQCatalog", e);
        }
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        RocketMQCatalog rocketMQCatalog0 =
                new RocketMQCatalog(
                        "9.M",
                        "Failed to judge partition %s of table %s exists by defaultMQAdminExt.",
                        "9.M",
                        "org.apache.flink.runtime.operators.hash.HashPartition");
        ObjectPath objectPath0 = null;
        RocketMQCatalog rocketMQCatalog1 =
                new RocketMQCatalog(
                        "tCh@vjkJ",
                        "!?",
                        "9.M",
                        "org.apache.flink.runtime.operators.hash.HashPartition");
        try {
            rocketMQCatalog1.listTables("");
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // Database  does not exist in Catalog tCh@vjkJ.
            //
            verifyException("org.apache.flink.connector.rocketmq.catalog.RocketMQCatalog", e);
        }
    }

    @Test(timeout = 4000)
    public void test34() throws Throwable {
        RocketMQCatalog rocketMQCatalog0 = null;
        try {
            rocketMQCatalog0 = new RocketMQCatalog("", "", (String) null, (String) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // name cannot be null or empty
            //
            verifyException("org.apache.flink.util.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test35() throws Throwable {
        RocketMQCatalog rocketMQCatalog0 =
                new RocketMQCatalog(
                        "|(oQI`9F-H0K(s/:",
                        "|(oQI`9F-H0K(s/:",
                        "Not support to find functions.",
                        "B1r/FvJ");
        assertEquals("|(oQI`9F-H0K(s/:", rocketMQCatalog0.getName());
    }

    @Test(timeout = 4000)
    public void test36() throws Throwable {
        String string0 = "<5i";
        RocketMQCatalog rocketMQCatalog0 = new RocketMQCatalog("<5i", "<5i", "<5i", "<5i");
        ObjectPath objectPath0 = new ObjectPath("<5i", "Created RocketMQ Catalog {}");
        CatalogPartitionSpec catalogPartitionSpec0 = null;
        CatalogTableStatistics catalogTableStatistics0 = CatalogTableStatistics.UNKNOWN;
        try {
            rocketMQCatalog0.getTable(objectPath0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // Failed to get schema of table <5i.Created RocketMQ Catalog {} from schema registry
            // client.
            //
            verifyException("org.apache.flink.connector.rocketmq.catalog.RocketMQCatalog", e);
        }
    }

    @Test(timeout = 4000)
    public void test37() throws Throwable {
        RocketMQCatalog rocketMQCatalog0 = null;
        try {
            rocketMQCatalog0 =
                    new RocketMQCatalog(
                            "Partition keys must not be null.",
                            "Partition keys must not be null.",
                            "",
                            "");
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // namesrvAddr cannot be null or empty
            //
            verifyException("org.apache.flink.util.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test38() throws Throwable {
        String string0 = "ARRAY";
        RocketMQCatalog rocketMQCatalog0 = new RocketMQCatalog("ARRAY", "ARRAY", "ARRAY", "ARRAY");
        ReduceFunction<CoreModuleFactory> reduceFunction0 =
                (ReduceFunction<CoreModuleFactory>)
                        mock(ReduceFunction.class, new ViolatedAssumptionAnswer());
        byte[] byteArray0 = new byte[6];
        byteArray0[0] = (byte) 88;
        byteArray0[1] = (byte) 0;
        byteArray0[2] = (byte) 2;
        byteArray0[3] = (byte) 13;
        byteArray0[4] = (byte) (-116);
        byteArray0[5] = (byte) 101;
        UnloadableDummyTypeSerializer<CoreModuleFactory> unloadableDummyTypeSerializer0 =
                new UnloadableDummyTypeSerializer<CoreModuleFactory>(byteArray0);
        SingleThreadAccessCheckingTypeSerializer<CoreModuleFactory>
                singleThreadAccessCheckingTypeSerializer0 =
                        new SingleThreadAccessCheckingTypeSerializer<CoreModuleFactory>(
                                unloadableDummyTypeSerializer0);
        BatchGroupedReduceOperator<CoreModuleFactory, ValueLiteralExpression>
                batchGroupedReduceOperator0 =
                        new BatchGroupedReduceOperator<CoreModuleFactory, ValueLiteralExpression>(
                                reduceFunction0, singleThreadAccessCheckingTypeSerializer0);
        Configuration configuration0 = batchGroupedReduceOperator0.getUserFunctionParameters();
        Map<String, String> map0 = configuration0.toMap();
        CatalogDatabaseImpl catalogDatabaseImpl0 = new CatalogDatabaseImpl(map0, "default");
        // Undeclared exception!
        try {
            rocketMQCatalog0.createDatabase("ARRAY", catalogDatabaseImpl0, true);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.connector.rocketmq.catalog.RocketMQCatalog", e);
        }
    }

    @Test(timeout = 4000)
    public void test39() throws Throwable {
        String string0 = null;
        String string1 = "";
        RocketMQCatalog rocketMQCatalog0 = null;
        try {
            rocketMQCatalog0 = new RocketMQCatalog((String) null, (String) null, (String) null, "");
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // name cannot be null or empty
            //
            verifyException("org.apache.flink.util.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test40() throws Throwable {
        String string0 = "org.apache.flink.connector.rocketmq.catalog.RocketMQCatalog";
        String string1 = "";
        RocketMQCatalog rocketMQCatalog0 = null;
        try {
            rocketMQCatalog0 =
                    new RocketMQCatalog(
                            "org.apache.flink.connector.rocketmq.catalog.RocketMQCatalog",
                            "org.apache.flink.connector.rocketmq.catalog.RocketMQCatalog",
                            "",
                            "");
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // namesrvAddr cannot be null or empty
            //
            verifyException("org.apache.flink.util.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test41() throws Throwable {
        String string0 = "{";
        String string1 = "`;1D0";
        String string2 = null;
        RocketMQCatalog rocketMQCatalog0 = null;
        try {
            rocketMQCatalog0 = new RocketMQCatalog("{", "{", "`;1D0", (String) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // schemaRegistryUrl cannot be null or empty
            //
            verifyException("org.apache.flink.util.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test42() throws Throwable {
        RocketMQCatalog rocketMQCatalog0 =
                new RocketMQCatalog(
                        "9.M",
                        "Failed to judge partition% of table %s exists by defaultMQAdminExt.",
                        "9.M",
                        "org.apache.flink.runtime.operators.hash.HashPartition");
        ObjectPath objectPath0 = null;
        RocketMQCatalog rocketMQCatalog1 =
                new RocketMQCatalog(
                        "tCh@vjkJ",
                        "!?",
                        "9.M",
                        "org.apache.flink.runtime.operators.hash.HashPartition");
        try {
            rocketMQCatalog1.listTables("");
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // Database  does not exist in Catalog tCh@vjkJ.
            //
            verifyException("org.apache.flink.connector.rocketmq.catalog.RocketMQCatalog", e);
        }
    }

    @Test(timeout = 4000)
    public void test43() throws Throwable {
        String string0 = "yIj";
        String string1 = "8-a'*+doTL+Se=";
        RocketMQCatalog rocketMQCatalog0 =
                new RocketMQCatalog("yIj", "}Wk_C", "8-a'*+doTL+Se=", "yIj");
        try {
            rocketMQCatalog0.getDatabase("Database name is not default.");
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // Database Database name is not default. does not exist in Catalog yIj.
            //
            verifyException("org.apache.flink.connector.rocketmq.catalog.RocketMQCatalog", e);
        }
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        String string0 = null;
        String string1 = "yn';OklKv";
        RocketMQCatalog rocketMQCatalog0 = null;
        try {
            rocketMQCatalog0 =
                    new RocketMQCatalog((String) null, (String) null, "yn';OklKv", "h}2B9");
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // name cannot be null or empty
            //
            verifyException("org.apache.flink.util.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test45() throws Throwable {
        String string0 = "";
        String string1 = "mM5\\";
        RocketMQCatalog rocketMQCatalog0 = null;
        try {
            rocketMQCatalog0 =
                    new RocketMQCatalog(
                            "",
                            "Failed to list partitions of table %s by defaultMQAdminExt.",
                            "",
                            "mM5");
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // name cannot be null or empty
            //
            verifyException("org.apache.flink.util.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test46() throws Throwable {
        String string0 = "Invalid structured type.";
        RocketMQCatalog rocketMQCatalog0 =
                new RocketMQCatalog(
                        "TBx^OOXJ;hq{{.",
                        "TBx^OOXJ;hq{{.",
                        "Invalid structured type.",
                        "Error while committing transaction {}. Transaction has been open for longer than the transaction timeout ({}).Commit will not be attempted again. Data loss might have occurred.");
        rocketMQCatalog0.getFactory();
        ObjectPath objectPath0 = null;
        UnregisteredMetricGroups.UnregisteredTaskManagerJobMetricGroup
                unregisteredMetricGroups_UnregisteredTaskManagerJobMetricGroup0 =
                        new UnregisteredMetricGroups.UnregisteredTaskManagerJobMetricGroup();
        JobVertexID jobVertexID0 = new JobVertexID(1123L, 3L);
        ByteBufAllocator byteBufAllocator0 = null;
        boolean boolean0 = false;
        ByteBuf[] byteBufArray0 = new ByteBuf[2];
        UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
        CompositeByteBuf compositeByteBuf0 = unpooledByteBufAllocator0.compositeDirectBuffer(5760);
        byte[] byteArray0 = new byte[9];
        byteArray0[0] = (byte) 96;
        byteArray0[1] = (byte) 0;
        byteArray0[2] = (byte) 98;
        byteArray0[3] = (byte) 33;
        byteArray0[4] = (byte) (-91);
        byteArray0[5] = (byte) 0;
        byteArray0[6] = (byte) (-128);
        byteArray0[7] = (byte) (-25);
        byteArray0[8] = (byte) (-86);
        CompositeByteBuf compositeByteBuf1 = compositeByteBuf0.writeBytes(byteArray0);
        byteBufArray0[0] = (ByteBuf) compositeByteBuf1;
        // Undeclared exception!
        try {
            compositeByteBuf1.getBytes((-1), byteBufArray0[0]);
            fail("Expecting exception: IndexOutOfBoundsException");

        } catch (IndexOutOfBoundsException e) {
            //
            // index: -1, length: 55 (expected: range(0, 64))
            //
            verifyException("org.apache.flink.shaded.netty4.io.netty.buffer.AbstractByteBuf", e);
        }
    }
}
