/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 26 12:09:39 GMT 2025
 */

package org.apache.flink.connector.rocketmq.source.enumerator.allocate;

import org.apache.flink.connector.rocketmq.source.split.RocketMQSourceSplit;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.Collection;
import java.util.Map;
import java.util.Set;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
        mockJVMNonDeterminism = true,
        useVFS = true,
        useVNET = true,
        resetStaticState = true,
        separateClassLoader = true,
        useJEE = true)
public class BroadcastAllocateStrategy_ESTest extends BroadcastAllocateStrategy_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0() throws Throwable {
        BroadcastAllocateStrategy broadcastAllocateStrategy0 = new BroadcastAllocateStrategy();
        // Undeclared exception!
        try {
            broadcastAllocateStrategy0.allocate((Collection<RocketMQSourceSplit>) null, 1768, 1372);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.util.AbstractCollection", e);
        }
    }

    @Test(timeout = 4000)
    public void test1() throws Throwable {
        BroadcastAllocateStrategy broadcastAllocateStrategy0 = new BroadcastAllocateStrategy();
        // Undeclared exception!
        try {
            broadcastAllocateStrategy0.allocate((Collection<RocketMQSourceSplit>) null, (-3348));
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Illegal initial capacity: -3348
            //
            verifyException("java.util.HashMap", e);
        }
    }

    @Test(timeout = 4000)
    public void test2() throws Throwable {
        BroadcastAllocateStrategy broadcastAllocateStrategy0 = new BroadcastAllocateStrategy();
        Map<Integer, Set<RocketMQSourceSplit>> map0 =
                broadcastAllocateStrategy0.allocate((Collection<RocketMQSourceSplit>) null, 0);
        assertTrue(map0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test3() throws Throwable {
        BroadcastAllocateStrategy broadcastAllocateStrategy0 = new BroadcastAllocateStrategy();
        // Undeclared exception!
        try {
            broadcastAllocateStrategy0.allocate((Collection<RocketMQSourceSplit>) null, 7);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.util.AbstractCollection", e);
        }
    }

    @Test(timeout = 4000)
    public void test4() throws Throwable {
        BroadcastAllocateStrategy broadcastAllocateStrategy0 = new BroadcastAllocateStrategy();
        Map<Integer, Set<RocketMQSourceSplit>> map0 =
                broadcastAllocateStrategy0.allocate((Collection<RocketMQSourceSplit>) null, 0, 0);
        assertTrue(map0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test5() throws Throwable {
        BroadcastAllocateStrategy broadcastAllocateStrategy0 = new BroadcastAllocateStrategy();
        String string0 = broadcastAllocateStrategy0.getStrategyName();
        assertEquals("broadcast", string0);
    }

    @Test(timeout = 4000)
    public void test6() throws Throwable {
        BroadcastAllocateStrategy broadcastAllocateStrategy0 = new BroadcastAllocateStrategy();
        // Undeclared exception!
        try {
            broadcastAllocateStrategy0.allocate(
                    (Collection<RocketMQSourceSplit>) null, (-2631), (-2631));
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Illegal initial capacity: -2631
            //
            verifyException("java.util.HashMap", e);
        }
    }
}
