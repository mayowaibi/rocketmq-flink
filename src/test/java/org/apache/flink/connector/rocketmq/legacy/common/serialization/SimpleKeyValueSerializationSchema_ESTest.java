/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 26 11:37:35 GMT 2025
 */

package org.apache.flink.connector.rocketmq.legacy.common.serialization;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.HashMap;
import java.util.Map;

import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
        mockJVMNonDeterminism = true,
        useVFS = true,
        useVNET = true,
        resetStaticState = true,
        separateClassLoader = true,
        useJEE = true)
public class SimpleKeyValueSerializationSchema_ESTest
        extends SimpleKeyValueSerializationSchema_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0() throws Throwable {
        SimpleKeyValueSerializationSchema simpleKeyValueSerializationSchema0 =
                new SimpleKeyValueSerializationSchema("vs&$5h65Ek,o/[3.W", "vs&$5h65Ek,o/[3.W");
        HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
        hashMap0.put("vs&$5h65Ek,o/[3.W", "key");
        byte[] byteArray0 = simpleKeyValueSerializationSchema0.serializeValue((Map) hashMap0);
        assertEquals(27, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test1() throws Throwable {
        SimpleKeyValueSerializationSchema simpleKeyValueSerializationSchema0 =
                new SimpleKeyValueSerializationSchema((String) null, (String) null);
        HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
        byte[] byteArray0 = simpleKeyValueSerializationSchema0.serializeValue((Map) hashMap0);
        assertNull(byteArray0);
    }

    @Test(timeout = 4000)
    public void test2() throws Throwable {
        SimpleKeyValueSerializationSchema simpleKeyValueSerializationSchema0 =
                new SimpleKeyValueSerializationSchema("vs&$5h65Ek,o/[3.W", "vs&$5h65Ek,o/[3.W");
        HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
        byte[] byteArray0 = simpleKeyValueSerializationSchema0.serializeValue((Map) hashMap0);
        assertNull(byteArray0);
    }

    @Test(timeout = 4000)
    public void test3() throws Throwable {
        SimpleKeyValueSerializationSchema simpleKeyValueSerializationSchema0 =
                new SimpleKeyValueSerializationSchema();
        byte[] byteArray0 = simpleKeyValueSerializationSchema0.serializeValue((Map) null);
        assertNull(byteArray0);
    }

    @Test(timeout = 4000)
    public void test4() throws Throwable {
        SimpleKeyValueSerializationSchema simpleKeyValueSerializationSchema0 =
                new SimpleKeyValueSerializationSchema("vs&$5h65Ek,o/[3.W", "vs&$5h65Ek,o/[3.W");
        HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
        hashMap0.put("vs&$5h65Ek,o/[3.W", "key");
        byte[] byteArray0 = simpleKeyValueSerializationSchema0.serializeKey((Map) hashMap0);
        assertEquals(27, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test5() throws Throwable {
        SimpleKeyValueSerializationSchema simpleKeyValueSerializationSchema0 =
                new SimpleKeyValueSerializationSchema((String) null, ")S$EM/|GQqY5k\"d");
        HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>(3269);
        byte[] byteArray0 = simpleKeyValueSerializationSchema0.serializeKey((Map) hashMap0);
        assertNull(byteArray0);
    }

    @Test(timeout = 4000)
    public void test6() throws Throwable {
        SimpleKeyValueSerializationSchema simpleKeyValueSerializationSchema0 =
                new SimpleKeyValueSerializationSchema("vs&$5h65Ek,o/[3.W", "vs&$5h65Ek,o/[3.W");
        HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
        byte[] byteArray0 = simpleKeyValueSerializationSchema0.serializeKey((Map) hashMap0);
        assertNull(byteArray0);
    }

    @Test(timeout = 4000)
    public void test7() throws Throwable {
        SimpleKeyValueSerializationSchema simpleKeyValueSerializationSchema0 =
                new SimpleKeyValueSerializationSchema();
        byte[] byteArray0 = simpleKeyValueSerializationSchema0.serializeKey((Map) null);
        assertNull(byteArray0);
    }
}
