/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 26 12:00:35 GMT 2025
 */

package org.apache.flink.connector.rocketmq.legacy.common.watermark;

import org.apache.flink.streaming.api.watermark.Watermark;

import org.apache.rocketmq.common.message.MessageExt;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.Test;
import org.junit.runner.RunWith;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
        mockJVMNonDeterminism = true,
        useVFS = true,
        useVNET = true,
        resetStaticState = true,
        separateClassLoader = true,
        useJEE = true)
public class BoundedOutOfOrdernessGeneratorPerQueue_ESTest
        extends BoundedOutOfOrdernessGeneratorPerQueue_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0() throws Throwable {
        BoundedOutOfOrdernessGeneratorPerQueue boundedOutOfOrdernessGeneratorPerQueue0 =
                new BoundedOutOfOrdernessGeneratorPerQueue(0L);
        Watermark watermark0 = boundedOutOfOrdernessGeneratorPerQueue0.getCurrentWatermark();
        assertEquals(0L, watermark0.getTimestamp());
    }

    @Test(timeout = 4000)
    public void test1() throws Throwable {
        BoundedOutOfOrdernessGeneratorPerQueue boundedOutOfOrdernessGeneratorPerQueue0 =
                new BoundedOutOfOrdernessGeneratorPerQueue(4619L);
        Watermark watermark0 = boundedOutOfOrdernessGeneratorPerQueue0.getCurrentWatermark();
        assertEquals((-4619L), watermark0.getTimestamp());
    }

    @Test(timeout = 4000)
    public void test2() throws Throwable {
        BoundedOutOfOrdernessGeneratorPerQueue boundedOutOfOrdernessGeneratorPerQueue0 =
                new BoundedOutOfOrdernessGeneratorPerQueue(15L);
        MessageExt messageExt0 = mock(MessageExt.class, new ViolatedAssumptionAnswer());
        doReturn(1208L).when(messageExt0).getBornTimestamp();
        doReturn((String) null).when(messageExt0).getBrokerName();
        doReturn(1).when(messageExt0).getQueueId();
        long long0 = boundedOutOfOrdernessGeneratorPerQueue0.extractTimestamp(messageExt0, 15L);
        assertEquals(1208L, long0);
    }

    @Test(timeout = 4000)
    public void test3() throws Throwable {
        BoundedOutOfOrdernessGeneratorPerQueue boundedOutOfOrdernessGeneratorPerQueue0 =
                new BoundedOutOfOrdernessGeneratorPerQueue(0L);
        MessageExt messageExt0 = mock(MessageExt.class, new ViolatedAssumptionAnswer());
        doReturn((long) (-1898)).when(messageExt0).getBornTimestamp();
        doReturn("I'R\"z5z").when(messageExt0).getBrokerName();
        doReturn((-1898)).when(messageExt0).getQueueId();
        long long0 = boundedOutOfOrdernessGeneratorPerQueue0.extractTimestamp(messageExt0, 0L);
        assertEquals((-1898L), long0);
    }

    @Test(timeout = 4000)
    public void test4() throws Throwable {
        BoundedOutOfOrdernessGeneratorPerQueue boundedOutOfOrdernessGeneratorPerQueue0 =
                new BoundedOutOfOrdernessGeneratorPerQueue(0L);
        // Undeclared exception!
        try {
            boundedOutOfOrdernessGeneratorPerQueue0.extractTimestamp((MessageExt) null, (-760L));
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.legacy.common.watermark.BoundedOutOfOrdernessGeneratorPerQueue",
                    e);
        }
    }

    @Test(timeout = 4000)
    public void test5() throws Throwable {
        BoundedOutOfOrdernessGeneratorPerQueue boundedOutOfOrdernessGeneratorPerQueue0 =
                new BoundedOutOfOrdernessGeneratorPerQueue((-624L));
        Watermark watermark0 = boundedOutOfOrdernessGeneratorPerQueue0.getCurrentWatermark();
        assertEquals(624L, watermark0.getTimestamp());
    }

    @Test(timeout = 4000)
    public void test6() throws Throwable {
        BoundedOutOfOrdernessGeneratorPerQueue boundedOutOfOrdernessGeneratorPerQueue0 =
                new BoundedOutOfOrdernessGeneratorPerQueue();
        // Undeclared exception!
        try {
            boundedOutOfOrdernessGeneratorPerQueue0.getCurrentWatermark();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.legacy.common.watermark.BoundedOutOfOrdernessGeneratorPerQueue",
                    e);
        }
    }

    @Test(timeout = 4000)
    public void test7() throws Throwable {
        BoundedOutOfOrdernessGeneratorPerQueue boundedOutOfOrdernessGeneratorPerQueue0 =
                new BoundedOutOfOrdernessGeneratorPerQueue((-624L));
        MessageExt messageExt0 = mock(MessageExt.class, new ViolatedAssumptionAnswer());
        doReturn(0L).when(messageExt0).getBornTimestamp();
        doReturn((String) null).when(messageExt0).getBrokerName();
        doReturn(0).when(messageExt0).getQueueId();
        long long0 = boundedOutOfOrdernessGeneratorPerQueue0.extractTimestamp(messageExt0, (-624L));
        assertEquals(0L, long0);

        Watermark watermark0 = boundedOutOfOrdernessGeneratorPerQueue0.getCurrentWatermark();
        assertEquals(624L, watermark0.getTimestamp());
    }

    @Test(timeout = 4000)
    public void test8() throws Throwable {
        BoundedOutOfOrdernessGeneratorPerQueue boundedOutOfOrdernessGeneratorPerQueue0 =
                new BoundedOutOfOrdernessGeneratorPerQueue((-624L));
        String string0 = boundedOutOfOrdernessGeneratorPerQueue0.toString();
        assertEquals(
                "BoundedOutOfOrdernessGeneratorPerQueue{maxEventTimeTable={}, maxOutOfOrderness=-624}",
                string0);
    }
}
