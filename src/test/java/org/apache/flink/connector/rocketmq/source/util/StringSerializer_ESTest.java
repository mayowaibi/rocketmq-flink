/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 26 10:45:45 GMT 2025
 */

package org.apache.flink.connector.rocketmq.source.util;

import org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer;
import org.apache.flink.configuration.Configuration;
import org.apache.flink.configuration.DelegatingConfiguration;
import org.apache.flink.table.types.AtomicDataType;
import org.apache.flink.table.types.DataType;
import org.apache.flink.table.types.FieldsDataType;
import org.apache.flink.table.types.logical.BigIntType;
import org.apache.flink.table.types.logical.BooleanType;
import org.apache.flink.table.types.logical.DateType;
import org.apache.flink.table.types.logical.DoubleType;
import org.apache.flink.table.types.logical.MultisetType;
import org.apache.flink.table.types.logical.RawType;
import org.apache.flink.table.types.logical.TimeType;
import org.apache.flink.table.types.logical.TinyIntType;
import org.apache.flink.table.types.logical.VarCharType;
import org.apache.flink.table.types.logical.YearMonthIntervalType;
import org.apache.flink.table.types.logical.ZonedTimestampType;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.sql.SQLDataException;
import java.sql.SQLNonTransientException;
import java.time.ZoneId;
import java.util.Calendar;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
        mockJVMNonDeterminism = true,
        useVFS = true,
        useVNET = true,
        resetStaticState = true,
        separateClassLoader = true,
        useJEE = true)
public class StringSerializer_ESTest extends StringSerializer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_Time;
        BooleanType booleanType0 = new BooleanType();
        AtomicDataType atomicDataType0 = new AtomicDataType(booleanType0);
        Boolean boolean0 = Boolean.valueOf(false);
        HashSet<String> hashSet0 = new HashSet<String>();
        Object object0 =
                StringSerializer.deserialize(
                        "1",
                        byteSerializer_ValueType0,
                        (DataType) atomicDataType0,
                        (Set<String>) hashSet0,
                        boolean0);
        assertEquals(1, object0);
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        DoubleType doubleType0 = new DoubleType(false);
        AtomicDataType atomicDataType0 = new AtomicDataType(doubleType0);
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_ByteArray;
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Boolean boolean0 = Boolean.valueOf("true");
        Object object0 =
                StringSerializer.deserialize(
                        "true",
                        byteSerializer_ValueType0,
                        (DataType) atomicDataType0,
                        (Set<String>) linkedHashSet0,
                        boolean0);
        assertNotNull(object0);
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_Date;
        Boolean boolean0 = new Boolean(false);
        Object object0 =
                StringSerializer.deserialize(
                        (String) null, byteSerializer_ValueType0, (DataType) null, boolean0);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_String;
        Boolean boolean0 = Boolean.FALSE;
        Object object0 =
                StringSerializer.deserialize(
                        "4_c$SSp0'#@lx?", byteSerializer_ValueType0, (DataType) null, boolean0);
        assertNotNull(object0);
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_BigDecimal;
        BigIntType bigIntType0 = new BigIntType();
        AtomicDataType atomicDataType0 = new AtomicDataType(bigIntType0);
        HashSet<String> hashSet0 = new HashSet<String>();
        // Undeclared exception!
        try {
            StringSerializer.deserialize(
                    "6Y>&",
                    byteSerializer_ValueType0,
                    (DataType) atomicDataType0,
                    (Set<String>) hashSet0,
                    (Boolean) null);
            fail("Expecting exception: ClassCastException");

        } catch (ClassCastException e) {
            //
            // org.apache.flink.table.types.logical.BigIntType cannot be cast to
            // org.apache.flink.table.types.logical.DecimalType
            //
            verifyException("org.apache.flink.connector.rocketmq.source.util.StringSerializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        Set<String> set0 = ZoneId.getAvailableZoneIds();
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_BigDecimal;
        // Undeclared exception!
        try {
            StringSerializer.deserialize(
                    "\"2Nxvr7Hf^~@^", byteSerializer_ValueType0, (DataType) null, set0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.connector.rocketmq.source.util.StringSerializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_Timestamp;
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        Configuration configuration0 = Configuration.fromMap(hashMap0);
        Set<String> set0 = configuration0.keySet();
        // Undeclared exception!
        try {
            StringSerializer.deserialize(
                    "~Lp2Pp%)p", byteSerializer_ValueType0, (DataType) null, set0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Timestamp format must be yyyy-mm-dd hh:mm:ss[.fffffffff]
            //
            verifyException("java.sql.Timestamp", e);
        }
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        Class<Object> class0 = Object.class;
        byte[] byteArray0 = new byte[3];
        SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("");
        SQLDataException sQLDataException0 = new SQLDataException(sQLNonTransientException0);
        UnloadableDummyTypeSerializer<Object> unloadableDummyTypeSerializer0 =
                new UnloadableDummyTypeSerializer<Object>(byteArray0, sQLDataException0);
        RawType<Object> rawType0 = new RawType<Object>(class0, unloadableDummyTypeSerializer0);
        Class<String> class1 = String.class;
        Stack<DataType> stack0 = new Stack<DataType>();
        FieldsDataType fieldsDataType0 = new FieldsDataType(rawType0, class1, stack0);
        Locale locale0 = Locale.US;
        Set<String> set0 = locale0.getUnicodeLocaleAttributes();
        ByteSerializer.ValueType byteSerializer_ValueType0 =
                ByteSerializer.ValueType.V_LocalDateTime;
        // Undeclared exception!
        try {
            StringSerializer.deserialize(
                    "org.apache.flink.connector.rocketmq.source.util.StringSerializer$1",
                    byteSerializer_ValueType0,
                    (DataType) fieldsDataType0,
                    set0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.connector.rocketmq.source.util.StringSerializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_Date;
        // Undeclared exception!
        try {
            StringSerializer.deserialize(
                    "wVgm,TUmS ", byteSerializer_ValueType0, (DataType) null, (Boolean) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.connector.rocketmq.source.util.StringSerializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_BigDecimal;
        BooleanType booleanType0 = new BooleanType(false);
        AtomicDataType atomicDataType0 = new AtomicDataType(booleanType0);
        List<DataType> list0 = atomicDataType0.getChildren();
        FieldsDataType fieldsDataType0 = new FieldsDataType(booleanType0, list0);
        Boolean boolean0 = Boolean.valueOf(false);
        // Undeclared exception!
        try {
            StringSerializer.deserialize(
                    "org.apache.flink.api.common.typeutils.base.array.DoublePrimitiveArraySerializer",
                    byteSerializer_ValueType0,
                    (DataType) fieldsDataType0,
                    boolean0);
            fail("Expecting exception: ClassCastException");

        } catch (ClassCastException e) {
            //
            // org.apache.flink.table.types.logical.BooleanType cannot be cast to
            // org.apache.flink.table.types.logical.DecimalType
            //
            verifyException("org.apache.flink.connector.rocketmq.source.util.StringSerializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        // Undeclared exception!
        try {
            StringSerializer.parseBoolean(".oG^ 3:*TJ0,X");
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.connector.rocketmq.source.util.StringSerializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        TreeSet<String> treeSet0 = new TreeSet<String>();
        Boolean boolean0 = new Boolean("+QG82[A1A");
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_Date;
        // Undeclared exception!
        try {
            StringSerializer.deserialize(
                    "+QG82[A1A",
                    byteSerializer_ValueType0,
                    (DataType) null,
                    (Set<String>) treeSet0,
                    boolean0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.sql.Date", e);
        }
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_Timestamp;
        DoubleType doubleType0 = new DoubleType(false);
        AtomicDataType atomicDataType0 = new AtomicDataType(doubleType0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Boolean boolean0 = Boolean.valueOf("ha+dr;vf_1u");
        Object object0 =
                StringSerializer.deserialize(
                        (String) null,
                        byteSerializer_ValueType0,
                        (DataType) atomicDataType0,
                        (Set<String>) linkedHashSet0,
                        boolean0);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_Boolean;
        TinyIntType tinyIntType0 = new TinyIntType();
        AtomicDataType atomicDataType0 = new AtomicDataType(tinyIntType0);
        Map<String, String> map0 = ZoneId.SHORT_IDS;
        Configuration configuration0 = Configuration.fromMap(map0);
        DelegatingConfiguration delegatingConfiguration0 =
                new DelegatingConfiguration(
                        configuration0, "com.google.common.base.Predicates$OrPredicate");
        Set<String> set0 = delegatingConfiguration0.keySet();
        Boolean boolean0 = Boolean.FALSE;
        // Undeclared exception!
        try {
            StringSerializer.deserialize(
                    "com.google.common.base.Predicates$OrPredicate",
                    byteSerializer_ValueType0,
                    (DataType) atomicDataType0,
                    set0,
                    boolean0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.connector.rocketmq.source.util.StringSerializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test14() throws Throwable {
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_Float;
        TreeSet<String> treeSet0 = new TreeSet<String>();
        Boolean boolean0 = new Boolean("+QG82[A1A");
        // Undeclared exception!
        try {
            StringSerializer.deserialize(
                    "+QG82[A1A",
                    byteSerializer_ValueType0,
                    (DataType) null,
                    (Set<String>) treeSet0,
                    boolean0);
            fail("Expecting exception: NumberFormatException");

        } catch (NumberFormatException e) {
        }
    }

    @Test(timeout = 4000)
    public void test15() throws Throwable {
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_Long;
        TreeSet<String> treeSet0 = new TreeSet<String>();
        Boolean boolean0 = new Boolean("yi `L>E?");
        // Undeclared exception!
        try {
            StringSerializer.deserialize(
                    "yi `L>E?",
                    byteSerializer_ValueType0,
                    (DataType) null,
                    (Set<String>) treeSet0,
                    boolean0);
            fail("Expecting exception: NumberFormatException");

        } catch (NumberFormatException e) {
            //
            // For input string: \"yi `L>E?\"
            //
            verifyException("java.lang.NumberFormatException", e);
        }
    }

    @Test(timeout = 4000)
    public void test16() throws Throwable {
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_Integer;
        DateType dateType0 = new DateType();
        MultisetType multisetType0 = new MultisetType(false, dateType0);
        AtomicDataType atomicDataType0 = new AtomicDataType(multisetType0);
        Boolean boolean0 = new Boolean("25x5");
        // Undeclared exception!
        try {
            StringSerializer.deserialize(
                    " <= ",
                    byteSerializer_ValueType0,
                    (DataType) atomicDataType0,
                    (Set<String>) null,
                    boolean0);
            fail("Expecting exception: NumberFormatException");

        } catch (NumberFormatException e) {
            //
            // For input string: \" <= \"
            //
            verifyException("java.lang.NumberFormatException", e);
        }
    }

    @Test(timeout = 4000)
    public void test17() throws Throwable {
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_Short;
        Boolean boolean0 = new Boolean("");
        // Undeclared exception!
        try {
            StringSerializer.deserialize(
                    "", byteSerializer_ValueType0, (DataType) null, (Set<String>) null, boolean0);
            fail("Expecting exception: NumberFormatException");

        } catch (NumberFormatException e) {
            //
            // For input string: \"\"
            //
            verifyException("java.lang.NumberFormatException", e);
        }
    }

    @Test(timeout = 4000)
    public void test18() throws Throwable {
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_Byte;
        VarCharType varCharType0 = new VarCharType(true, 115);
        AtomicDataType atomicDataType0 = new AtomicDataType(varCharType0);
        Set<String> set0 = ZoneId.getAvailableZoneIds();
        Boolean boolean0 = new Boolean("The runtime context has not been initialized.");
        // Undeclared exception!
        try {
            StringSerializer.deserialize(
                    "true", byteSerializer_ValueType0, (DataType) atomicDataType0, set0, boolean0);
            fail("Expecting exception: NumberFormatException");

        } catch (NumberFormatException e) {
            //
            // For input string: \"true\"
            //
            verifyException("java.lang.NumberFormatException", e);
        }
    }

    @Test(timeout = 4000)
    public void test19() throws Throwable {
        DoubleType doubleType0 = new DoubleType(false);
        AtomicDataType atomicDataType0 = new AtomicDataType(doubleType0);
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_ByteArray;
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Boolean boolean0 = Boolean.valueOf("ha+dr;vf_1u");
        Object object0 =
                StringSerializer.deserialize(
                        "ha+dr;vf_1u",
                        byteSerializer_ValueType0,
                        (DataType) atomicDataType0,
                        (Set<String>) linkedHashSet0,
                        boolean0);
        assertNotNull(object0);
    }

    @Test(timeout = 4000)
    public void test20() throws Throwable {
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_String;
        Set<String> set0 = Calendar.getAvailableCalendarTypes();
        Boolean boolean0 = Boolean.FALSE;
        Object object0 =
                StringSerializer.deserialize(
                        "4_c$SSp0'#@lx?",
                        byteSerializer_ValueType0,
                        (DataType) null,
                        set0,
                        boolean0);
        assertNotNull(object0);
    }

    @Test(timeout = 4000)
    public void test21() throws Throwable {
        Set<String> set0 = Calendar.getAvailableCalendarTypes();
        Boolean boolean0 = new Boolean((String) null);
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_BigDecimal;
        // Undeclared exception!
        try {
            StringSerializer.deserialize(
                    (String) null, byteSerializer_ValueType0, (DataType) null, set0, boolean0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.connector.rocketmq.source.util.StringSerializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_Short;
        TimeType timeType0 = new TimeType();
        AtomicDataType atomicDataType0 = new AtomicDataType(timeType0);
        Boolean boolean0 = new Boolean("j*!VR];D");
        Object object0 =
                StringSerializer.deserialize(
                        (String) null,
                        byteSerializer_ValueType0,
                        (DataType) atomicDataType0,
                        (Set<String>) null,
                        boolean0);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test23() throws Throwable {
        Boolean boolean0 = StringSerializer.parseBoolean("0");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test24() throws Throwable {
        Boolean boolean0 = StringSerializer.parseBoolean("1");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test25() throws Throwable {
        Boolean boolean0 = StringSerializer.parseBoolean("false");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test26() throws Throwable {
        // Undeclared exception!
        try {
            StringSerializer.parseBoolean((String) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.connector.rocketmq.source.util.StringSerializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test27() throws Throwable {
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_BigInteger;
        YearMonthIntervalType.YearMonthResolution yearMonthIntervalType_YearMonthResolution0 =
                YearMonthIntervalType.YearMonthResolution.YEAR;
        YearMonthIntervalType yearMonthIntervalType0 =
                new YearMonthIntervalType(yearMonthIntervalType_YearMonthResolution0);
        Class<Integer> class0 = Integer.class;
        AtomicDataType atomicDataType0 = new AtomicDataType(yearMonthIntervalType0, class0);
        // Undeclared exception!
        try {
            StringSerializer.deserialize(
                    "",
                    byteSerializer_ValueType0,
                    (DataType) atomicDataType0,
                    (Set<String>) null,
                    (Boolean) null);
            fail("Expecting exception: NumberFormatException");

        } catch (NumberFormatException e) {
            //
            // Zero length BigInteger
            //
            verifyException("java.math.BigInteger", e);
        }
    }

    @Test(timeout = 4000)
    public void test28() throws Throwable {
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_Time;
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Boolean boolean0 = Boolean.TRUE;
        // Undeclared exception!
        try {
            StringSerializer.deserialize(
                    ",yH/>>D^&;3N",
                    byteSerializer_ValueType0,
                    (DataType) null,
                    (Set<String>) linkedHashSet0,
                    boolean0);
            fail("Expecting exception: NumberFormatException");

        } catch (NumberFormatException e) {
            //
            // For input string: \",yH/>>D^&;3N\"
            //
            verifyException("java.lang.NumberFormatException", e);
        }
    }

    @Test(timeout = 4000)
    public void test29() throws Throwable {
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_Time;
        Set<String> set0 = ZoneId.getAvailableZoneIds();
        Boolean boolean0 = new Boolean((String) null);
        Object object0 =
                StringSerializer.deserialize(
                        (String) null, byteSerializer_ValueType0, (DataType) null, set0, boolean0);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test30() throws Throwable {
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_Date;
        BooleanType booleanType0 = new BooleanType(false);
        AtomicDataType atomicDataType0 = new AtomicDataType(booleanType0);
        List<DataType> list0 = atomicDataType0.getChildren();
        FieldsDataType fieldsDataType0 = new FieldsDataType(booleanType0, list0);
        Boolean boolean0 = Boolean.valueOf(false);
        // Undeclared exception!
        try {
            StringSerializer.deserialize(
                    "org.apache.flink.api.common.typeutils.base.array.DoublePrimitiveArraySerializer",
                    byteSerializer_ValueType0,
                    (DataType) fieldsDataType0,
                    boolean0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.sql.Date", e);
        }
    }

    @Test(timeout = 4000)
    public void test31() throws Throwable {
        HashSet<String> hashSet0 = new HashSet<String>();
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_Date;
        Boolean boolean0 = Boolean.TRUE;
        // Undeclared exception!
        try {
            StringSerializer.deserialize(
                    "4_c$SSp0'#@lx?",
                    byteSerializer_ValueType0,
                    (DataType) null,
                    (Set<String>) hashSet0,
                    boolean0);
            fail("Expecting exception: NumberFormatException");

        } catch (NumberFormatException e) {
            //
            // For input string: \"4_c$SSp0'#@lx?\"
            //
            verifyException("java.lang.NumberFormatException", e);
        }
    }

    @Test(timeout = 4000)
    public void test32() throws Throwable {
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_Date;
        Set<String> set0 = ZoneId.getAvailableZoneIds();
        Boolean boolean0 = Boolean.valueOf(true);
        Object object0 =
                StringSerializer.deserialize(
                        (String) null, byteSerializer_ValueType0, (DataType) null, set0, boolean0);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_Timestamp;
        DoubleType doubleType0 = new DoubleType(false);
        AtomicDataType atomicDataType0 = new AtomicDataType(doubleType0);
        Locale locale0 = new Locale("");
        Set<String> set0 = locale0.getUnicodeLocaleAttributes();
        Boolean boolean0 = Boolean.valueOf(false);
        // Undeclared exception!
        try {
            StringSerializer.deserialize(
                    "", byteSerializer_ValueType0, (DataType) atomicDataType0, set0, boolean0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Timestamp format must be yyyy-mm-dd hh:mm:ss[.fffffffff]
            //
            verifyException("java.sql.Timestamp", e);
        }
    }

    @Test(timeout = 4000)
    public void test34() throws Throwable {
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_Timestamp;
        HashSet<String> hashSet0 = new HashSet<String>();
        Boolean boolean0 = Boolean.TRUE;
        // Undeclared exception!
        try {
            StringSerializer.deserialize(
                    "4_c$SSp0'#@lx?",
                    byteSerializer_ValueType0,
                    (DataType) null,
                    (Set<String>) hashSet0,
                    boolean0);
            fail("Expecting exception: NumberFormatException");

        } catch (NumberFormatException e) {
            //
            // For input string: \"4_c$SSp0'#@lx?\"
            //
            verifyException("java.lang.NumberFormatException", e);
        }
    }

    @Test(timeout = 4000)
    public void test35() throws Throwable {
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_Timestamp;
        DoubleType doubleType0 = new DoubleType(true);
        AtomicDataType atomicDataType0 = new AtomicDataType(doubleType0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Boolean boolean0 = Boolean.valueOf(true);
        Object object0 =
                StringSerializer.deserialize(
                        (String) null,
                        byteSerializer_ValueType0,
                        (DataType) atomicDataType0,
                        (Set<String>) linkedHashSet0,
                        boolean0);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test36() throws Throwable {
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_Boolean;
        Boolean boolean0 = Boolean.valueOf("");
        // Undeclared exception!
        try {
            StringSerializer.deserialize("", byteSerializer_ValueType0, (DataType) null, boolean0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.connector.rocketmq.source.util.StringSerializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test37() throws Throwable {
        Set<String> set0 = Calendar.getAvailableCalendarTypes();
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_Double;
        Object object0 =
                StringSerializer.deserialize(
                        (String) null,
                        byteSerializer_ValueType0,
                        (DataType) null,
                        set0,
                        (Boolean) null);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test38() throws Throwable {
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_Integer;
        Boolean boolean0 = new Boolean("+QG82[A1A");
        // Undeclared exception!
        try {
            StringSerializer.deserialize(
                    "+QG82[A1A", byteSerializer_ValueType0, (DataType) null, boolean0);
            fail("Expecting exception: NumberFormatException");

        } catch (NumberFormatException e) {
            //
            // For input string: \"+QG82[A1A\"
            //
            verifyException("java.lang.NumberFormatException", e);
        }
    }

    @Test(timeout = 4000)
    public void test39() throws Throwable {
        TimeType timeType0 = new TimeType();
        AtomicDataType atomicDataType0 = new AtomicDataType(timeType0);
        Boolean boolean0 = new Boolean("j*!VR];D");
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_Byte;
        Object object0 =
                StringSerializer.deserialize(
                        (String) null,
                        byteSerializer_ValueType0,
                        (DataType) atomicDataType0,
                        (Set<String>) null,
                        boolean0);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test40() throws Throwable {
        DoubleType doubleType0 = new DoubleType(false);
        AtomicDataType atomicDataType0 = new AtomicDataType(doubleType0);
        Locale locale0 = new Locale("");
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_ByteArray;
        Boolean boolean0 = Boolean.TRUE;
        Set<String> set0 = locale0.getUnicodeLocaleAttributes();
        Object object0 =
                StringSerializer.deserialize(
                        "W}(mKny",
                        byteSerializer_ValueType0,
                        (DataType) atomicDataType0,
                        set0,
                        boolean0);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test41() throws Throwable {
        DoubleType doubleType0 = new DoubleType(false);
        AtomicDataType atomicDataType0 = new AtomicDataType(doubleType0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_Duration;
        // Undeclared exception!
        try {
            StringSerializer.deserialize(
                    "org.apache.flink.api.common.typeutils.base.array.DoublePrimitiveArraySerializer",
                    byteSerializer_ValueType0,
                    (DataType) atomicDataType0,
                    (Set<String>) linkedHashSet0,
                    (Boolean) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.connector.rocketmq.source.util.StringSerializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test42() throws Throwable {
        Boolean boolean0 = StringSerializer.parseBoolean("true");
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_BigInteger;
        YearMonthIntervalType.YearMonthResolution yearMonthIntervalType_YearMonthResolution0 =
                YearMonthIntervalType.YearMonthResolution.YEAR;
        YearMonthIntervalType yearMonthIntervalType0 =
                new YearMonthIntervalType(yearMonthIntervalType_YearMonthResolution0);
        Class<Integer> class0 = Integer.class;
        AtomicDataType atomicDataType0 = new AtomicDataType(yearMonthIntervalType0, class0);
        Object object0 =
                StringSerializer.deserialize(
                        (String) null,
                        byteSerializer_ValueType0,
                        (DataType) atomicDataType0,
                        (Set<String>) null,
                        boolean0);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test43() throws Throwable {
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_Time;
        Set<String> set0 = ZoneId.getAvailableZoneIds();
        Boolean boolean0 = Boolean.valueOf(true);
        Object object0 =
                StringSerializer.deserialize(
                        (String) null, byteSerializer_ValueType0, (DataType) null, set0, boolean0);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_Date;
        Set<String> set0 = ZoneId.getAvailableZoneIds();
        Boolean boolean0 = new Boolean(false);
        Object object0 =
                StringSerializer.deserialize(
                        (String) null, byteSerializer_ValueType0, (DataType) null, set0, boolean0);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test45() throws Throwable {
        Set<String> set0 = Calendar.getAvailableCalendarTypes();
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_Timestamp;
        Object object0 =
                StringSerializer.deserialize(
                        (String) null, byteSerializer_ValueType0, (DataType) null, set0);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test46() throws Throwable {
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_Boolean;
        Set<String> set0 = ZoneId.getAvailableZoneIds();
        Boolean boolean0 = new Boolean(false);
        Object object0 =
                StringSerializer.deserialize(
                        (String) null, byteSerializer_ValueType0, (DataType) null, set0, boolean0);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test47() throws Throwable {
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_Double;
        VarCharType varCharType0 = VarCharType.STRING_TYPE;
        AtomicDataType atomicDataType0 = new AtomicDataType(varCharType0);
        Locale locale0 = Locale.SIMPLIFIED_CHINESE;
        Set<String> set0 = locale0.getUnicodeLocaleAttributes();
        Boolean boolean0 = new Boolean(false);
        // Undeclared exception!
        try {
            StringSerializer.deserialize(
                    "`R:,*'AWNe^NTOei",
                    byteSerializer_ValueType0,
                    (DataType) atomicDataType0,
                    set0,
                    boolean0);
            fail("Expecting exception: NumberFormatException");

        } catch (NumberFormatException e) {
        }
    }

    @Test(timeout = 4000)
    public void test48() throws Throwable {
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_Byte;
        ZonedTimestampType zonedTimestampType0 = new ZonedTimestampType(true, 0);
        Stack<DataType> stack0 = new Stack<DataType>();
        FieldsDataType fieldsDataType0 = new FieldsDataType(zonedTimestampType0, stack0);
        HashSet<String> hashSet0 = new HashSet<String>(0);
        // Undeclared exception!
        try {
            StringSerializer.deserialize(
                    "Field '",
                    byteSerializer_ValueType0,
                    (DataType) fieldsDataType0,
                    (Set<String>) hashSet0);
            fail("Expecting exception: NumberFormatException");

        } catch (NumberFormatException e) {
            //
            // For input string: \"Field '\"
            //
            verifyException("java.lang.NumberFormatException", e);
        }
    }

    @Test(timeout = 4000)
    public void test49() throws Throwable {
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_String;
        Set<String> set0 = Calendar.getAvailableCalendarTypes();
        Object object0 =
                StringSerializer.deserialize(
                        "4_c$SSp0'#@lx?", byteSerializer_ValueType0, (DataType) null, set0);
        assertNotNull(object0);
    }

    @Test(timeout = 4000)
    public void test50() throws Throwable {
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_Long;
        TreeSet<String> treeSet0 = new TreeSet<String>();
        Boolean boolean0 = Boolean.FALSE;
        treeSet0.add("+QG82[A1A");
        Object object0 =
                StringSerializer.deserialize(
                        "+QG82[A1A",
                        byteSerializer_ValueType0,
                        (DataType) null,
                        (Set<String>) treeSet0,
                        boolean0);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test51() throws Throwable {
        StringSerializer stringSerializer0 = new StringSerializer();
    }

    @Test(timeout = 4000)
    public void test52() throws Throwable {
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_BigDecimal;
        TimeType timeType0 = new TimeType();
        AtomicDataType atomicDataType0 = new AtomicDataType(timeType0);
        // Undeclared exception!
        try {
            StringSerializer.deserialize(
                    (String) null,
                    byteSerializer_ValueType0,
                    (DataType) atomicDataType0,
                    (Set<String>) null);
            fail("Expecting exception: ClassCastException");

        } catch (ClassCastException e) {
            //
            // org.apache.flink.table.types.logical.TimeType cannot be cast to
            // org.apache.flink.table.types.logical.DecimalType
            //
            verifyException("org.apache.flink.connector.rocketmq.source.util.StringSerializer", e);
        }
    }
}
