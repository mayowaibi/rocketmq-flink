/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 26 11:44:31 GMT 2025
 */

package org.apache.flink.connector.rocketmq.source.enumerator.offset;

import org.apache.flink.connector.rocketmq.legacy.common.config.OffsetResetStrategy;
import org.apache.flink.connector.rocketmq.source.InnerConsumer;
import org.apache.flink.connector.rocketmq.source.InnerConsumerImpl;

import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
import org.apache.rocketmq.common.message.MessageQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
        mockJVMNonDeterminism = true,
        useVFS = true,
        useVNET = true,
        resetStaticState = true,
        separateClassLoader = true,
        useJEE = true)
public class OffsetsSelectorByStrategy_ESTest extends OffsetsSelectorByStrategy_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0() throws Throwable {
        ConsumeFromWhere consumeFromWhere0 = ConsumeFromWhere.CONSUME_FROM_TIMESTAMP;
        OffsetResetStrategy offsetResetStrategy0 = OffsetResetStrategy.EARLIEST;
        OffsetsSelectorByStrategy offsetsSelectorByStrategy0 =
                new OffsetsSelectorByStrategy(consumeFromWhere0, offsetResetStrategy0);
        LinkedList<MessageQueue> linkedList0 = new LinkedList<MessageQueue>();
        MessageQueue messageQueue0 = new MessageQueue();
        linkedList0.add(messageQueue0);
        Long long0 = new Long((-9223372036854775808L));
        CompletableFuture<Long> completableFuture0 =
                (CompletableFuture<Long>)
                        mock(CompletableFuture.class, new ViolatedAssumptionAnswer());
        doReturn(long0).when(completableFuture0).get();
        InnerConsumer innerConsumer0 = mock(InnerConsumer.class, new ViolatedAssumptionAnswer());
        doReturn(completableFuture0)
                .when(innerConsumer0)
                .seekCommittedOffset(any(org.apache.rocketmq.common.message.MessageQueue.class));
        InnerConsumerImpl.RemotingOffsetsRetrieverImpl
                innerConsumerImpl_RemotingOffsetsRetrieverImpl0 =
                        new InnerConsumerImpl.RemotingOffsetsRetrieverImpl(innerConsumer0);
        Map<MessageQueue, Long> map0 =
                offsetsSelectorByStrategy0.getMessageQueueOffsets(
                        linkedList0, innerConsumerImpl_RemotingOffsetsRetrieverImpl0);
        assertFalse(map0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test1() throws Throwable {
        OffsetsSelectorByStrategy offsetsSelectorByStrategy0 =
                new OffsetsSelectorByStrategy((ConsumeFromWhere) null, (OffsetResetStrategy) null);
        offsetsSelectorByStrategy0.getAutoOffsetResetStrategy();
    }

    @Test(timeout = 4000)
    public void test2() throws Throwable {
        ConsumeFromWhere consumeFromWhere0 = ConsumeFromWhere.CONSUME_FROM_LAST_OFFSET;
        OffsetResetStrategy offsetResetStrategy0 = OffsetResetStrategy.LATEST;
        OffsetsSelectorByStrategy offsetsSelectorByStrategy0 =
                new OffsetsSelectorByStrategy(consumeFromWhere0, offsetResetStrategy0);
        LinkedList<MessageQueue> linkedList0 = new LinkedList<MessageQueue>();
        InnerConsumerImpl.RemotingOffsetsRetrieverImpl
                innerConsumerImpl_RemotingOffsetsRetrieverImpl0 =
                        new InnerConsumerImpl.RemotingOffsetsRetrieverImpl((InnerConsumer) null);
        MessageQueue messageQueue0 = new MessageQueue("v^p/p8bZ", "v^p/p8bZ", 40);
        linkedList0.add(messageQueue0);
        // Undeclared exception!
        try {
            offsetsSelectorByStrategy0.getMessageQueueOffsets(
                    linkedList0, innerConsumerImpl_RemotingOffsetsRetrieverImpl0);
            fail("Expecting exception: CompletionException");

        } catch (CompletionException e) {
            //
            // java.lang.NullPointerException
            //
            verifyException("java.util.concurrent.CompletableFuture", e);
        }
    }

    @Test(timeout = 4000)
    public void test3() throws Throwable {
        ConsumeFromWhere consumeFromWhere0 = ConsumeFromWhere.CONSUME_FROM_TIMESTAMP;
        OffsetResetStrategy offsetResetStrategy0 = OffsetResetStrategy.LATEST;
        OffsetsSelectorByStrategy offsetsSelectorByStrategy0 =
                new OffsetsSelectorByStrategy(consumeFromWhere0, offsetResetStrategy0);
        LinkedList<MessageQueue> linkedList0 = new LinkedList<MessageQueue>();
        InnerConsumer innerConsumer0 = mock(InnerConsumer.class, new ViolatedAssumptionAnswer());
        InnerConsumerImpl.RemotingOffsetsRetrieverImpl
                innerConsumerImpl_RemotingOffsetsRetrieverImpl0 =
                        new InnerConsumerImpl.RemotingOffsetsRetrieverImpl(innerConsumer0);
        MessageQueue messageQueue0 = new MessageQueue();
        List<MessageQueue> list0 = linkedList0.subList(0, 0);
        linkedList0.add(messageQueue0);
        // Undeclared exception!
        try {
            offsetsSelectorByStrategy0.getMessageQueueOffsets(
                    list0, innerConsumerImpl_RemotingOffsetsRetrieverImpl0);
            fail("Expecting exception: ConcurrentModificationException");

        } catch (ConcurrentModificationException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.util.SubList", e);
        }
    }

    @Test(timeout = 4000)
    public void test4() throws Throwable {
        ConsumeFromWhere consumeFromWhere0 = ConsumeFromWhere.CONSUME_FROM_MAX_OFFSET;
        OffsetResetStrategy offsetResetStrategy0 = OffsetResetStrategy.EARLIEST;
        OffsetsSelectorByStrategy offsetsSelectorByStrategy0 =
                new OffsetsSelectorByStrategy(consumeFromWhere0, offsetResetStrategy0);
        LinkedList<MessageQueue> linkedList0 = new LinkedList<MessageQueue>();
        // Undeclared exception!
        try {
            offsetsSelectorByStrategy0.getMessageQueueOffsets(
                    linkedList0, (OffsetsSelector.MessageQueueOffsetsRetriever) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.source.enumerator.offset.OffsetsSelectorByStrategy",
                    e);
        }
    }

    @Test(timeout = 4000)
    public void test5() throws Throwable {
        ConsumeFromWhere consumeFromWhere0 = ConsumeFromWhere.CONSUME_FROM_TIMESTAMP;
        OffsetResetStrategy offsetResetStrategy0 = OffsetResetStrategy.LATEST;
        OffsetsSelectorByStrategy offsetsSelectorByStrategy0 =
                new OffsetsSelectorByStrategy(consumeFromWhere0, offsetResetStrategy0);
        LinkedList<MessageQueue> linkedList0 = new LinkedList<MessageQueue>();
        InnerConsumer innerConsumer0 = mock(InnerConsumer.class, new ViolatedAssumptionAnswer());
        InnerConsumerImpl.RemotingOffsetsRetrieverImpl
                innerConsumerImpl_RemotingOffsetsRetrieverImpl0 =
                        new InnerConsumerImpl.RemotingOffsetsRetrieverImpl(innerConsumer0);
        Map<MessageQueue, Long> map0 =
                offsetsSelectorByStrategy0.getMessageQueueOffsets(
                        linkedList0, innerConsumerImpl_RemotingOffsetsRetrieverImpl0);
        assertTrue(map0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test6() throws Throwable {
        ConsumeFromWhere consumeFromWhere0 = ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET;
        OffsetResetStrategy offsetResetStrategy0 = OffsetResetStrategy.EARLIEST;
        OffsetsSelectorByStrategy offsetsSelectorByStrategy0 =
                new OffsetsSelectorByStrategy(consumeFromWhere0, offsetResetStrategy0);
        LinkedList<MessageQueue> linkedList0 = new LinkedList<MessageQueue>();
        InnerConsumer innerConsumer0 = mock(InnerConsumer.class, new ViolatedAssumptionAnswer());
        InnerConsumerImpl.RemotingOffsetsRetrieverImpl
                innerConsumerImpl_RemotingOffsetsRetrieverImpl0 =
                        new InnerConsumerImpl.RemotingOffsetsRetrieverImpl(innerConsumer0);
        Map<MessageQueue, Long> map0 =
                offsetsSelectorByStrategy0.getMessageQueueOffsets(
                        linkedList0, innerConsumerImpl_RemotingOffsetsRetrieverImpl0);
        assertTrue(map0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test7() throws Throwable {
        ConsumeFromWhere consumeFromWhere0 = ConsumeFromWhere.CONSUME_FROM_MAX_OFFSET;
        OffsetResetStrategy offsetResetStrategy0 = OffsetResetStrategy.EARLIEST;
        OffsetsSelectorByStrategy offsetsSelectorByStrategy0 =
                new OffsetsSelectorByStrategy(consumeFromWhere0, offsetResetStrategy0);
        OffsetResetStrategy offsetResetStrategy1 =
                offsetsSelectorByStrategy0.getAutoOffsetResetStrategy();
        assertSame(offsetResetStrategy0, offsetResetStrategy1);
    }

    @Test(timeout = 4000)
    public void test8() throws Throwable {
        ConsumeFromWhere consumeFromWhere0 = ConsumeFromWhere.CONSUME_FROM_LAST_OFFSET;
        OffsetResetStrategy offsetResetStrategy0 = OffsetResetStrategy.LATEST;
        OffsetsSelectorByStrategy offsetsSelectorByStrategy0 =
                new OffsetsSelectorByStrategy(consumeFromWhere0, offsetResetStrategy0);
        Properties properties0 = new Properties();
        offsetsSelectorByStrategy0.validate(properties0);
        assertTrue(properties0.isEmpty());
    }
}
