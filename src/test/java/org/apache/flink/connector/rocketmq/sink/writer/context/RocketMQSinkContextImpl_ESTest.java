/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 26 12:34:43 GMT 2025
 */

package org.apache.flink.connector.rocketmq.sink.writer.context;

import org.apache.flink.api.common.operators.MailboxExecutor;
import org.apache.flink.api.common.operators.ProcessingTimeService;
import org.apache.flink.api.connector.sink2.Sink;
import org.apache.flink.configuration.Configuration;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.Test;
import org.junit.runner.RunWith;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
        mockJVMNonDeterminism = true,
        useVFS = true,
        useVNET = true,
        resetStaticState = true,
        separateClassLoader = true,
        useJEE = true)
public class RocketMQSinkContextImpl_ESTest extends RocketMQSinkContextImpl_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        ProcessingTimeService processingTimeService0 =
                mock(ProcessingTimeService.class, new ViolatedAssumptionAnswer());
        doReturn((long) (-3705), (long) (-3705), 0L, 1304L)
                .when(processingTimeService0)
                .getCurrentProcessingTime();
        Sink.InitContext sink_InitContext0 =
                mock(Sink.InitContext.class, new ViolatedAssumptionAnswer());
        doReturn((MailboxExecutor) null).when(sink_InitContext0).getMailboxExecutor();
        doReturn((-3705)).when(sink_InitContext0).getNumberOfParallelSubtasks();
        doReturn(processingTimeService0).when(sink_InitContext0).getProcessingTimeService();
        doReturn((-3705)).when(sink_InitContext0).getSubtaskId();
        Configuration configuration0 = mock(Configuration.class, new ViolatedAssumptionAnswer());
        RocketMQSinkContextImpl rocketMQSinkContextImpl0 =
                new RocketMQSinkContextImpl(sink_InitContext0, configuration0);
        rocketMQSinkContextImpl0.processTime();
        rocketMQSinkContextImpl0.processTime();
        rocketMQSinkContextImpl0.processTime();
        rocketMQSinkContextImpl0.processTime();
        assertFalse(rocketMQSinkContextImpl0.isEnableSchemaEvolution());
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        ProcessingTimeService processingTimeService0 =
                mock(ProcessingTimeService.class, new ViolatedAssumptionAnswer());
        Sink.InitContext sink_InitContext0 =
                mock(Sink.InitContext.class, new ViolatedAssumptionAnswer());
        doReturn((MailboxExecutor) null).when(sink_InitContext0).getMailboxExecutor();
        doReturn(5).when(sink_InitContext0).getNumberOfParallelSubtasks();
        doReturn(processingTimeService0).when(sink_InitContext0).getProcessingTimeService();
        doReturn(5).when(sink_InitContext0).getSubtaskId();
        Configuration configuration0 = mock(Configuration.class, new ViolatedAssumptionAnswer());
        RocketMQSinkContextImpl rocketMQSinkContextImpl0 =
                new RocketMQSinkContextImpl(sink_InitContext0, configuration0);
        int int0 = rocketMQSinkContextImpl0.getParallelInstanceId();
        assertFalse(rocketMQSinkContextImpl0.isEnableSchemaEvolution());
        assertEquals(5, int0);
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        ProcessingTimeService processingTimeService0 =
                mock(ProcessingTimeService.class, new ViolatedAssumptionAnswer());
        Sink.InitContext sink_InitContext0 =
                mock(Sink.InitContext.class, new ViolatedAssumptionAnswer());
        doReturn((MailboxExecutor) null).when(sink_InitContext0).getMailboxExecutor();
        doReturn((-3705)).when(sink_InitContext0).getNumberOfParallelSubtasks();
        doReturn(processingTimeService0).when(sink_InitContext0).getProcessingTimeService();
        doReturn((-3705)).when(sink_InitContext0).getSubtaskId();
        Configuration configuration0 = mock(Configuration.class, new ViolatedAssumptionAnswer());
        RocketMQSinkContextImpl rocketMQSinkContextImpl0 =
                new RocketMQSinkContextImpl(sink_InitContext0, configuration0);
        int int0 = rocketMQSinkContextImpl0.getParallelInstanceId();
        assertFalse(rocketMQSinkContextImpl0.isEnableSchemaEvolution());
        assertEquals((-3705), int0);
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        ProcessingTimeService processingTimeService0 =
                mock(ProcessingTimeService.class, new ViolatedAssumptionAnswer());
        Sink.InitContext sink_InitContext0 =
                mock(Sink.InitContext.class, new ViolatedAssumptionAnswer());
        doReturn((MailboxExecutor) null).when(sink_InitContext0).getMailboxExecutor();
        doReturn(5).when(sink_InitContext0).getNumberOfParallelSubtasks();
        doReturn(processingTimeService0).when(sink_InitContext0).getProcessingTimeService();
        doReturn(5).when(sink_InitContext0).getSubtaskId();
        Configuration configuration0 = mock(Configuration.class, new ViolatedAssumptionAnswer());
        RocketMQSinkContextImpl rocketMQSinkContextImpl0 =
                new RocketMQSinkContextImpl(sink_InitContext0, configuration0);
        int int0 = rocketMQSinkContextImpl0.getNumberOfParallelInstances();
        assertEquals(5, int0);
        assertFalse(rocketMQSinkContextImpl0.isEnableSchemaEvolution());
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        ProcessingTimeService processingTimeService0 =
                mock(ProcessingTimeService.class, new ViolatedAssumptionAnswer());
        Sink.InitContext sink_InitContext0 =
                mock(Sink.InitContext.class, new ViolatedAssumptionAnswer());
        doReturn((MailboxExecutor) null).when(sink_InitContext0).getMailboxExecutor();
        doReturn((-3705)).when(sink_InitContext0).getNumberOfParallelSubtasks();
        doReturn(processingTimeService0).when(sink_InitContext0).getProcessingTimeService();
        doReturn((-3705)).when(sink_InitContext0).getSubtaskId();
        Configuration configuration0 = mock(Configuration.class, new ViolatedAssumptionAnswer());
        RocketMQSinkContextImpl rocketMQSinkContextImpl0 =
                new RocketMQSinkContextImpl(sink_InitContext0, configuration0);
        int int0 = rocketMQSinkContextImpl0.getNumberOfParallelInstances();
        assertEquals((-3705), int0);
        assertFalse(rocketMQSinkContextImpl0.isEnableSchemaEvolution());
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        Sink.InitContext sink_InitContext0 =
                mock(Sink.InitContext.class, new ViolatedAssumptionAnswer());
        doReturn((MailboxExecutor) null).when(sink_InitContext0).getMailboxExecutor();
        doReturn(0).when(sink_InitContext0).getNumberOfParallelSubtasks();
        doReturn((ProcessingTimeService) null).when(sink_InitContext0).getProcessingTimeService();
        doReturn(0).when(sink_InitContext0).getSubtaskId();
        Configuration configuration0 = mock(Configuration.class, new ViolatedAssumptionAnswer());
        RocketMQSinkContextImpl rocketMQSinkContextImpl0 =
                new RocketMQSinkContextImpl(sink_InitContext0, configuration0);
        int int0 = rocketMQSinkContextImpl0.getParallelInstanceId();
        assertEquals(0, int0);
        assertFalse(rocketMQSinkContextImpl0.isEnableSchemaEvolution());
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        Sink.InitContext sink_InitContext0 =
                mock(Sink.InitContext.class, new ViolatedAssumptionAnswer());
        doReturn((MailboxExecutor) null).when(sink_InitContext0).getMailboxExecutor();
        doReturn(0).when(sink_InitContext0).getNumberOfParallelSubtasks();
        doReturn((ProcessingTimeService) null).when(sink_InitContext0).getProcessingTimeService();
        doReturn(0).when(sink_InitContext0).getSubtaskId();
        Configuration configuration0 = mock(Configuration.class, new ViolatedAssumptionAnswer());
        RocketMQSinkContextImpl rocketMQSinkContextImpl0 =
                new RocketMQSinkContextImpl(sink_InitContext0, configuration0);
        // Undeclared exception!
        try {
            rocketMQSinkContextImpl0.processTime();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.sink.writer.context.RocketMQSinkContextImpl",
                    e);
        }
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        Sink.InitContext sink_InitContext0 =
                mock(Sink.InitContext.class, new ViolatedAssumptionAnswer());
        doReturn((MailboxExecutor) null).when(sink_InitContext0).getMailboxExecutor();
        doReturn(0).when(sink_InitContext0).getNumberOfParallelSubtasks();
        doReturn((ProcessingTimeService) null).when(sink_InitContext0).getProcessingTimeService();
        doReturn(0).when(sink_InitContext0).getSubtaskId();
        Configuration configuration0 = mock(Configuration.class, new ViolatedAssumptionAnswer());
        RocketMQSinkContextImpl rocketMQSinkContextImpl0 =
                new RocketMQSinkContextImpl(sink_InitContext0, configuration0);
        int int0 = rocketMQSinkContextImpl0.getNumberOfParallelInstances();
        assertFalse(rocketMQSinkContextImpl0.isEnableSchemaEvolution());
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        Sink.InitContext sink_InitContext0 =
                mock(Sink.InitContext.class, new ViolatedAssumptionAnswer());
        doReturn((MailboxExecutor) null).when(sink_InitContext0).getMailboxExecutor();
        doReturn(0).when(sink_InitContext0).getNumberOfParallelSubtasks();
        doReturn((ProcessingTimeService) null).when(sink_InitContext0).getProcessingTimeService();
        doReturn(0).when(sink_InitContext0).getSubtaskId();
        Configuration configuration0 = mock(Configuration.class, new ViolatedAssumptionAnswer());
        RocketMQSinkContextImpl rocketMQSinkContextImpl0 =
                new RocketMQSinkContextImpl(sink_InitContext0, configuration0);
        boolean boolean0 = rocketMQSinkContextImpl0.isEnableSchemaEvolution();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        Sink.InitContext sink_InitContext0 =
                mock(Sink.InitContext.class, new ViolatedAssumptionAnswer());
        doReturn((MailboxExecutor) null).when(sink_InitContext0).getMailboxExecutor();
        doReturn(0).when(sink_InitContext0).getNumberOfParallelSubtasks();
        doReturn((ProcessingTimeService) null).when(sink_InitContext0).getProcessingTimeService();
        doReturn(0).when(sink_InitContext0).getSubtaskId();
        Configuration configuration0 = mock(Configuration.class, new ViolatedAssumptionAnswer());
        RocketMQSinkContextImpl rocketMQSinkContextImpl0 =
                new RocketMQSinkContextImpl(sink_InitContext0, configuration0);
        rocketMQSinkContextImpl0.getMailboxExecutor();
        assertFalse(rocketMQSinkContextImpl0.isEnableSchemaEvolution());
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        Configuration configuration0 = mock(Configuration.class, new ViolatedAssumptionAnswer());
        RocketMQSinkContextImpl rocketMQSinkContextImpl0 = null;
        try {
            rocketMQSinkContextImpl0 =
                    new RocketMQSinkContextImpl((Sink.InitContext) null, configuration0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.sink.writer.context.RocketMQSinkContextImpl",
                    e);
        }
    }
}
