/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 26 12:08:43 GMT 2025
 */

package org.apache.flink.connector.rocketmq.legacy.common.selector;

import org.apache.rocketmq.common.message.Message;
import org.apache.rocketmq.common.message.MessageQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.List;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
        mockJVMNonDeterminism = true,
        useVFS = true,
        useVNET = true,
        resetStaticState = true,
        separateClassLoader = true,
        useJEE = true)
public class HashMessageQueueSelector_ESTest extends HashMessageQueueSelector_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0() throws Throwable {
        HashMessageQueueSelector hashMessageQueueSelector0 = new HashMessageQueueSelector();
        Message message0 = mock(Message.class, new ViolatedAssumptionAnswer());
        // Undeclared exception!
        try {
            hashMessageQueueSelector0.select((List<MessageQueue>) null, message0, "\"#QCH?;xqMk");
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.legacy.common.selector.HashMessageQueueSelector",
                    e);
        }
    }
}
