/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 26 11:01:15 GMT 2025
 */

package org.apache.flink.connector.rocketmq.source.split;

import org.apache.rocketmq.common.message.MessageQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.io.EOFException;
import java.io.UTFDataFormatException;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
        mockJVMNonDeterminism = true,
        useVFS = true,
        useVNET = true,
        resetStaticState = true,
        separateClassLoader = true,
        useJEE = true)
public class RocketMQPartitionSplitSerializer_ESTest
        extends RocketMQPartitionSplitSerializer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0() throws Throwable {
        RocketMQPartitionSplitSerializer rocketMQPartitionSplitSerializer0 =
                new RocketMQPartitionSplitSerializer();
        RocketMQSourceSplit rocketMQSourceSplit0 =
                new RocketMQSourceSplit("Vx&!}MpjC`3h :", "", 1, (-407L), (-407L));
        byte[] byteArray0 = rocketMQPartitionSplitSerializer0.serialize(rocketMQSourceSplit0);
        RocketMQSourceSplit rocketMQSourceSplit1 =
                rocketMQPartitionSplitSerializer0.deserialize((-1734), byteArray0);
        assertTrue(rocketMQSourceSplit1.equals((Object) rocketMQSourceSplit0));
    }

    @Test(timeout = 4000)
    public void test1() throws Throwable {
        RocketMQPartitionSplitSerializer rocketMQPartitionSplitSerializer0 =
                new RocketMQPartitionSplitSerializer();
        RocketMQSourceSplit rocketMQSourceSplit0 =
                new RocketMQSourceSplit("MessageQueue [topic=", "", (-335), 1980L, (-335), false);
        byte[] byteArray0 = rocketMQPartitionSplitSerializer0.serialize(rocketMQSourceSplit0);
        RocketMQSourceSplit rocketMQSourceSplit1 =
                rocketMQPartitionSplitSerializer0.deserialize(1, byteArray0);
        assertTrue(rocketMQSourceSplit1.equals((Object) rocketMQSourceSplit0));
    }

    @Test(timeout = 4000)
    public void test2() throws Throwable {
        RocketMQPartitionSplitSerializer rocketMQPartitionSplitSerializer0 =
                new RocketMQPartitionSplitSerializer();
        RocketMQSourceSplit rocketMQSourceSplit0 =
                new RocketMQSourceSplit(
                        "HeJ)YdWL^FDY5p,x_]",
                        "org.apache.flink.connector.rocketmq.source.split.RocketMQPartitionSplitSerializer",
                        201,
                        201,
                        201);
        byte[] byteArray0 = rocketMQPartitionSplitSerializer0.serialize(rocketMQSourceSplit0);
        RocketMQSourceSplit rocketMQSourceSplit1 =
                rocketMQPartitionSplitSerializer0.deserialize(201, byteArray0);
        assertTrue(rocketMQSourceSplit1.equals((Object) rocketMQSourceSplit0));
    }

    @Test(timeout = 4000)
    public void test3() throws Throwable {
        RocketMQPartitionSplitSerializer rocketMQPartitionSplitSerializer0 =
                new RocketMQPartitionSplitSerializer();
        RocketMQSourceSplit rocketMQSourceSplit0 =
                new RocketMQSourceSplit(
                        "org.apache.flink.connector.rocketmq.source.split.RocketMQPartitionSplitSerializer",
                        "org.apache.flink.connector.rocketmq.source.split.RocketMQPartitionSplitSerializer",
                        (-1),
                        (-1),
                        1795L,
                        false);
        byte[] byteArray0 = rocketMQPartitionSplitSerializer0.serialize(rocketMQSourceSplit0);
        RocketMQSourceSplit rocketMQSourceSplit1 =
                rocketMQPartitionSplitSerializer0.deserialize(0, byteArray0);
        assertEquals(1795L, rocketMQSourceSplit1.getStoppingOffset());
        assertEquals((-1), rocketMQSourceSplit1.getQueueId());
        assertEquals((-1L), rocketMQSourceSplit1.getStartingOffset());
        assertTrue(rocketMQSourceSplit1.getIsIncrease());
    }

    @Test(timeout = 4000)
    public void test4() throws Throwable {
        RocketMQPartitionSplitSerializer rocketMQPartitionSplitSerializer0 =
                new RocketMQPartitionSplitSerializer();
        MessageQueue messageQueue0 = new MessageQueue("", "", 0);
        RocketMQSourceSplit rocketMQSourceSplit0 =
                new RocketMQSourceSplit(messageQueue0, 0, 0, false);
        byte[] byteArray0 = rocketMQPartitionSplitSerializer0.serialize(rocketMQSourceSplit0);
        RocketMQSourceSplit rocketMQSourceSplit1 =
                rocketMQPartitionSplitSerializer0.deserialize(2964, byteArray0);
        assertTrue(rocketMQSourceSplit1.equals((Object) rocketMQSourceSplit0));
    }

    @Test(timeout = 4000)
    public void test5() throws Throwable {
        RocketMQPartitionSplitSerializer rocketMQPartitionSplitSerializer0 =
                new RocketMQPartitionSplitSerializer();
        // Undeclared exception!
        try {
            rocketMQPartitionSplitSerializer0.deserialize(0, (byte[]) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test6() throws Throwable {
        RocketMQPartitionSplitSerializer rocketMQPartitionSplitSerializer0 =
                new RocketMQPartitionSplitSerializer();
        byte[] byteArray0 = new byte[8];
        byteArray0[1] = (byte) 2;
        byteArray0[3] = (byte) (-70);
        try {
            rocketMQPartitionSplitSerializer0.deserialize(1, byteArray0);
            fail("Expecting exception: UTFDataFormatException");

        } catch (UTFDataFormatException e) {
            //
            // malformed input around byte 1
            //
            verifyException("java.io.DataInputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test7() throws Throwable {
        RocketMQPartitionSplitSerializer rocketMQPartitionSplitSerializer0 =
                new RocketMQPartitionSplitSerializer();
        byte[] byteArray0 = new byte[8];
        try {
            rocketMQPartitionSplitSerializer0.deserialize(1, byteArray0);
            fail("Expecting exception: EOFException");

        } catch (EOFException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.io.DataInputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test8() throws Throwable {
        RocketMQPartitionSplitSerializer rocketMQPartitionSplitSerializer0 =
                new RocketMQPartitionSplitSerializer();
        MessageQueue messageQueue0 = new MessageQueue();
        RocketMQSourceSplit rocketMQSourceSplit0 = new RocketMQSourceSplit(messageQueue0, 0L, 1L);
        // Undeclared exception!
        try {
            rocketMQPartitionSplitSerializer0.serialize(rocketMQSourceSplit0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test9() throws Throwable {
        RocketMQPartitionSplitSerializer rocketMQPartitionSplitSerializer0 =
                new RocketMQPartitionSplitSerializer();
        int int0 = rocketMQPartitionSplitSerializer0.getVersion();
        assertEquals(1, int0);
    }
}
