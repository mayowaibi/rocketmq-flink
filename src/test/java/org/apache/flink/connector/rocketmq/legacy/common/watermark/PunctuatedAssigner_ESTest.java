/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 26 12:04:48 GMT 2025
 */

package org.apache.flink.connector.rocketmq.legacy.common.watermark;

import org.apache.flink.streaming.api.watermark.Watermark;

import org.apache.rocketmq.common.message.MessageExt;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.Test;
import org.junit.runner.RunWith;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
        mockJVMNonDeterminism = true,
        useVFS = true,
        useVNET = true,
        resetStaticState = true,
        separateClassLoader = true,
        useJEE = true)
public class PunctuatedAssigner_ESTest extends PunctuatedAssigner_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0() throws Throwable {
        PunctuatedAssigner punctuatedAssigner0 = new PunctuatedAssigner();
        MessageExt messageExt0 = mock(MessageExt.class, new ViolatedAssumptionAnswer());
        doReturn(0L).when(messageExt0).getBornTimestamp();
        long long0 = punctuatedAssigner0.extractTimestamp(messageExt0, 1964L);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test1() throws Throwable {
        PunctuatedAssigner punctuatedAssigner0 = new PunctuatedAssigner();
        MessageExt messageExt0 = mock(MessageExt.class, new ViolatedAssumptionAnswer());
        doReturn(1L).when(messageExt0).getBornTimestamp();
        long long0 = punctuatedAssigner0.extractTimestamp(messageExt0, 0L);
        assertEquals(1L, long0);
    }

    @Test(timeout = 4000)
    public void test2() throws Throwable {
        PunctuatedAssigner punctuatedAssigner0 = new PunctuatedAssigner();
        MessageExt messageExt0 = mock(MessageExt.class, new ViolatedAssumptionAnswer());
        doReturn("@:<o~CH%6Eb]").when(messageExt0).getProperty(anyString());
        Watermark watermark0 = punctuatedAssigner0.checkAndGetNextWatermark(messageExt0, 0L);
        assertEquals(0L, watermark0.getTimestamp());
        assertNotNull(watermark0);
    }

    @Test(timeout = 4000)
    public void test3() throws Throwable {
        PunctuatedAssigner punctuatedAssigner0 = new PunctuatedAssigner();
        MessageExt messageExt0 = mock(MessageExt.class, new ViolatedAssumptionAnswer());
        doReturn("c,dNL6?9~").when(messageExt0).getProperty(anyString());
        Watermark watermark0 = punctuatedAssigner0.checkAndGetNextWatermark(messageExt0, (-589L));
        assertNotNull(watermark0);
        assertEquals((-589L), watermark0.getTimestamp());
    }

    @Test(timeout = 4000)
    public void test4() throws Throwable {
        PunctuatedAssigner punctuatedAssigner0 = new PunctuatedAssigner();
        // Undeclared exception!
        try {
            punctuatedAssigner0.extractTimestamp((MessageExt) null, 0L);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.legacy.common.watermark.PunctuatedAssigner",
                    e);
        }
    }

    @Test(timeout = 4000)
    public void test5() throws Throwable {
        PunctuatedAssigner punctuatedAssigner0 = new PunctuatedAssigner();
        // Undeclared exception!
        try {
            punctuatedAssigner0.checkAndGetNextWatermark((MessageExt) null, 0L);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.legacy.common.watermark.PunctuatedAssigner",
                    e);
        }
    }

    @Test(timeout = 4000)
    public void test6() throws Throwable {
        MessageExt messageExt0 = mock(MessageExt.class, new ViolatedAssumptionAnswer());
        doReturn("").when(messageExt0).getProperty(anyString());
        PunctuatedAssigner punctuatedAssigner0 = new PunctuatedAssigner();
        Watermark watermark0 = punctuatedAssigner0.checkAndGetNextWatermark(messageExt0, 2094L);
        assertEquals(2094L, watermark0.getTimestamp());
        assertNotNull(watermark0);
    }

    @Test(timeout = 4000)
    public void test7() throws Throwable {
        PunctuatedAssigner punctuatedAssigner0 = new PunctuatedAssigner();
        MessageExt messageExt0 = mock(MessageExt.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(messageExt0).getProperty(anyString());
        Watermark watermark0 = punctuatedAssigner0.checkAndGetNextWatermark(messageExt0, 0L);
        assertNull(watermark0);
    }

    @Test(timeout = 4000)
    public void test8() throws Throwable {
        PunctuatedAssigner punctuatedAssigner0 = new PunctuatedAssigner();
        MessageExt messageExt0 = mock(MessageExt.class, new ViolatedAssumptionAnswer());
        doReturn((-3L)).when(messageExt0).getBornTimestamp();
        long long0 = punctuatedAssigner0.extractTimestamp(messageExt0, (-3L));
        assertEquals((-3L), long0);
    }
}
