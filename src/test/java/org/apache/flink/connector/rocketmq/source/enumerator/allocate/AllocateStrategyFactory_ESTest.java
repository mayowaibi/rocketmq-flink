/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 26 11:26:54 GMT 2025
 */

package org.apache.flink.connector.rocketmq.source.enumerator.allocate;

import org.apache.flink.configuration.Configuration;
import org.apache.flink.connector.rocketmq.source.enumerator.RocketMQSourceEnumState;
import org.apache.flink.connector.rocketmq.source.split.RocketMQPartitionSplitSerializer;
import org.apache.flink.connector.rocketmq.source.split.RocketMQSourceSplit;
import org.apache.flink.runtime.operators.coordination.OperatorCoordinator;
import org.apache.flink.runtime.source.coordinator.SourceCoordinatorContext;
import org.apache.flink.runtime.source.coordinator.SourceCoordinatorProvider;

import org.apache.rocketmq.common.message.MessageQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.HashMap;
import java.util.LinkedHashSet;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
        mockJVMNonDeterminism = true,
        useVFS = true,
        useVNET = true,
        resetStaticState = true,
        separateClassLoader = true,
        useJEE = true)
public class AllocateStrategyFactory_ESTest extends AllocateStrategyFactory_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0() throws Throwable {
        SourceCoordinatorProvider.CoordinatorExecutorThreadFactory
                sourceCoordinatorProvider_CoordinatorExecutorThreadFactory0 =
                        mock(
                                SourceCoordinatorProvider.CoordinatorExecutorThreadFactory.class,
                                new ViolatedAssumptionAnswer());
        OperatorCoordinator.Context operatorCoordinator_Context0 =
                mock(OperatorCoordinator.Context.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(operatorCoordinator_Context0).currentParallelism();
        RocketMQPartitionSplitSerializer rocketMQPartitionSplitSerializer0 =
                new RocketMQPartitionSplitSerializer();
        SourceCoordinatorContext<RocketMQSourceSplit> sourceCoordinatorContext0 =
                new SourceCoordinatorContext<RocketMQSourceSplit>(
                        sourceCoordinatorProvider_CoordinatorExecutorThreadFactory0,
                        3195150,
                        operatorCoordinator_Context0,
                        rocketMQPartitionSplitSerializer0);
        LinkedHashSet<MessageQueue> linkedHashSet0 = new LinkedHashSet<MessageQueue>();
        RocketMQSourceEnumState rocketMQSourceEnumState0 =
                new RocketMQSourceEnumState(linkedHashSet0);
        // Undeclared exception!
        try {
            AllocateStrategyFactory.getStrategy(
                    (Configuration) null, sourceCoordinatorContext0, rocketMQSourceEnumState0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.source.enumerator.allocate.AllocateStrategyFactory",
                    e);
        }
    }

    @Test(timeout = 4000)
    public void test1() throws Throwable {
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        Configuration configuration0 = Configuration.fromMap(hashMap0);
        SourceCoordinatorProvider.CoordinatorExecutorThreadFactory
                sourceCoordinatorProvider_CoordinatorExecutorThreadFactory0 =
                        mock(
                                SourceCoordinatorProvider.CoordinatorExecutorThreadFactory.class,
                                new ViolatedAssumptionAnswer());
        OperatorCoordinator.Context operatorCoordinator_Context0 =
                mock(OperatorCoordinator.Context.class, new ViolatedAssumptionAnswer());
        doReturn(1).when(operatorCoordinator_Context0).currentParallelism();
        RocketMQPartitionSplitSerializer rocketMQPartitionSplitSerializer0 =
                new RocketMQPartitionSplitSerializer();
        SourceCoordinatorContext<RocketMQSourceSplit> sourceCoordinatorContext0 =
                new SourceCoordinatorContext<RocketMQSourceSplit>(
                        sourceCoordinatorProvider_CoordinatorExecutorThreadFactory0,
                        1,
                        operatorCoordinator_Context0,
                        rocketMQPartitionSplitSerializer0);
        LinkedHashSet<MessageQueue> linkedHashSet0 = new LinkedHashSet<MessageQueue>();
        RocketMQSourceEnumState rocketMQSourceEnumState0 =
                new RocketMQSourceEnumState(linkedHashSet0);
        AllocateStrategy allocateStrategy0 =
                AllocateStrategyFactory.getStrategy(
                        configuration0, sourceCoordinatorContext0, rocketMQSourceEnumState0);
        assertEquals("hash", allocateStrategy0.getStrategyName());
    }
}
