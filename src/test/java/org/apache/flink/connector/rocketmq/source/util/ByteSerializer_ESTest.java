/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 26 10:55:08 GMT 2025
 */

package org.apache.flink.connector.rocketmq.source.util;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.nio.charset.Charset;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.time.Duration;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.OffsetDateTime;
import java.time.Period;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
        mockJVMNonDeterminism = true,
        useVFS = true,
        useVNET = true,
        resetStaticState = true,
        separateClassLoader = true,
        useJEE = true)
public class ByteSerializer_ESTest extends ByteSerializer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        ByteSerializer byteSerializer0 = new ByteSerializer();
        byte[] byteArray0 = new byte[2];
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_BigDecimal;
        Object object0 =
                ByteSerializer.deserialize(
                        byteArray0, byteSerializer_ValueType0, byteSerializer0.DEFAULT_CHARSET);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        byte[] byteArray0 = new byte[2];
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_BigDecimal;
        Object object0 = ByteSerializer.deserialize(byteArray0, byteSerializer_ValueType0);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        byte[] byteArray0 = new byte[0];
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_BigInteger;
        Charset charset0 = ByteSerializer.DEFAULT_CHARSET;
        // Undeclared exception!
        try {
            ByteSerializer.deserialize(byteArray0, byteSerializer_ValueType0, charset0);
            fail("Expecting exception: NumberFormatException");

        } catch (NumberFormatException e) {
            //
            // Zero length BigInteger
            //
            verifyException("java.math.BigInteger", e);
        }
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        ByteSerializer byteSerializer0 = new ByteSerializer();
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_Byte;
        byte[] byteArray0 = new byte[0];
        // Undeclared exception!
        try {
            ByteSerializer.deserialize(
                    byteArray0, byteSerializer_ValueType0, byteSerializer0.DEFAULT_CHARSET);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // 0
            //
            verifyException("org.apache.flink.connector.rocketmq.source.util.ByteSerializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_Boolean;
        // Undeclared exception!
        try {
            ByteSerializer.deserialize((byte[]) null, byteSerializer_ValueType0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.connector.rocketmq.source.util.ByteUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_Byte;
        byte[] byteArray0 = new byte[0];
        // Undeclared exception!
        try {
            ByteSerializer.deserialize(byteArray0, byteSerializer_ValueType0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // 0
            //
            verifyException("org.apache.flink.connector.rocketmq.source.util.ByteSerializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        byte[] byteArray0 = new byte[5];
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_String;
        // Undeclared exception!
        try {
            ByteSerializer.deserialize(byteArray0, byteSerializer_ValueType0, (Charset) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
        }
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_Time;
        // Undeclared exception!
        try {
            ByteSerializer.deserialize(byteArray0, byteSerializer_ValueType0, (Charset) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // offset (0) + length (8) exceed the capacity of the array: 6
            //
            verifyException("org.apache.flink.connector.rocketmq.source.util.ByteUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        Class<OffsetDateTime> class0 = OffsetDateTime.class;
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.getTypeIndex(class0);
        assertEquals(ByteSerializer.ValueType.V_OffsetDateTime, byteSerializer_ValueType0);
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        Class<Object> class0 = Object.class;
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.getTypeIndex(class0);
        assertEquals(ByteSerializer.ValueType.Unsupported, byteSerializer_ValueType0);
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        Class<LocalTime> class0 = LocalTime.class;
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.getTypeIndex(class0);
        assertEquals(ByteSerializer.ValueType.V_LocalTime, byteSerializer_ValueType0);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        Class<Duration> class0 = Duration.class;
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.getTypeIndex(class0);
        assertEquals(ByteSerializer.ValueType.V_Duration, byteSerializer_ValueType0);
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        Class<Period> class0 = Period.class;
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.getTypeIndex(class0);
        assertEquals(ByteSerializer.ValueType.V_Period, byteSerializer_ValueType0);
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
        Class<LocalDateTime> class0 = LocalDateTime.class;
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.getTypeIndex(class0);
        assertEquals(ByteSerializer.ValueType.V_LocalDateTime, byteSerializer_ValueType0);
    }

    @Test(timeout = 4000)
    public void test14() throws Throwable {
        Class<LocalDate> class0 = LocalDate.class;
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.getTypeIndex(class0);
        assertEquals(ByteSerializer.ValueType.V_LocalDate, byteSerializer_ValueType0);
    }

    @Test(timeout = 4000)
    public void test15() throws Throwable {
        Class<BigDecimal> class0 = BigDecimal.class;
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.getTypeIndex(class0);
        assertEquals(ByteSerializer.ValueType.V_BigDecimal, byteSerializer_ValueType0);
    }

    @Test(timeout = 4000)
    public void test16() throws Throwable {
        Class<Time> class0 = Time.class;
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.getTypeIndex(class0);
        assertEquals(ByteSerializer.ValueType.V_Time, byteSerializer_ValueType0);
    }

    @Test(timeout = 4000)
    public void test17() throws Throwable {
        Class<Date> class0 = Date.class;
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.getTypeIndex(class0);
        assertEquals(ByteSerializer.ValueType.V_Date, byteSerializer_ValueType0);
    }

    @Test(timeout = 4000)
    public void test18() throws Throwable {
        Class<Timestamp> class0 = Timestamp.class;
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.getTypeIndex(class0);
        assertEquals(ByteSerializer.ValueType.V_Timestamp, byteSerializer_ValueType0);
    }

    @Test(timeout = 4000)
    public void test19() throws Throwable {
        Class<Boolean> class0 = Boolean.class;
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.getTypeIndex(class0);
        assertEquals(ByteSerializer.ValueType.V_Boolean, byteSerializer_ValueType0);
    }

    @Test(timeout = 4000)
    public void test20() throws Throwable {
        Class<Double> class0 = Double.class;
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.getTypeIndex(class0);
        assertEquals(ByteSerializer.ValueType.V_Double, byteSerializer_ValueType0);
    }

    @Test(timeout = 4000)
    public void test21() throws Throwable {
        Class<Float> class0 = Float.class;
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.getTypeIndex(class0);
        assertEquals(ByteSerializer.ValueType.V_Float, byteSerializer_ValueType0);
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        Class<BigInteger> class0 = BigInteger.class;
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.getTypeIndex(class0);
        byte[] byteArray0 = new byte[0];
        // Undeclared exception!
        try {
            ByteSerializer.deserialize(byteArray0, byteSerializer_ValueType0);
            fail("Expecting exception: NumberFormatException");

        } catch (NumberFormatException e) {
            //
            // Zero length BigInteger
            //
            verifyException("java.math.BigInteger", e);
        }
    }

    @Test(timeout = 4000)
    public void test23() throws Throwable {
        Class<Integer> class0 = Integer.class;
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.getTypeIndex(class0);
        assertEquals(ByteSerializer.ValueType.V_Integer, byteSerializer_ValueType0);
    }

    @Test(timeout = 4000)
    public void test24() throws Throwable {
        Class<Short> class0 = Short.class;
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.getTypeIndex(class0);
        assertEquals(ByteSerializer.ValueType.V_Short, byteSerializer_ValueType0);
    }

    @Test(timeout = 4000)
    public void test25() throws Throwable {
        Class<Byte> class0 = Byte.class;
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.getTypeIndex(class0);
        assertEquals(ByteSerializer.ValueType.V_Byte, byteSerializer_ValueType0);
    }

    @Test(timeout = 4000)
    public void test26() throws Throwable {
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_Byte;
        Charset charset0 = ByteSerializer.DEFAULT_CHARSET;
        Object object0 =
                ByteSerializer.deserialize((byte[]) null, byteSerializer_ValueType0, charset0);
        assertEquals((byte) 0, object0);
    }

    @Test(timeout = 4000)
    public void test27() throws Throwable {
        byte[] byteArray0 = new byte[9];
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_Period;
        // Undeclared exception!
        try {
            ByteSerializer.deserialize(byteArray0, byteSerializer_ValueType0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.connector.rocketmq.source.util.ByteSerializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test28() throws Throwable {
        ByteSerializer.ValueType byteSerializer_ValueType0 =
                ByteSerializer.ValueType.valueOf("V_Double");
        Charset charset0 = ByteSerializer.DEFAULT_CHARSET;
        byte[] byteArray0 = new byte[2];
        // Undeclared exception!
        try {
            ByteSerializer.deserialize(byteArray0, byteSerializer_ValueType0, charset0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // offset (0) + length (8) exceed the capacity of the array: 2
            //
            verifyException("org.apache.flink.connector.rocketmq.source.util.ByteUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test29() throws Throwable {
        byte[] byteArray0 = new byte[7];
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_Float;
        Object object0 = ByteSerializer.deserialize(byteArray0, byteSerializer_ValueType0);
        assertEquals(0.0F, object0);
    }

    @Test(timeout = 4000)
    public void test30() throws Throwable {
        Class<Long> class0 = Long.class;
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.getTypeIndex(class0);
        byte[] byteArray0 = new byte[5];
        Charset charset0 = ByteSerializer.DEFAULT_CHARSET;
        // Undeclared exception!
        try {
            ByteSerializer.deserialize(byteArray0, byteSerializer_ValueType0, charset0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // offset (0) + length (8) exceed the capacity of the array: 5
            //
            verifyException("org.apache.flink.connector.rocketmq.source.util.ByteUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test31() throws Throwable {
        byte[] byteArray0 = new byte[7];
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_Integer;
        Object object0 = ByteSerializer.deserialize(byteArray0, byteSerializer_ValueType0);
        assertEquals(0, object0);
    }

    @Test(timeout = 4000)
    public void test32() throws Throwable {
        byte[] byteArray0 = new byte[3];
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_Short;
        Object object0 = ByteSerializer.deserialize(byteArray0, byteSerializer_ValueType0);
        assertEquals((short) 0, object0);
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        byte[] byteArray0 = new byte[5];
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_ByteArray;
        Object object0 = ByteSerializer.deserialize(byteArray0, byteSerializer_ValueType0);
        assertSame(byteArray0, object0);
    }

    @Test(timeout = 4000)
    public void test34() throws Throwable {
        Class<String> class0 = String.class;
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.getTypeIndex(class0);
        Charset charset0 = ByteSerializer.DEFAULT_CHARSET;
        Object object0 =
                ByteSerializer.deserialize((byte[]) null, byteSerializer_ValueType0, charset0);
        assertEquals("", object0);
    }

    @Test(timeout = 4000)
    public void test35() throws Throwable {
        byte[] byteArray0 = new byte[10];
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_Date;
        Charset charset0 = Charset.defaultCharset();
        Object object0 =
                ByteSerializer.deserialize(byteArray0, byteSerializer_ValueType0, charset0);
        assertNotNull(object0);
    }

    @Test(timeout = 4000)
    public void test36() throws Throwable {
        byte[] byteArray0 = new byte[13];
        ByteSerializer.ValueType byteSerializer_ValueType0 = ByteSerializer.ValueType.V_Timestamp;
        Charset charset0 = Charset.defaultCharset();
        Object object0 =
                ByteSerializer.deserialize(byteArray0, byteSerializer_ValueType0, charset0);
        assertEquals("1970-01-01 00:00:00.0", object0.toString());
    }
}
