/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 26 12:15:14 GMT 2025
 */

package org.apache.flink.connector.rocketmq.common.config;

import org.apache.flink.configuration.ConfigOption;
import org.apache.flink.configuration.Configuration;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.lang.reflect.Array;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
        mockJVMNonDeterminism = true,
        useVFS = true,
        useVNET = true,
        resetStaticState = true,
        separateClassLoader = true,
        useJEE = true)
public class RocketMQConfigValidator_ESTest extends RocketMQConfigValidator_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0() throws Throwable {
        RocketMQConfigValidator.RocketMQConfigValidatorBuilder
                rocketMQConfigValidator_RocketMQConfigValidatorBuilder0 =
                        RocketMQConfigValidator.builder();
        ConfigOption<Object> configOption0 =
                (ConfigOption<Object>) mock(ConfigOption.class, new ViolatedAssumptionAnswer());
        ConfigOption<Object>[] configOptionArray0 =
                (ConfigOption<Object>[]) Array.newInstance(ConfigOption.class, 2);
        configOptionArray0[0] = configOption0;
        configOptionArray0[1] = configOption0;
        RocketMQConfigValidator.RocketMQConfigValidatorBuilder
                rocketMQConfigValidator_RocketMQConfigValidatorBuilder1 =
                        rocketMQConfigValidator_RocketMQConfigValidatorBuilder0.conflictOptions(
                                configOptionArray0);
        assertSame(
                rocketMQConfigValidator_RocketMQConfigValidatorBuilder1,
                rocketMQConfigValidator_RocketMQConfigValidatorBuilder0);
    }

    @Test(timeout = 4000)
    public void test1() throws Throwable {
        RocketMQConfigValidator.RocketMQConfigValidatorBuilder
                rocketMQConfigValidator_RocketMQConfigValidatorBuilder0 =
                        new RocketMQConfigValidator.RocketMQConfigValidatorBuilder();
        ConfigOption<String> configOption0 =
                (ConfigOption<String>) mock(ConfigOption.class, new ViolatedAssumptionAnswer());
        RocketMQConfigValidator.RocketMQConfigValidatorBuilder
                rocketMQConfigValidator_RocketMQConfigValidatorBuilder1 =
                        rocketMQConfigValidator_RocketMQConfigValidatorBuilder0.requiredOption(
                                configOption0);
        RocketMQConfigValidator rocketMQConfigValidator0 =
                rocketMQConfigValidator_RocketMQConfigValidatorBuilder1.build();
        // Undeclared exception!
        try {
            rocketMQConfigValidator0.validate((Configuration) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.common.config.RocketMQConfigValidator", e);
        }
    }

    @Test(timeout = 4000)
    public void test2() throws Throwable {
        RocketMQConfigValidator.RocketMQConfigValidatorBuilder
                rocketMQConfigValidator_RocketMQConfigValidatorBuilder0 =
                        RocketMQConfigValidator.builder();
        ConfigOption<String> configOption0 =
                (ConfigOption<String>) mock(ConfigOption.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(configOption0).toString();
        RocketMQConfigValidator.RocketMQConfigValidatorBuilder
                rocketMQConfigValidator_RocketMQConfigValidatorBuilder1 =
                        rocketMQConfigValidator_RocketMQConfigValidatorBuilder0.requiredOption(
                                configOption0);
        RocketMQConfigValidator rocketMQConfigValidator0 =
                rocketMQConfigValidator_RocketMQConfigValidatorBuilder1.build();
        Configuration configuration0 = mock(Configuration.class, new ViolatedAssumptionAnswer());
        doReturn(false)
                .when(configuration0)
                .contains(nullable(org.apache.flink.configuration.ConfigOption.class));
        // Undeclared exception!
        try {
            rocketMQConfigValidator0.validate(configuration0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Config option null is not provided for rocketmq client.
            //
            verifyException("org.apache.flink.util.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test3() throws Throwable {
        RocketMQConfigValidator.RocketMQConfigValidatorBuilder
                rocketMQConfigValidator_RocketMQConfigValidatorBuilder0 =
                        new RocketMQConfigValidator.RocketMQConfigValidatorBuilder();
        ConfigOption<Object>[] configOptionArray0 =
                (ConfigOption<Object>[]) Array.newInstance(ConfigOption.class, 1);
        // Undeclared exception!
        try {
            rocketMQConfigValidator_RocketMQConfigValidatorBuilder0.conflictOptions(
                    configOptionArray0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // You should provide at least two conflict options.
            //
            verifyException("org.apache.flink.util.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test4() throws Throwable {
        RocketMQConfigValidator.RocketMQConfigValidatorBuilder
                rocketMQConfigValidator_RocketMQConfigValidatorBuilder0 =
                        RocketMQConfigValidator.builder();
        RocketMQConfigValidator rocketMQConfigValidator0 =
                rocketMQConfigValidator_RocketMQConfigValidatorBuilder0.build();
        Configuration configuration0 = mock(Configuration.class, new ViolatedAssumptionAnswer());
        rocketMQConfigValidator0.validate(configuration0);
    }
}
