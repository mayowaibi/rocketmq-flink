/**
 * Scaffolding file used to store all the setups needed to run tests automatically generated by
 * EvoSuite Wed Mar 26 12:02:27 GMT 2025
 */
package org.apache.flink.connector.rocketmq.legacy.common.serialization;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.evosuite.runtime.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@EvoSuiteClassExclude
public class SimpleStringDeserializationSchema_ESTest_scaffolding {

    @org.junit.Rule
    public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr =
            new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

    private static final java.util.Properties defaultProperties =
            (java.util.Properties) java.lang.System.getProperties().clone();

    private org.evosuite.runtime.thread.ThreadStopper threadStopper =
            new org.evosuite.runtime.thread.ThreadStopper(
                    org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);

    @BeforeClass
    public static void initEvoSuiteFramework() {
        org.evosuite.runtime.RuntimeSettings.className =
                "org.apache.flink.connector.rocketmq.legacy.common.serialization.SimpleStringDeserializationSchema";
        org.evosuite.runtime.GuiSupport.initialize();
        org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100;
        org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000;
        org.evosuite.runtime.RuntimeSettings.mockSystemIn = true;
        org.evosuite.runtime.RuntimeSettings.sandboxMode =
                org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED;
        org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT();
        org.evosuite.runtime.classhandling.JDKClassResetter.init();
        setSystemProperties();
        initializeClasses();
        org.evosuite.runtime.Runtime.getInstance().resetRuntime();
    }

    @AfterClass
    public static void clearEvoSuiteFramework() {
        Sandbox.resetDefaultSecurityManager();
        java.lang.System.setProperties((java.util.Properties) defaultProperties.clone());
    }

    @Before
    public void initTestCase() {
        threadStopper.storeCurrentThreads();
        threadStopper.startRecordingTime();
        org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler();
        org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode();
        setSystemProperties();
        org.evosuite.runtime.GuiSupport.setHeadless();
        org.evosuite.runtime.Runtime.getInstance().resetRuntime();
        org.evosuite.runtime.agent.InstrumentingAgent.activate();
    }

    @After
    public void doneWithTestCase() {
        threadStopper.killAndJoinClientThreads();
        org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks();
        org.evosuite.runtime.classhandling.JDKClassResetter.reset();
        resetClasses();
        org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode();
        org.evosuite.runtime.agent.InstrumentingAgent.deactivate();
        org.evosuite.runtime.GuiSupport.restoreHeadlessMode();
    }

    public static void setSystemProperties() {

        java.lang.System.setProperties((java.util.Properties) defaultProperties.clone());
        java.lang.System.setProperty("file.encoding", "UTF-8");
        java.lang.System.setProperty("java.awt.headless", "true");
        java.lang.System.setProperty(
                "java.io.tmpdir", "/var/folders/t3/x2jshcps4n99vnsnf_qb26qm0000gn/T/");
        java.lang.System.setProperty("user.country", "GB");
        java.lang.System.setProperty("user.dir", "/Users/isaac/IdeaProjects/rocketmq-flink");
        java.lang.System.setProperty("user.home", "/Users/isaac");
        java.lang.System.setProperty("user.language", "en");
        java.lang.System.setProperty("user.name", "isaac");
        java.lang.System.setProperty("user.timezone", "America/Toronto");
    }

    private static void initializeClasses() {
        org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(
                SimpleStringDeserializationSchema_ESTest_scaffolding.class.getClassLoader(),
                "org.apache.flink.api.java.typeutils.PojoTypeInfo",
                "org.apache.flink.api.common.typeutils.base.BigDecSerializer",
                "org.apache.flink.api.common.typeutils.base.StringComparator",
                "org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo",
                "org.apache.flink.api.common.typeutils.base.FloatComparator",
                "org.apache.flink.api.java.typeutils.TupleTypeInfo",
                "org.apache.flink.api.common.typeutils.base.BigDecComparator",
                "org.apache.flink.api.common.typeutils.base.StringSerializer",
                "org.apache.flink.api.java.typeutils.RowTypeInfo",
                "org.apache.flink.api.common.typeinfo.AtomicType",
                "org.apache.flink.api.common.typeinfo.TypeHint",
                "org.apache.flink.api.common.typeinfo.BasicTypeInfo",
                "org.apache.flink.api.common.typeutils.base.IntSerializer",
                "org.apache.flink.api.common.typeutils.TypeSerializerSnapshot",
                "org.apache.flink.api.common.InvalidProgramException",
                "org.apache.flink.api.common.typeutils.base.FloatSerializer",
                "org.apache.flink.api.common.typeutils.base.DateComparator",
                "org.apache.flink.api.common.functions.Function",
                "org.apache.flink.api.common.typeinfo.TypeInformation",
                "org.apache.flink.api.common.typeutils.base.InstantComparator",
                "org.apache.flink.api.common.typeutils.base.BooleanComparator",
                "org.apache.flink.api.common.typeutils.base.BasicTypeComparator",
                "org.apache.flink.api.java.tuple.Tuple",
                "org.apache.flink.api.common.typeutils.base.DateSerializer",
                "org.apache.flink.connector.rocketmq.legacy.common.serialization.SimpleStringDeserializationSchema",
                "org.apache.flink.api.common.typeutils.TypeSerializer",
                "org.apache.flink.api.common.typeinfo.NumericTypeInfo",
                "org.apache.flink.api.common.typeutils.base.CharSerializer",
                "org.apache.flink.api.common.typeinfo.SqlTimeTypeInfo",
                "org.apache.flink.api.common.typeutils.TypeComparator",
                "org.apache.flink.api.common.typeutils.base.CharComparator",
                "org.apache.flink.util.Preconditions",
                "org.apache.flink.api.common.typeutils.base.ByteComparator",
                "org.apache.flink.api.common.typeutils.base.BooleanSerializer",
                "org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo",
                "org.apache.flink.api.java.typeutils.TypeExtractor",
                "org.apache.flink.api.common.typeinfo.FractionalTypeInfo",
                "org.apache.flink.api.common.typeinfo.IntegerTypeInfo",
                "org.apache.flink.api.java.typeutils.ResultTypeQueryable",
                "org.apache.flink.api.common.ExecutionConfig",
                "org.apache.flink.api.common.typeutils.base.ByteSerializer",
                "org.apache.flink.api.common.typeutils.base.ShortComparator",
                "org.apache.flink.api.common.typeutils.base.DoubleComparator",
                "org.apache.flink.api.common.typeutils.base.DoubleSerializer",
                "org.apache.flink.connector.rocketmq.legacy.common.serialization.KeyValueDeserializationSchema",
                "org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo",
                "org.apache.flink.api.common.typeutils.base.ShortSerializer",
                "org.apache.flink.api.common.typeinfo.TypeInfo",
                "org.apache.flink.api.common.typeutils.base.LongComparator",
                "org.apache.flink.api.common.functions.InvalidTypesException",
                "org.apache.flink.api.common.typeutils.base.BigIntComparator",
                "org.apache.flink.api.common.typeutils.base.LongSerializer",
                "org.apache.flink.api.common.Archiveable",
                "org.apache.flink.api.java.typeutils.TypeExtractionException",
                "org.apache.flink.util.FlinkRuntimeException",
                "org.apache.flink.api.java.typeutils.GenericTypeInfo",
                "org.apache.flink.api.common.typeutils.CompositeType",
                "org.apache.flink.api.common.typeutils.base.IntComparator",
                "org.apache.flink.api.java.typeutils.MissingTypeInfo",
                "org.apache.flink.api.common.typeutils.base.InstantSerializer",
                "org.apache.flink.api.common.typeutils.base.BigIntSerializer",
                "org.apache.flink.api.java.typeutils.TypeExtractionUtils",
                "org.apache.flink.api.common.typeutils.base.VoidSerializer",
                "org.apache.flink.api.common.typeutils.base.TypeSerializerSingleton",
                "org.apache.flink.api.java.typeutils.EnumTypeInfo",
                "org.apache.flink.api.java.typeutils.TupleTypeInfoBase");
    }

    private static void resetClasses() {
        org.evosuite.runtime.classhandling.ClassResetter.getInstance()
                .setClassLoader(
                        SimpleStringDeserializationSchema_ESTest_scaffolding.class
                                .getClassLoader());

        org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
                "org.apache.flink.connector.rocketmq.legacy.common.serialization.SimpleStringDeserializationSchema",
                "org.apache.flink.api.common.typeinfo.TypeInformation",
                "org.apache.flink.api.java.typeutils.TypeExtractor",
                "org.apache.flink.api.java.typeutils.TypeExtractionUtils",
                "org.apache.flink.util.Preconditions",
                "org.apache.flink.api.common.typeutils.TypeSerializer",
                "org.apache.flink.api.common.typeutils.base.TypeSerializerSingleton",
                "org.apache.flink.api.common.typeutils.base.StringSerializer",
                "org.apache.flink.api.common.typeutils.base.BooleanSerializer",
                "org.apache.flink.api.common.typeinfo.NumericTypeInfo",
                "org.apache.flink.api.common.typeinfo.IntegerTypeInfo",
                "org.apache.flink.api.common.typeutils.base.ByteSerializer",
                "org.apache.flink.api.common.typeutils.base.ShortSerializer",
                "org.apache.flink.api.common.typeutils.base.IntSerializer",
                "org.apache.flink.api.common.typeutils.base.LongSerializer",
                "org.apache.flink.api.common.typeinfo.FractionalTypeInfo",
                "org.apache.flink.api.common.typeutils.base.FloatSerializer",
                "org.apache.flink.api.common.typeutils.base.DoubleSerializer",
                "org.apache.flink.api.common.typeutils.base.CharSerializer",
                "org.apache.flink.api.common.typeutils.base.DateSerializer",
                "org.apache.flink.api.common.typeutils.base.VoidSerializer",
                "org.apache.flink.api.common.typeutils.base.BigIntSerializer",
                "org.apache.flink.api.common.typeutils.base.BigDecSerializer",
                "org.apache.flink.api.common.typeutils.base.InstantSerializer",
                "org.apache.flink.api.common.typeinfo.BasicTypeInfo");
    }
}
