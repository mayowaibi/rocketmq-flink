/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 26 12:30:30 GMT 2025
 */

package org.apache.flink.connector.rocketmq.source.reader.deserializer;

import org.apache.flink.api.common.typeinfo.TypeInformation;
import org.apache.flink.connector.rocketmq.source.reader.MessageView;
import org.apache.flink.util.Collector;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.Test;
import org.junit.runner.RunWith;

import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
        mockJVMNonDeterminism = true,
        useVFS = true,
        useVNET = true,
        resetStaticState = true,
        separateClassLoader = true,
        useJEE = true)
public class RocketMQSchemaWrapper_ESTest extends RocketMQSchemaWrapper_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0() throws Throwable {
        RocketMQSchemaWrapper<Object> rocketMQSchemaWrapper0 = new RocketMQSchemaWrapper<Object>();
        MessageView messageView0 = mock(MessageView.class, new ViolatedAssumptionAnswer());
        Collector<Object> collector0 =
                (Collector<Object>) mock(Collector.class, new ViolatedAssumptionAnswer());
        rocketMQSchemaWrapper0.deserialize(messageView0, collector0);
    }

    @Test(timeout = 4000)
    public void test1() throws Throwable {
        RocketMQSchemaWrapper<Object> rocketMQSchemaWrapper0 = new RocketMQSchemaWrapper<Object>();
        TypeInformation<Object> typeInformation0 = rocketMQSchemaWrapper0.getProducedType();
        assertNull(typeInformation0);
    }
}
