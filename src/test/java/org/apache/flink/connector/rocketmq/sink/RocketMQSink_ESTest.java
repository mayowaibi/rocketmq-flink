/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 26 12:10:41 GMT 2025
 */

package org.apache.flink.connector.rocketmq.sink;

import org.apache.flink.api.connector.sink2.Committer;
import org.apache.flink.api.connector.sink2.Sink;
import org.apache.flink.configuration.Configuration;
import org.apache.flink.connector.rocketmq.legacy.common.selector.MessageQueueSelector;
import org.apache.flink.connector.rocketmq.sink.committer.SendCommittable;
import org.apache.flink.connector.rocketmq.sink.writer.serializer.RocketMQSerializationSchema;
import org.apache.flink.core.io.SimpleVersionedSerializer;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.Test;
import org.junit.runner.RunWith;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
        mockJVMNonDeterminism = true,
        useVFS = true,
        useVNET = true,
        resetStaticState = true,
        separateClassLoader = true,
        useJEE = true)
public class RocketMQSink_ESTest extends RocketMQSink_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0() throws Throwable {
        RocketMQSinkBuilder<Integer> rocketMQSinkBuilder0 = RocketMQSink.builder();
        assertNotNull(rocketMQSinkBuilder0);
    }

    @Test(timeout = 4000)
    public void test1() throws Throwable {
        MessageQueueSelector messageQueueSelector0 =
                mock(MessageQueueSelector.class, new ViolatedAssumptionAnswer());
        RocketMQSerializationSchema<Object> rocketMQSerializationSchema0 =
                (RocketMQSerializationSchema<Object>)
                        mock(RocketMQSerializationSchema.class, new ViolatedAssumptionAnswer());
        RocketMQSink<Object> rocketMQSink0 =
                new RocketMQSink<Object>(
                        (Configuration) null, messageQueueSelector0, rocketMQSerializationSchema0);
        Sink.InitContext sink_InitContext0 =
                mock(Sink.InitContext.class, new ViolatedAssumptionAnswer());
        // Undeclared exception!
        try {
            rocketMQSink0.createWriter(sink_InitContext0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.connector.rocketmq.sink.writer.RocketMQWriter", e);
        }
    }

    @Test(timeout = 4000)
    public void test2() throws Throwable {
        Configuration configuration0 = mock(Configuration.class, new ViolatedAssumptionAnswer());
        MessageQueueSelector messageQueueSelector0 =
                mock(MessageQueueSelector.class, new ViolatedAssumptionAnswer());
        RocketMQSerializationSchema<SendCommittable> rocketMQSerializationSchema0 =
                (RocketMQSerializationSchema<SendCommittable>)
                        mock(RocketMQSerializationSchema.class, new ViolatedAssumptionAnswer());
        RocketMQSink<SendCommittable> rocketMQSink0 =
                new RocketMQSink<SendCommittable>(
                        configuration0, messageQueueSelector0, rocketMQSerializationSchema0);
        SimpleVersionedSerializer<SendCommittable> simpleVersionedSerializer0 =
                rocketMQSink0.getCommittableSerializer();
        assertEquals(1, simpleVersionedSerializer0.getVersion());
    }

    @Test(timeout = 4000)
    public void test3() throws Throwable {
        RocketMQSink<Object> rocketMQSink0 =
                new RocketMQSink<Object>(
                        (Configuration) null,
                        (MessageQueueSelector) null,
                        (RocketMQSerializationSchema<Object>) null);
        Committer<SendCommittable> committer0 = rocketMQSink0.createCommitter();
        assertNotNull(committer0);
    }
}
