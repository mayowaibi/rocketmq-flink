/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 26 10:58:32 GMT 2025
 */

package org.apache.flink.connector.rocketmq.sink.table;

import org.apache.flink.api.common.typeinfo.TypeInformation;
import org.apache.flink.api.java.typeutils.RowTypeInfo;
import org.apache.flink.table.data.BoxedWrapperRowData;
import org.apache.flink.table.data.GenericRowData;
import org.apache.flink.table.types.DataType;
import org.apache.flink.table.types.logical.RowType;
import org.apache.flink.types.RowKind;

import org.apache.rocketmq.common.message.Message;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.lang.reflect.Array;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
        mockJVMNonDeterminism = true,
        useVFS = true,
        useVNET = true,
        resetStaticState = true,
        separateClassLoader = true,
        useJEE = true)
public class RocketMQRowDataConverter_ESTest extends RocketMQRowDataConverter_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0() throws Throwable {
        TypeInformation<Object>[] typeInformationArray0 =
                (TypeInformation<Object>[]) Array.newInstance(TypeInformation.class, 0);
        RowTypeInfo rowTypeInfo0 = new RowTypeInfo(typeInformationArray0);
        DataType[] dataTypeArray0 = new DataType[0];
        int[] intArray0 = new int[7];
        intArray0[0] = 9;
        RocketMQRowDataConverter rocketMQRowDataConverter0 =
                new RocketMQRowDataConverter(
                        "U",
                        "No message tag column set.",
                        "[MetaQConverter] Could not find the essage-key column: %s.",
                        "[MetaQConverter] Could not find the essage-key column: %s.",
                        ":'C[XTL[b",
                        false,
                        false,
                        true,
                        (String[]) null,
                        rowTypeInfo0,
                        dataTypeArray0,
                        true,
                        intArray0);
        rocketMQRowDataConverter0.open();
        BoxedWrapperRowData boxedWrapperRowData0 = new BoxedWrapperRowData(0);
        // Undeclared exception!
        try {
            rocketMQRowDataConverter0.convert(boxedWrapperRowData0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // 9
            //
            verifyException("org.apache.flink.table.data.BoxedWrapperRowData", e);
        }
    }

    @Test(timeout = 4000)
    public void test1() throws Throwable {
        String[] stringArray0 = new String[1];
        stringArray0[0] = "";
        TypeInformation<RowType.RowField>[] typeInformationArray0 =
                (TypeInformation<RowType.RowField>[]) Array.newInstance(TypeInformation.class, 1);
        Class<RowType.RowField> class0 = RowType.RowField.class;
        TypeInformation<RowType.RowField> typeInformation0 = TypeInformation.of(class0);
        typeInformationArray0[0] = typeInformation0;
        RowTypeInfo rowTypeInfo0 = new RowTypeInfo(typeInformationArray0, stringArray0);
        int[] intArray0 = new int[7];
        String[] stringArray1 = new String[9];
        stringArray1[0] = "";
        stringArray1[1] = "";
        RocketMQRowDataConverter rocketMQRowDataConverter0 =
                new RocketMQRowDataConverter(
                        "",
                        "com.google.common.base.Functions$FunctionForMapNoDefault",
                        "",
                        "",
                        "aN0i?R.+6Y+/y6rc",
                        true,
                        false,
                        false,
                        stringArray1,
                        rowTypeInfo0,
                        (DataType[]) null,
                        true,
                        intArray0);
        // Undeclared exception!
        try {
            rocketMQRowDataConverter0.open();
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // [MetaQConverter] Could not find the message-key column: null.
            //
            verifyException("org.apache.flink.util.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test2() throws Throwable {
        TypeInformation<Object>[] typeInformationArray0 =
                (TypeInformation<Object>[]) Array.newInstance(TypeInformation.class, 0);
        RowTypeInfo rowTypeInfo0 = new RowTypeInfo(typeInformationArray0);
        DataType[] dataTypeArray0 = new DataType[0];
        int[] intArray0 = new int[2];
        intArray0[0] = (-989);
        RocketMQRowDataConverter rocketMQRowDataConverter0 =
                new RocketMQRowDataConverter(
                        "",
                        (String) null,
                        "",
                        "",
                        "",
                        false,
                        false,
                        false,
                        (String[]) null,
                        rowTypeInfo0,
                        dataTypeArray0,
                        true,
                        intArray0);
        rocketMQRowDataConverter0.open();
        BoxedWrapperRowData boxedWrapperRowData0 = new BoxedWrapperRowData(0);
        // Undeclared exception!
        try {
            rocketMQRowDataConverter0.convert(boxedWrapperRowData0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // 0
            //
            verifyException("org.apache.flink.table.data.BoxedWrapperRowData", e);
        }
    }

    @Test(timeout = 4000)
    public void test3() throws Throwable {
        TypeInformation<Object>[] typeInformationArray0 =
                (TypeInformation<Object>[]) Array.newInstance(TypeInformation.class, 0);
        RowTypeInfo rowTypeInfo0 = new RowTypeInfo(typeInformationArray0);
        DataType[] dataTypeArray0 = new DataType[1];
        int[] intArray0 = new int[12];
        RocketMQRowDataConverter rocketMQRowDataConverter0 =
                new RocketMQRowDataConverter(
                        "",
                        "",
                        "",
                        "",
                        "",
                        false,
                        false,
                        false,
                        (String[]) null,
                        rowTypeInfo0,
                        dataTypeArray0,
                        false,
                        intArray0);
        rocketMQRowDataConverter0.open();
        BoxedWrapperRowData boxedWrapperRowData0 = new BoxedWrapperRowData(0);
        Message message0 = rocketMQRowDataConverter0.convert(boxedWrapperRowData0);
        assertNull(message0.getTransactionId());
    }

    @Test(timeout = 4000)
    public void test4() throws Throwable {
        TypeInformation<DataType>[] typeInformationArray0 =
                (TypeInformation<DataType>[]) Array.newInstance(TypeInformation.class, 1);
        Class<DataType> class0 = DataType.class;
        TypeInformation<DataType> typeInformation0 = TypeInformation.of(class0);
        typeInformationArray0[0] = typeInformation0;
        RowTypeInfo rowTypeInfo0 = new RowTypeInfo(typeInformationArray0);
        DataType[] dataTypeArray0 = new DataType[2];
        int[] intArray0 = new int[5];
        RocketMQRowDataConverter rocketMQRowDataConverter0 =
                new RocketMQRowDataConverter(
                        "D",
                        "D",
                        "D",
                        "D",
                        "D",
                        false,
                        false,
                        false,
                        (String[]) null,
                        rowTypeInfo0,
                        dataTypeArray0,
                        true,
                        intArray0);
        rocketMQRowDataConverter0.open();
        RowKind rowKind0 = RowKind.UPDATE_AFTER;
        GenericRowData genericRowData0 = new GenericRowData(rowKind0, 93);
        // Undeclared exception!
        try {
            rocketMQRowDataConverter0.convert(genericRowData0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.sink.table.RocketMQRowDataConverter", e);
        }
    }

    @Test(timeout = 4000)
    public void test5() throws Throwable {
        TypeInformation<Object>[] typeInformationArray0 =
                (TypeInformation<Object>[]) Array.newInstance(TypeInformation.class, 0);
        RowTypeInfo rowTypeInfo0 = new RowTypeInfo(typeInformationArray0);
        DataType[] dataTypeArray0 = new DataType[0];
        int[] intArray0 = new int[7];
        BoxedWrapperRowData boxedWrapperRowData0 = new BoxedWrapperRowData(0);
        RocketMQRowDataConverter rocketMQRowDataConverter0 =
                new RocketMQRowDataConverter(
                        "Row",
                        "U",
                        (String) null,
                        "Row",
                        "Row",
                        true,
                        true,
                        true,
                        (String[]) null,
                        rowTypeInfo0,
                        dataTypeArray0,
                        false,
                        intArray0);
        rocketMQRowDataConverter0.open();
        // Undeclared exception!
        try {
            rocketMQRowDataConverter0.convert(boxedWrapperRowData0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // No message tag column set.
            //
            verifyException("org.apache.flink.util.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test6() throws Throwable {
        String[] stringArray0 = new String[5];
        DataType[] dataTypeArray0 = new DataType[2];
        RocketMQRowDataConverter rocketMQRowDataConverter0 =
                new RocketMQRowDataConverter(
                        "i{;a&Sn",
                        "i{;a&Sn",
                        "i{;a&Sn",
                        "i{;a&Sn",
                        "i{;a&Sn",
                        true,
                        true,
                        true,
                        stringArray0,
                        (RowTypeInfo) null,
                        dataTypeArray0,
                        true,
                        (int[]) null);
        RowKind rowKind0 = RowKind.UPDATE_BEFORE;
        GenericRowData genericRowData0 = GenericRowData.ofKind(rowKind0, dataTypeArray0);
        Message message0 = rocketMQRowDataConverter0.convert(genericRowData0);
        assertNull(message0);
    }

    @Test(timeout = 4000)
    public void test7() throws Throwable {
        String[] stringArray0 = new String[1];
        stringArray0[0] = "";
        TypeInformation<RowType.RowField>[] typeInformationArray0 =
                (TypeInformation<RowType.RowField>[]) Array.newInstance(TypeInformation.class, 1);
        Class<RowType.RowField> class0 = RowType.RowField.class;
        TypeInformation<RowType.RowField> typeInformation0 = TypeInformation.of(class0);
        typeInformationArray0[0] = typeInformation0;
        RowTypeInfo rowTypeInfo0 = new RowTypeInfo(typeInformationArray0, stringArray0);
        int[] intArray0 = new int[7];
        RocketMQRowDataConverter rocketMQRowDataConverter0 =
                new RocketMQRowDataConverter(
                        (String) null,
                        (String) null,
                        "",
                        "",
                        (String) null,
                        true,
                        true,
                        true,
                        stringArray0,
                        rowTypeInfo0,
                        (DataType[]) null,
                        false,
                        intArray0);
        // Undeclared exception!
        try {
            rocketMQRowDataConverter0.open();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException(
                    "org.apache.flink.connector.rocketmq.sink.table.RocketMQRowDataConverter", e);
        }
    }

    @Test(timeout = 4000)
    public void test8() throws Throwable {
        TypeInformation<Object>[] typeInformationArray0 =
                (TypeInformation<Object>[]) Array.newInstance(TypeInformation.class, 0);
        RowTypeInfo rowTypeInfo0 = new RowTypeInfo(typeInformationArray0);
        DataType[] dataTypeArray0 = new DataType[0];
        int[] intArray0 = new int[7];
        RocketMQRowDataConverter rocketMQRowDataConverter0 =
                new RocketMQRowDataConverter(
                        "Q?",
                        "Q?",
                        "Q?",
                        "Q?",
                        "Q?",
                        true,
                        true,
                        true,
                        (String[]) null,
                        rowTypeInfo0,
                        dataTypeArray0,
                        true,
                        intArray0);
        // Undeclared exception!
        try {
            rocketMQRowDataConverter0.open();
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // [MetaQConverter] Could not find the tag column: Q?.
            //
            verifyException("org.apache.flink.util.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test9() throws Throwable {
        String[] stringArray0 = new String[1];
        stringArray0[0] = "";
        TypeInformation<RowType.RowField>[] typeInformationArray0 =
                (TypeInformation<RowType.RowField>[]) Array.newInstance(TypeInformation.class, 1);
        Class<RowType.RowField> class0 = RowType.RowField.class;
        TypeInformation<RowType.RowField> typeInformation0 = TypeInformation.of(class0);
        typeInformationArray0[0] = typeInformation0;
        RowTypeInfo rowTypeInfo0 = new RowTypeInfo(typeInformationArray0, stringArray0);
        int[] intArray0 = new int[7];
        RocketMQRowDataConverter rocketMQRowDataConverter0 =
                new RocketMQRowDataConverter(
                        (String) null,
                        (String) null,
                        "",
                        "",
                        (String) null,
                        false,
                        false,
                        false,
                        stringArray0,
                        rowTypeInfo0,
                        (DataType[]) null,
                        false,
                        intArray0);
        rocketMQRowDataConverter0.open();
    }
}
