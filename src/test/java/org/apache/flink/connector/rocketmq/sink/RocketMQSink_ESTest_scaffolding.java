/**
 * Scaffolding file used to store all the setups needed to run tests automatically generated by
 * EvoSuite Wed Mar 26 12:10:41 GMT 2025
 */
package org.apache.flink.connector.rocketmq.sink;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.evosuite.runtime.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

import static org.evosuite.shaded.org.mockito.Mockito.*;

@EvoSuiteClassExclude
public class RocketMQSink_ESTest_scaffolding {

    @org.junit.Rule
    public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr =
            new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

    private static final java.util.Properties defaultProperties =
            (java.util.Properties) java.lang.System.getProperties().clone();

    private org.evosuite.runtime.thread.ThreadStopper threadStopper =
            new org.evosuite.runtime.thread.ThreadStopper(
                    org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);

    @BeforeClass
    public static void initEvoSuiteFramework() {
        org.evosuite.runtime.RuntimeSettings.className =
                "org.apache.flink.connector.rocketmq.sink.RocketMQSink";
        org.evosuite.runtime.GuiSupport.initialize();
        org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100;
        org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000;
        org.evosuite.runtime.RuntimeSettings.mockSystemIn = true;
        org.evosuite.runtime.RuntimeSettings.sandboxMode =
                org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED;
        org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT();
        org.evosuite.runtime.classhandling.JDKClassResetter.init();
        setSystemProperties();
        initializeClasses();
        org.evosuite.runtime.Runtime.getInstance().resetRuntime();
        try {
            initMocksToAvoidTimeoutsInTheTests();
        } catch (ClassNotFoundException e) {
        }
    }

    @AfterClass
    public static void clearEvoSuiteFramework() {
        Sandbox.resetDefaultSecurityManager();
        java.lang.System.setProperties((java.util.Properties) defaultProperties.clone());
    }

    @Before
    public void initTestCase() {
        threadStopper.storeCurrentThreads();
        threadStopper.startRecordingTime();
        org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler();
        org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode();
        setSystemProperties();
        org.evosuite.runtime.GuiSupport.setHeadless();
        org.evosuite.runtime.Runtime.getInstance().resetRuntime();
        org.evosuite.runtime.agent.InstrumentingAgent.activate();
    }

    @After
    public void doneWithTestCase() {
        threadStopper.killAndJoinClientThreads();
        org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks();
        org.evosuite.runtime.classhandling.JDKClassResetter.reset();
        resetClasses();
        org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode();
        org.evosuite.runtime.agent.InstrumentingAgent.deactivate();
        org.evosuite.runtime.GuiSupport.restoreHeadlessMode();
    }

    public static void setSystemProperties() {

        java.lang.System.setProperties((java.util.Properties) defaultProperties.clone());
        java.lang.System.setProperty("file.encoding", "UTF-8");
        java.lang.System.setProperty("java.awt.headless", "true");
        java.lang.System.setProperty(
                "java.io.tmpdir", "/var/folders/t3/x2jshcps4n99vnsnf_qb26qm0000gn/T/");
        java.lang.System.setProperty("user.country", "GB");
        java.lang.System.setProperty("user.dir", "/Users/isaac/IdeaProjects/rocketmq-flink");
        java.lang.System.setProperty("user.home", "/Users/isaac");
        java.lang.System.setProperty("user.language", "en");
        java.lang.System.setProperty("user.name", "isaac");
        java.lang.System.setProperty("user.timezone", "America/Toronto");
    }

    private static void initializeClasses() {
        org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(
                RocketMQSink_ESTest_scaffolding.class.getClassLoader(),
                "org.apache.flink.configuration.ConfigOptions",
                "org.apache.flink.connector.rocketmq.sink.InnerProducer",
                "org.apache.rocketmq.common.message.Message",
                "org.apache.rocketmq.remoting.protocol.LanguageCode",
                "org.apache.flink.connector.rocketmq.sink.RocketMQSink",
                "org.apache.flink.configuration.WritableConfig",
                "org.apache.flink.connector.rocketmq.sink.RocketMQSinkBuilder",
                "org.apache.flink.api.connector.sink2.SinkWriter",
                "org.apache.flink.api.connector.sink2.TwoPhaseCommittingSink$PrecommittingSinkWriter",
                "org.apache.flink.connector.rocketmq.common.config.RocketMQConfigBuilder",
                "org.apache.flink.connector.rocketmq.sink.writer.context.RocketMQSinkContext",
                "org.apache.flink.shaded.guava30.com.google.common.collect.RegularImmutableList",
                "org.apache.flink.configuration.description.TextElement",
                "org.apache.flink.core.io.Versioned",
                "org.apache.flink.configuration.description.Description",
                "org.apache.rocketmq.client.producer.MessageQueueSelector",
                "org.apache.flink.connector.rocketmq.sink.writer.serializer.RocketMQSerializationSchema",
                "org.apache.flink.configuration.FallbackKey",
                "org.apache.flink.connector.rocketmq.sink.writer.RocketMQWriter",
                "org.apache.flink.connector.rocketmq.common.config.RocketMQConfigValidator",
                "org.apache.flink.shaded.guava30.com.google.common.collect.ImmutableSet",
                "org.apache.flink.configuration.DescribedEnum",
                "org.apache.flink.shaded.guava30.com.google.common.collect.SingletonImmutableList",
                "org.apache.flink.shaded.guava30.com.google.common.collect.ImmutableSet$RegularSetBuilderImpl",
                "org.apache.flink.api.connector.sink2.TwoPhaseCommittingSink",
                "org.apache.flink.util.UserCodeClassLoader",
                "org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder",
                "org.apache.flink.configuration.description.TextElement$TextStyle",
                "org.apache.flink.shaded.guava30.com.google.common.collect.UnmodifiableIterator",
                "org.apache.flink.shaded.guava30.com.google.common.collect.UnmodifiableListIterator",
                "org.apache.flink.shaded.guava30.com.google.common.collect.ImmutableList$1",
                "org.apache.flink.api.connector.sink2.Committer",
                "org.apache.flink.util.Preconditions",
                "org.apache.flink.shaded.guava30.com.google.common.collect.ImmutableList$ReverseImmutableList",
                "org.apache.flink.core.io.IOReadableWritable",
                "org.apache.flink.metrics.MetricGroup",
                "org.apache.flink.shaded.guava30.com.google.common.collect.ImmutableCollection",
                "org.apache.flink.core.io.SimpleVersionedSerializer",
                "org.apache.flink.connector.rocketmq.common.config.RocketMQOptions",
                "org.apache.flink.connector.rocketmq.sink.committer.SendCommittableSerializer",
                "org.apache.flink.configuration.description.BlockElement",
                "org.apache.flink.api.common.serialization.SerializationSchema",
                "org.apache.flink.connector.base.DeliveryGuarantee",
                "org.apache.flink.connector.rocketmq.sink.committer.RocketMQCommitter",
                "org.apache.flink.connector.rocketmq.sink.RocketMQSinkOptions",
                "org.apache.flink.configuration.description.DescriptionElement",
                "org.apache.flink.api.connector.sink2.Sink",
                "org.apache.flink.shaded.guava30.com.google.common.collect.ImmutableList$SubList",
                "org.apache.rocketmq.common.message.MessageQueue",
                "org.apache.flink.shaded.guava30.com.google.common.collect.RegularImmutableAsList",
                "org.apache.flink.connector.rocketmq.sink.committer.SendCommittable",
                "org.apache.flink.core.memory.DataOutputView",
                "org.apache.flink.metrics.groups.SinkWriterMetricGroup",
                "org.apache.flink.connector.rocketmq.common.config.RocketMQConfigValidator$RocketMQConfigValidatorBuilder",
                "org.apache.flink.configuration.UnmodifiableConfiguration",
                "org.apache.flink.configuration.ReadableConfig",
                "org.apache.flink.shaded.guava30.com.google.common.collect.ImmutableAsList",
                "org.apache.flink.metrics.groups.OperatorMetricGroup",
                "org.apache.flink.configuration.description.InlineElement",
                "org.apache.flink.configuration.description.Description$DescriptionBuilder",
                "org.apache.flink.shaded.guava30.com.google.common.collect.ObjectArrays",
                "org.apache.flink.connector.rocketmq.legacy.common.selector.MessageQueueSelector",
                "org.apache.flink.configuration.ConfigOptions$OptionBuilder",
                "org.apache.flink.configuration.ConfigOption",
                "org.apache.flink.core.memory.DataInputView",
                "org.apache.flink.configuration.Configuration",
                "org.apache.flink.api.common.operators.MailboxExecutor",
                "org.apache.flink.api.common.operators.ProcessingTimeService",
                "org.apache.flink.shaded.guava30.com.google.common.collect.AbstractIndexedListIterator",
                "org.apache.flink.shaded.guava30.com.google.common.collect.RegularImmutableSet",
                "org.apache.flink.api.common.serialization.SerializationSchema$InitializationContext",
                "org.apache.flink.api.common.ExecutionConfig$GlobalJobParameters",
                "org.apache.flink.shaded.guava30.com.google.common.collect.ImmutableList",
                "org.apache.flink.shaded.guava30.com.google.common.collect.ImmutableSet$SetBuilderImpl",
                "org.apache.rocketmq.client.AccessChannel",
                "org.apache.flink.shaded.guava30.com.google.common.collect.SingletonImmutableSet",
                "org.apache.flink.api.connector.sink2.Sink$InitContext");
    }

    private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException {
        mock(
                Class.forName(
                        "org.apache.flink.api.connector.sink2.Sink$InitContext",
                        false,
                        RocketMQSink_ESTest_scaffolding.class.getClassLoader()));
        mock(
                Class.forName(
                        "org.apache.flink.configuration.Configuration",
                        false,
                        RocketMQSink_ESTest_scaffolding.class.getClassLoader()));
        mock(
                Class.forName(
                        "org.apache.flink.connector.rocketmq.legacy.common.selector.MessageQueueSelector",
                        false,
                        RocketMQSink_ESTest_scaffolding.class.getClassLoader()));
        mock(
                Class.forName(
                        "org.apache.flink.connector.rocketmq.sink.writer.serializer.RocketMQSerializationSchema",
                        false,
                        RocketMQSink_ESTest_scaffolding.class.getClassLoader()));
    }

    private static void resetClasses() {
        org.evosuite.runtime.classhandling.ClassResetter.getInstance()
                .setClassLoader(RocketMQSink_ESTest_scaffolding.class.getClassLoader());

        org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
                "org.apache.flink.connector.rocketmq.sink.RocketMQSink",
                "org.apache.flink.api.common.ExecutionConfig$GlobalJobParameters",
                "org.apache.flink.configuration.Configuration",
                "org.apache.flink.connector.rocketmq.common.config.RocketMQConfigValidator",
                "org.apache.flink.connector.rocketmq.common.config.RocketMQConfigValidator$RocketMQConfigValidatorBuilder",
                "org.apache.flink.shaded.guava30.com.google.common.collect.ImmutableCollection",
                "org.apache.flink.shaded.guava30.com.google.common.collect.ImmutableList",
                "org.apache.flink.shaded.guava30.com.google.common.collect.ObjectArrays",
                "org.apache.flink.shaded.guava30.com.google.common.collect.RegularImmutableList",
                "org.apache.flink.shaded.guava30.com.google.common.collect.ImmutableSet",
                "org.apache.flink.shaded.guava30.com.google.common.collect.RegularImmutableSet",
                "org.apache.flink.connector.rocketmq.sink.RocketMQSinkBuilder",
                "org.apache.flink.connector.rocketmq.common.config.RocketMQConfigBuilder",
                "org.apache.flink.connector.rocketmq.sink.committer.SendCommittableSerializer",
                "org.apache.flink.connector.rocketmq.sink.writer.RocketMQWriter",
                "org.apache.flink.configuration.ConfigOptions",
                "org.apache.flink.util.Preconditions",
                "org.apache.flink.configuration.ConfigOptions$OptionBuilder",
                "org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder",
                "org.apache.flink.configuration.description.Description",
                "org.apache.flink.configuration.description.Description$DescriptionBuilder",
                "org.apache.flink.configuration.description.TextElement",
                "org.apache.flink.configuration.description.TextElement$TextStyle",
                "org.apache.flink.configuration.ConfigOption",
                "org.apache.rocketmq.client.AccessChannel",
                "org.apache.rocketmq.remoting.protocol.LanguageCode",
                "org.apache.flink.connector.rocketmq.common.config.RocketMQOptions",
                "org.apache.flink.connector.base.DeliveryGuarantee",
                "org.apache.flink.connector.rocketmq.sink.RocketMQSinkOptions",
                "org.apache.flink.connector.rocketmq.sink.committer.RocketMQCommitter");
    }
}
