/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 26 12:37:28 GMT 2025
 */

package org.apache.flink.connector.rocketmq.source.util;

import org.apache.flink.connector.rocketmq.source.split.RocketMQSourceSplit;

import org.apache.rocketmq.common.message.MessageQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.Test;
import org.junit.runner.RunWith;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
        mockJVMNonDeterminism = true,
        useVFS = true,
        useVNET = true,
        resetStaticState = true,
        separateClassLoader = true,
        useJEE = true)
public class UtilAll_ESTest extends UtilAll_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0() throws Throwable {
        RocketMQSourceSplit rocketMQSourceSplit0 =
                mock(RocketMQSourceSplit.class, new ViolatedAssumptionAnswer());
        doReturn("").when(rocketMQSourceSplit0).getBrokerName();
        doReturn(31).when(rocketMQSourceSplit0).getQueueId();
        doReturn("").when(rocketMQSourceSplit0).getTopic();
        MessageQueue messageQueue0 = UtilAll.getMessageQueue(rocketMQSourceSplit0);
        assertEquals(31, messageQueue0.getQueueId());
    }

    @Test(timeout = 4000)
    public void test1() throws Throwable {
        RocketMQSourceSplit rocketMQSourceSplit0 =
                mock(RocketMQSourceSplit.class, new ViolatedAssumptionAnswer());
        doReturn(")H,o\"hM").when(rocketMQSourceSplit0).getBrokerName();
        doReturn((-1)).when(rocketMQSourceSplit0).getQueueId();
        doReturn(")H,o\"hM").when(rocketMQSourceSplit0).getTopic();
        MessageQueue messageQueue0 = UtilAll.getMessageQueue(rocketMQSourceSplit0);
        assertEquals(")H,o\"hM", messageQueue0.getBrokerName());
    }

    @Test(timeout = 4000)
    public void test2() throws Throwable {
        // Undeclared exception!
        try {
            UtilAll.getSplitId((MessageQueue) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.connector.rocketmq.source.util.UtilAll", e);
        }
    }

    @Test(timeout = 4000)
    public void test3() throws Throwable {
        // Undeclared exception!
        try {
            UtilAll.getQueueDescription((MessageQueue) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.connector.rocketmq.source.util.UtilAll", e);
        }
    }

    @Test(timeout = 4000)
    public void test4() throws Throwable {
        // Undeclared exception!
        try {
            UtilAll.getMessageQueue((RocketMQSourceSplit) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.flink.connector.rocketmq.source.util.UtilAll", e);
        }
    }

    @Test(timeout = 4000)
    public void test5() throws Throwable {
        RocketMQSourceSplit rocketMQSourceSplit0 =
                mock(RocketMQSourceSplit.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(rocketMQSourceSplit0).getBrokerName();
        doReturn(0).when(rocketMQSourceSplit0).getQueueId();
        doReturn((String) null).when(rocketMQSourceSplit0).getTopic();
        MessageQueue messageQueue0 = UtilAll.getMessageQueue(rocketMQSourceSplit0);
        String string0 = UtilAll.getSplitId(messageQueue0);
        assertEquals("null#null#0", string0);
    }

    @Test(timeout = 4000)
    public void test6() throws Throwable {
        UtilAll utilAll0 = new UtilAll();
    }

    @Test(timeout = 4000)
    public void test7() throws Throwable {
        RocketMQSourceSplit rocketMQSourceSplit0 =
                mock(RocketMQSourceSplit.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(rocketMQSourceSplit0).getBrokerName();
        doReturn(0).when(rocketMQSourceSplit0).getQueueId();
        doReturn((String) null).when(rocketMQSourceSplit0).getTopic();
        MessageQueue messageQueue0 = UtilAll.getMessageQueue(rocketMQSourceSplit0);
        String string0 = UtilAll.getQueueDescription(messageQueue0);
        assertEquals("(Topic: null, BrokerName: null, QueueId: 0)", string0);
    }
}
